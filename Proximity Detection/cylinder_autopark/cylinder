#include <ros/ros.h>
// PCL specific includes
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/io/pcd_io.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/filters/passthrough.h>
#include <boost/foreach.hpp>

typedef pcl::PointXYZ PointT;


ros::Publisher pub;

void 
cloud_cb (const sensor_msgs::PointCloud2ConstPtr& input)
{
	pcl::PCLPointCloud2::Ptr cloud (new pcl::PCLPointCloud2 ());
	
	pcl::PCLPointCloud2::Ptr cloud_filtered (new pcl::PCLPointCloud2 ());
	
	pcl::PCLPointCloud2::Ptr cloud_filtered2 (new pcl::PCLPointCloud2);
	
	//pcl::PCLPointCloud2::Ptr cloud_noiseFiltered (new pcl::PCLPointCloud2 ());
	
	pcl_conversions::toPCL(*input, *cloud); // Create a container for the data.
	

  // Voxel Grid Downsampling
  
  pcl::VoxelGrid<pcl::PCLPointCloud2> sor;
  sor.setInputCloud (cloud);
  sor.setLeafSize (0.02f, 0.02f, 0.02f);
  sor.filter (*cloud_filtered);
  
  //~ sensor_msgs::PointCloud2 output;
  //~ output = *input;
  
  //pcl_conversions::moveToROSMsg(sensor_msgs::PointCloud2 &cloud_filtered, sensor_msgs::PointCloud2 &output)
 
 
 pcl::PassThrough< pcl::PCLPointCloud2 > pass;
 pass.setInputCloud(cloud_filtered);
 pass.setFilterFieldName ("z");
 pass.setFilterLimits (0, 1.0);
 //pass.setFilterLimitsNegative (true);
 pass.filter(*cloud_filtered2);
 
 
 
  //~ pcl::PassThrough<pcl::PointXYZ> pass;
  //~ pass.setInputCloud(cloud2);
  //~ pass.setFilterFieldName ("z");
  //~ pass.setFilterLimits (0.0, 1.0);
  //~ //pass.setFilterLimitsNegative (true);
  //~ pass.filter(cloud2);
  
  sensor_msgs::PointCloud2 output;
  pcl_conversions::fromPCL(*cloud_filtered2, output);
  
  //~ 
  // Publish the data.
  pub.publish (output);
}

int
main (int argc, char** argv)
{
  // Initialize ROS
  ros::init (argc, argv, "my_pcl_tutorial");
  ros::NodeHandle nh;

  // Create a ROS subscriber for the input point cloud
  ros::Subscriber sub = nh.subscribe ("input", 1, cloud_cb);

  // Create a ROS publisher for the output point cloud
  pub = nh.advertise<sensor_msgs::PointCloud2> ("output", 1);

  // Spin
  ros::spin ();
}
