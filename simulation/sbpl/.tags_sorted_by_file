!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
DEBUG	include/sbpl/config.h	53;"	d
ERR_EPS	include/sbpl/config.h	63;"	d
MEM_CHECK	include/sbpl/config.h	47;"	d
SBPL_DEBUG	include/sbpl/config.h	84;"	d
SBPL_DEBUG	include/sbpl/config.h	92;"	d
SBPL_DEBUG	include/sbpl/config.h	99;"	d
SBPL_DEBUG_NAMED	include/sbpl/config.h	100;"	d
SBPL_DEBUG_NAMED	include/sbpl/config.h	110;"	d
SBPL_DEBUG_NAMED	include/sbpl/config.h	85;"	d
SBPL_DEBUG_NAMED	include/sbpl/config.h	93;"	d
SBPL_ERROR	include/sbpl/config.h	103;"	d
SBPL_ERROR	include/sbpl/config.h	88;"	d
SBPL_ERROR	include/sbpl/config.h	96;"	d
SBPL_FATAL	include/sbpl/config.h	104;"	d
SBPL_FATAL	include/sbpl/config.h	89;"	d
SBPL_FATAL	include/sbpl/config.h	97;"	d
SBPL_FCLOSE	include/sbpl/config.h	113;"	d
SBPL_FCLOSE	include/sbpl/config.h	120;"	d
SBPL_FCLOSE	include/sbpl/config.h	126;"	d
SBPL_FFLUSH	include/sbpl/config.h	116;"	d
SBPL_FFLUSH	include/sbpl/config.h	123;"	d
SBPL_FFLUSH	include/sbpl/config.h	129;"	d
SBPL_FFLUSH_TEXT_FP	include/sbpl/config.h	/^typedef int (*SBPL_FFLUSH_TEXT_FP)(FILE*);$/;"	t
SBPL_FOPEN	include/sbpl/config.h	112;"	d
SBPL_FOPEN	include/sbpl/config.h	119;"	d
SBPL_FOPEN	include/sbpl/config.h	125;"	d
SBPL_FPRINTF	include/sbpl/config.h	115;"	d
SBPL_FPRINTF	include/sbpl/config.h	122;"	d
SBPL_FPRINTF	include/sbpl/config.h	128;"	d
SBPL_INFO	include/sbpl/config.h	101;"	d
SBPL_INFO	include/sbpl/config.h	86;"	d
SBPL_INFO	include/sbpl/config.h	94;"	d
SBPL_LEVEL_DEBUG	include/sbpl/config.h	66;"	d
SBPL_LEVEL_ERROR	include/sbpl/config.h	69;"	d
SBPL_LEVEL_FATAL	include/sbpl/config.h	70;"	d
SBPL_LEVEL_INFO	include/sbpl/config.h	67;"	d
SBPL_LEVEL_NONE	include/sbpl/config.h	65;"	d
SBPL_LEVEL_WARN	include/sbpl/config.h	68;"	d
SBPL_PRINTF	include/sbpl/config.h	114;"	d
SBPL_PRINTF	include/sbpl/config.h	121;"	d
SBPL_PRINTF	include/sbpl/config.h	127;"	d
SBPL_PRINT_TEXT_FP	include/sbpl/config.h	/^typedef int (*SBPL_PRINT_TEXT_FP)(int level, const char*);$/;"	t
SBPL_WARN	include/sbpl/config.h	102;"	d
SBPL_WARN	include/sbpl/config.h	87;"	d
SBPL_WARN	include/sbpl/config.h	95;"	d
TIME_DEBUG	include/sbpl/config.h	58;"	d
USE_HEUR	include/sbpl/config.h	41;"	d
__CONFIG_H_	include/sbpl/config.h	36;"	d
AreEquivalent	include/sbpl/discrete_space_information/environment.h	/^    virtual bool AreEquivalent(int StateID1, int StateID2)$/;"	f	class:DiscreteSpaceInformation
DiscreteSpaceInformation	include/sbpl/discrete_space_information/environment.h	/^    DiscreteSpaceInformation()$/;"	f	class:DiscreteSpaceInformation
DiscreteSpaceInformation	include/sbpl/discrete_space_information/environment.h	/^class DiscreteSpaceInformation$/;"	c
EnsureHeuristicsUpdated	include/sbpl/discrete_space_information/environment.h	/^    virtual void EnsureHeuristicsUpdated(bool bGoalHeuristics)$/;"	f	class:DiscreteSpaceInformation
GetExpandedStates	include/sbpl/discrete_space_information/environment.h	/^    virtual std::vector<int> GetExpandedStates()$/;"	f	class:DiscreteSpaceInformation
GetLazyPreds	include/sbpl/discrete_space_information/environment.h	/^    virtual void GetLazyPreds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:DiscreteSpaceInformation
GetLazyPredsWithUniqueIds	include/sbpl/discrete_space_information/environment.h	/^    virtual void GetLazyPredsWithUniqueIds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:DiscreteSpaceInformation
GetLazySuccs	include/sbpl/discrete_space_information/environment.h	/^    virtual void GetLazySuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:DiscreteSpaceInformation
GetLazySuccsWithUniqueIds	include/sbpl/discrete_space_information/environment.h	/^    virtual void GetLazySuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:DiscreteSpaceInformation
GetPredsWithUniqueIds	include/sbpl/discrete_space_information/environment.h	/^    virtual void GetPredsWithUniqueIds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV){$/;"	f	class:DiscreteSpaceInformation
GetRandomPredsatDistance	include/sbpl/discrete_space_information/environment.h	/^    virtual void GetRandomPredsatDistance(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CLowV)$/;"	f	class:DiscreteSpaceInformation
GetRandomSuccsatDistance	include/sbpl/discrete_space_information/environment.h	/^    virtual void GetRandomSuccsatDistance(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CLowV)$/;"	f	class:DiscreteSpaceInformation
GetSuccsWithUniqueIds	include/sbpl/discrete_space_information/environment.h	/^    virtual void GetSuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV){$/;"	f	class:DiscreteSpaceInformation
GetTrueCost	include/sbpl/discrete_space_information/environment.h	/^    virtual int GetTrueCost(int parentID, int childID){$/;"	f	class:DiscreteSpaceInformation
SetEnvParameter	include/sbpl/discrete_space_information/environment.h	/^    virtual bool SetEnvParameter(const char* parameter, int value)$/;"	f	class:DiscreteSpaceInformation
StateID2IndexMapping	include/sbpl/discrete_space_information/environment.h	/^    std::vector<int*> StateID2IndexMapping;$/;"	m	class:DiscreteSpaceInformation
__ENVIRONMENT_H_	include/sbpl/discrete_space_information/environment.h	31;"	d
fDeb	include/sbpl/discrete_space_information/environment.h	/^    FILE* fDeb;$/;"	m	class:DiscreteSpaceInformation
isGoal	include/sbpl/discrete_space_information/environment.h	/^    virtual bool isGoal(int id){$/;"	f	class:DiscreteSpaceInformation
~DiscreteSpaceInformation	include/sbpl/discrete_space_information/environment.h	/^    virtual ~DiscreteSpaceInformation()$/;"	f	class:DiscreteSpaceInformation
Coord2StateIDHashTable	include/sbpl/discrete_space_information/environment_XXX.h	/^    std::vector<EnvXXXHashEntry_t*>* Coord2StateIDHashTable;$/;"	m	struct:__anon21
ENVXXXHASHENTRY	include/sbpl/discrete_space_information/environment_XXX.h	/^typedef struct ENVXXXHASHENTRY$/;"	s
ENV_XXX_CONFIG	include/sbpl/discrete_space_information/environment_XXX.h	/^typedef struct ENV_XXX_CONFIG$/;"	s
EnvXXX	include/sbpl/discrete_space_information/environment_XXX.h	/^    EnvironmentXXX_t EnvXXX;$/;"	m	class:EnvironmentXXX
EnvXXXCfg	include/sbpl/discrete_space_information/environment_XXX.h	/^    EnvXXXConfig_t EnvXXXCfg;$/;"	m	class:EnvironmentXXX
EnvXXXConfig_t	include/sbpl/discrete_space_information/environment_XXX.h	/^} EnvXXXConfig_t;$/;"	t	typeref:struct:ENV_XXX_CONFIG
EnvXXXHashEntry_t	include/sbpl/discrete_space_information/environment_XXX.h	/^} EnvXXXHashEntry_t;$/;"	t	typeref:struct:ENVXXXHASHENTRY
EnvironmentXXX	include/sbpl/discrete_space_information/environment_XXX.h	/^class EnvironmentXXX : public DiscreteSpaceInformation$/;"	c
EnvironmentXXX_t	include/sbpl/discrete_space_information/environment_XXX.h	/^} EnvironmentXXX_t;$/;"	t	typeref:struct:__anon21
GoalX1	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int GoalX1;$/;"	m	struct:ENV_XXX_CONFIG
GoalX2	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int GoalX2;$/;"	m	struct:ENV_XXX_CONFIG
GoalX3	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int GoalX3;$/;"	m	struct:ENV_XXX_CONFIG
GoalX4	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int GoalX4;$/;"	m	struct:ENV_XXX_CONFIG
HashTableSize	include/sbpl/discrete_space_information/environment_XXX.h	/^    int HashTableSize;$/;"	m	struct:__anon21
StartX1	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int StartX1;$/;"	m	struct:ENV_XXX_CONFIG
StartX2	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int StartX2;$/;"	m	struct:ENV_XXX_CONFIG
StartX3	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int StartX3;$/;"	m	struct:ENV_XXX_CONFIG
StartX4	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int StartX4;$/;"	m	struct:ENV_XXX_CONFIG
StateID2CoordTable	include/sbpl/discrete_space_information/environment_XXX.h	/^    std::vector<EnvXXXHashEntry_t*> StateID2CoordTable;$/;"	m	struct:__anon21
X1	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int X1;$/;"	m	struct:ENVXXXHASHENTRY
X2	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int X2;$/;"	m	struct:ENVXXXHASHENTRY
X3	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int X3;$/;"	m	struct:ENVXXXHASHENTRY
X4	include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int X4;$/;"	m	struct:ENVXXXHASHENTRY
XXX_MAXACTIONSWIDTH	include/sbpl/discrete_space_information/environment_XXX.h	37;"	d
__ENVIRONMENT_XXX_H_	include/sbpl/discrete_space_information/environment_XXX.h	31;"	d
goalstateid	include/sbpl/discrete_space_information/environment_XXX.h	/^    int goalstateid;$/;"	m	struct:__anon21
startstateid	include/sbpl/discrete_space_information/environment_XXX.h	/^    int startstateid;$/;"	m	struct:__anon21
stateID	include/sbpl/discrete_space_information/environment_XXX.h	/^    int stateID;$/;"	m	struct:ENVXXXHASHENTRY
~EnvironmentXXX	include/sbpl/discrete_space_information/environment_XXX.h	/^    ~EnvironmentXXX() { }$/;"	f	class:EnvironmentXXX
Coord2StateIDHashTable	include/sbpl/discrete_space_information/environment_nav2D.h	/^    std::vector<EnvNAV2DHashEntry_t*>* Coord2StateIDHashTable;$/;"	m	struct:__anon20
ENVHASHENTRY	include/sbpl/discrete_space_information/environment_nav2D.h	/^typedef struct ENVHASHENTRY$/;"	s
ENVNAV2D_COSTMULT	include/sbpl/discrete_space_information/environment_nav2D.h	38;"	d
ENVNAV2D_DEFAULTOBSTHRESH	include/sbpl/discrete_space_information/environment_nav2D.h	39;"	d
ENVNAV2D_MAXDIRS	include/sbpl/discrete_space_information/environment_nav2D.h	40;"	d
ENV_NAV2D_CONFIG	include/sbpl/discrete_space_information/environment_nav2D.h	/^typedef struct ENV_NAV2D_CONFIG$/;"	s
EndX_c	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int EndX_c;$/;"	m	struct:ENV_NAV2D_CONFIG
EndY_c	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int EndY_c;$/;"	m	struct:ENV_NAV2D_CONFIG
EnvHeight_c	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int EnvHeight_c;$/;"	m	struct:ENV_NAV2D_CONFIG
EnvNAV2D	include/sbpl/discrete_space_information/environment_nav2D.h	/^    EnvironmentNAV2D_t EnvNAV2D;$/;"	m	class:EnvironmentNAV2D
EnvNAV2DCfg	include/sbpl/discrete_space_information/environment_nav2D.h	/^    EnvNAV2DConfig_t EnvNAV2DCfg;$/;"	m	class:EnvironmentNAV2D
EnvNAV2DConfig_t	include/sbpl/discrete_space_information/environment_nav2D.h	/^} EnvNAV2DConfig_t;$/;"	t	typeref:struct:ENV_NAV2D_CONFIG
EnvNAV2DHashEntry_t	include/sbpl/discrete_space_information/environment_nav2D.h	/^} EnvNAV2DHashEntry_t;$/;"	t	typeref:struct:ENVHASHENTRY
EnvWidth_c	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int EnvWidth_c;$/;"	m	struct:ENV_NAV2D_CONFIG
EnvironmentNAV2D	include/sbpl/discrete_space_information/environment_nav2D.h	/^class EnvironmentNAV2D : public DiscreteSpaceInformation$/;"	c
EnvironmentNAV2D_t	include/sbpl/discrete_space_information/environment_nav2D.h	/^} EnvironmentNAV2D_t;$/;"	t	typeref:struct:__anon20
GetLazyPreds	include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetLazyPreds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAV2D
GetLazyPredsWithUniqueIds	include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetLazyPredsWithUniqueIds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAV2D
GetLazySuccs	include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetLazySuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAV2D
GetLazySuccsWithUniqueIds	include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetLazySuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAV2D
GetPredsWithUniqueIds	include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetPredsWithUniqueIds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV){$/;"	f	class:EnvironmentNAV2D
GetSuccsWithUniqueIds	include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetSuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV){$/;"	f	class:EnvironmentNAV2D
GetTrueCost	include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual int GetTrueCost(int parentID, int childID){return -1;};\/\/FIXME: this shouldn't ever be called because we always return true cost...$/;"	f	class:EnvironmentNAV2D
Grid2D	include/sbpl/discrete_space_information/environment_nav2D.h	/^    unsigned char** Grid2D;$/;"	m	struct:ENV_NAV2D_CONFIG
HashTableSize	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int HashTableSize;$/;"	m	struct:__anon20
StartX_c	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int StartX_c;$/;"	m	struct:ENV_NAV2D_CONFIG
StartY_c	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int StartY_c;$/;"	m	struct:ENV_NAV2D_CONFIG
StateID2CoordTable	include/sbpl/discrete_space_information/environment_nav2D.h	/^    std::vector<EnvNAV2DHashEntry_t*> StateID2CoordTable;$/;"	m	struct:__anon20
X	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int X;$/;"	m	struct:ENVHASHENTRY
Y	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int Y;$/;"	m	struct:ENVHASHENTRY
__ENVIRONMENT_NAV2D_H_	include/sbpl/discrete_space_information/environment_nav2D.h	31;"	d
bInitialized	include/sbpl/discrete_space_information/environment_nav2D.h	/^    bool bInitialized;$/;"	m	struct:__anon20
dx_	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dx_[ENVNAV2D_MAXDIRS];$/;"	m	struct:ENV_NAV2D_CONFIG
dxintersects_	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dxintersects_[ENVNAV2D_MAXDIRS][2];$/;"	m	struct:ENV_NAV2D_CONFIG
dxy_distance_mm_	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dxy_distance_mm_[ENVNAV2D_MAXDIRS];$/;"	m	struct:ENV_NAV2D_CONFIG
dy_	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dy_[ENVNAV2D_MAXDIRS];$/;"	m	struct:ENV_NAV2D_CONFIG
dyintersects_	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dyintersects_[ENVNAV2D_MAXDIRS][2];$/;"	m	struct:ENV_NAV2D_CONFIG
goalstateid	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int goalstateid;$/;"	m	struct:__anon20
isGoal	include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual bool isGoal(int id){$/;"	f	class:EnvironmentNAV2D
numofdirs	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int numofdirs; \/\/for now either 8 or 16 (default is 8)$/;"	m	struct:ENV_NAV2D_CONFIG
obsthresh	include/sbpl/discrete_space_information/environment_nav2D.h	/^    unsigned char obsthresh;$/;"	m	struct:ENV_NAV2D_CONFIG
startstateid	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int startstateid;$/;"	m	struct:__anon20
stateID	include/sbpl/discrete_space_information/environment_nav2D.h	/^    int stateID;$/;"	m	struct:ENVHASHENTRY
ENVNAV2DUU_COSTMULT	include/sbpl/discrete_space_information/environment_nav2Duu.h	41;"	d
ENVNAV2DUU_MAXDIRS	include/sbpl/discrete_space_information/environment_nav2Duu.h	43;"	d
ENVNAV2DUU_STATEIDTOX	include/sbpl/discrete_space_information/environment_nav2Duu.h	87;"	d
ENVNAV2DUU_STATEIDTOY	include/sbpl/discrete_space_information/environment_nav2Duu.h	86;"	d
ENVNAV2DUU_XYTOSTATEID	include/sbpl/discrete_space_information/environment_nav2Duu.h	88;"	d
ENV_NAV2DUU_CONFIG	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^typedef struct ENV_NAV2DUU_CONFIG$/;"	s
EndX_c	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int EndX_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
EndY_c	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int EndY_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
EnvHeight_c	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int EnvHeight_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
EnvNAV2DUU	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    EnvironmentNAV2DUU_t EnvNAV2DUU;$/;"	m	class:EnvironmentNAV2DUU
EnvNAV2DUUCfg	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    EnvNAV2DUUConfig_t EnvNAV2DUUCfg;$/;"	m	class:EnvironmentNAV2DUU
EnvNAV2DUUConfig_t	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^} EnvNAV2DUUConfig_t;$/;"	t	typeref:struct:ENV_NAV2DUU_CONFIG
EnvWidth_c	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int EnvWidth_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
EnvironmentNAV2DUU	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^class EnvironmentNAV2DUU : public DiscreteSpaceInformation$/;"	c
EnvironmentNAV2DUU_t	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^} EnvironmentNAV2DUU_t;$/;"	t	typeref:struct:__anon14
GetPreds	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    virtual void GetPreds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV)$/;"	f	class:EnvironmentNAV2DUU
GetSuccs	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    virtual void GetSuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV)$/;"	f	class:EnvironmentNAV2DUU
Grid2D	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    unsigned char** Grid2D;$/;"	m	struct:ENV_NAV2DUU_CONFIG
HiddenVariableXY2ID	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int** HiddenVariableXY2ID;$/;"	m	struct:ENV_NAV2DUU_CONFIG
NAV2DUU_MAXACTIONSWIDTH	include/sbpl/discrete_space_information/environment_nav2Duu.h	42;"	d
NAVNAV2DUU_MAXWIDTHHEIGH	include/sbpl/discrete_space_information/environment_nav2Duu.h	85;"	d
SetAllActionsandAllOutcomes	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    virtual void SetAllActionsandAllOutcomes(CMDPSTATE* state)$/;"	f	class:EnvironmentNAV2DUU
SetAllPreds	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    virtual void SetAllPreds(CMDPSTATE* state)$/;"	f	class:EnvironmentNAV2DUU
StartX_c	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int StartX_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
StartY_c	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int StartY_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
UncertaintyGrid2D	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    float** UncertaintyGrid2D;$/;"	m	struct:ENV_NAV2DUU_CONFIG
__ENVIRONMENT_NAV2DUU_H_	include/sbpl/discrete_space_information/environment_nav2Duu.h	31;"	d
bInitialized	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    bool bInitialized;$/;"	m	struct:__anon14
dx_	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dx_[ENVNAV2DUU_MAXDIRS];$/;"	m	struct:ENV_NAV2DUU_CONFIG
dxintersects_	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dxintersects_[ENVNAV2D_MAXDIRS][2];$/;"	m	struct:ENV_NAV2DUU_CONFIG
dxy_distance_mm_	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dxy_distance_mm_[ENVNAV2DUU_MAXDIRS];$/;"	m	struct:ENV_NAV2DUU_CONFIG
dy_	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dy_[ENVNAV2DUU_MAXDIRS];$/;"	m	struct:ENV_NAV2DUU_CONFIG
dyintersects_	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dyintersects_[ENVNAV2D_MAXDIRS][2];$/;"	m	struct:ENV_NAV2DUU_CONFIG
goalstateid	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int goalstateid;$/;"	m	struct:__anon14
numofdirs	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int numofdirs; \/\/for now can only be 8$/;"	m	struct:ENV_NAV2DUU_CONFIG
obsthresh	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    unsigned char obsthresh;$/;"	m	struct:ENV_NAV2DUU_CONFIG
sizeofH	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int sizeofH;$/;"	m	struct:ENV_NAV2DUU_CONFIG
sizeofS	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int sizeofS;$/;"	m	struct:ENV_NAV2DUU_CONFIG
startstateid	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int startstateid;$/;"	m	struct:__anon14
~EnvironmentNAV2DUU	include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    ~EnvironmentNAV2DUU()$/;"	f	class:EnvironmentNAV2DUU
ActionsV	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATAction_t** ActionsV; $/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
Coord2StateIDHashTable	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<EnvNAVXYTHETALATHashEntry_t*>* Coord2StateIDHashTable;$/;"	m	class:EnvironmentNAVXYTHETALAT
Coord2StateIDHashTable_lookup	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATHashEntry_t** Coord2StateIDHashTable_lookup;$/;"	m	class:EnvironmentNAVXYTHETALAT
CreateNewHashEntry	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATHashEntry_t* (EnvironmentNAVXYTHETALAT::*CreateNewHashEntry)(int X, int Y, int Theta);$/;"	m	class:EnvironmentNAVXYTHETALAT
ENVNAVXYTHETALAT_DEFAULTOBSTHRESH	include/sbpl/discrete_space_information/environment_navxythetalat.h	40;"	d
ENV_NAVXYTHETALAT_CONFIG	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^typedef struct ENV_NAVXYTHETALAT_CONFIG$/;"	s
EndTheta	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EndTheta;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EndX_c	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EndX_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EndY_c	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EndY_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EnvHeight_c	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EnvHeight_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EnvNAVXYTHETALAT	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvironmentNAVXYTHETALAT_t EnvNAVXYTHETALAT;$/;"	m	class:EnvironmentNAVXYTHETALATTICE
EnvNAVXYTHETALATAction_t	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} EnvNAVXYTHETALATAction_t;$/;"	t	typeref:struct:__anon15
EnvNAVXYTHETALATCfg	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATConfig_t EnvNAVXYTHETALATCfg;$/;"	m	class:EnvironmentNAVXYTHETALATTICE
EnvNAVXYTHETALATConfig_t	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} EnvNAVXYTHETALATConfig_t;$/;"	t	typeref:struct:ENV_NAVXYTHETALAT_CONFIG
EnvNAVXYTHETALATHashEntry_t	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} EnvNAVXYTHETALATHashEntry_t;$/;"	t	typeref:struct:__anon16
EnvNAVXYTHETALAT_InitParms	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^class EnvNAVXYTHETALAT_InitParms$/;"	c
EnvWidth_c	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EnvWidth_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EnvironmentNAVXYTHETALAT	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvironmentNAVXYTHETALAT()$/;"	f	class:EnvironmentNAVXYTHETALAT
EnvironmentNAVXYTHETALAT	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^class EnvironmentNAVXYTHETALAT : public EnvironmentNAVXYTHETALATTICE$/;"	c
EnvironmentNAVXYTHETALATTICE	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^class EnvironmentNAVXYTHETALATTICE : public DiscreteSpaceInformation$/;"	c
EnvironmentNAVXYTHETALAT_t	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} EnvironmentNAVXYTHETALAT_t;$/;"	t	typeref:struct:__anon18
FootprintPolygon	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_2Dpt_t> FootprintPolygon;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
GetHashEntry	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATHashEntry_t* (EnvironmentNAVXYTHETALAT::*GetHashEntry)(int X, int Y, int Theta);$/;"	m	class:EnvironmentNAVXYTHETALAT
Grid2D	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char** Grid2D;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
HashTableSize	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int HashTableSize;$/;"	m	class:EnvironmentNAVXYTHETALAT
NAVXYTHETALAT_COSTMULT_MTOMM	include/sbpl/discrete_space_information/environment_navxythetalat.h	51;"	d
NAVXYTHETALAT_DEFAULT_ACTIONWIDTH	include/sbpl/discrete_space_information/environment_navxythetalat.h	50;"	d
NAVXYTHETALAT_DXYWIDTH	include/sbpl/discrete_space_information/environment_navxythetalat.h	39;"	d
NAVXYTHETALAT_THETADIRS	include/sbpl/discrete_space_information/environment_navxythetalat.h	47;"	d
NumThetaDirs	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int NumThetaDirs;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
PredActionsV	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<EnvNAVXYTHETALATAction_t*>* PredActionsV; $/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
PrintVars	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    virtual void PrintVars() { }$/;"	f	class:EnvironmentNAVXYTHETALAT
PrintVars	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    virtual void PrintVars() { }$/;"	f	class:EnvironmentNAVXYTHETALATTICE
SBPL_XYTHETALAT_MAXSTATESFORLOOKUP	include/sbpl/discrete_space_information/environment_navxythetalat.h	42;"	d
SBPL_xytheta_mprimitive	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} SBPL_xytheta_mprimitive;$/;"	t	typeref:struct:__anon17
SetGoalTolerance	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    virtual void SetGoalTolerance(double tol_x, double tol_y, double tol_theta) { \/**< not used yet *\/ }$/;"	f	class:EnvironmentNAVXYTHETALAT
StartTheta	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int StartTheta;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
StartX_c	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int StartX_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
StartY_c	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int StartY_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
StateID2CoordTable	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<EnvNAVXYTHETALATHashEntry_t*> StateID2CoordTable;$/;"	m	class:EnvironmentNAVXYTHETALAT
Theta	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char Theta;$/;"	m	struct:__anon16
X	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int X;$/;"	m	struct:__anon16
Y	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int Y;$/;"	m	struct:__anon16
__ENVIRONMENT_NAVXYTHETALAT_H_	include/sbpl/discrete_space_information/environment_navxythetalat.h	31;"	d
actionwidth	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int actionwidth; \/\/number of motion primitives$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
additionalactioncostmult	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int additionalactioncostmult;$/;"	m	struct:__anon17
affectedpredstatesV	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_cell_t> affectedpredstatesV; \/\/arrays of states whose incoming actions cross cell 0,0$/;"	m	class:EnvironmentNAVXYTHETALATTICE
affectedsuccstatesV	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_cell_t> affectedsuccstatesV; \/\/arrays of states whose outgoing actions cross cell 0,0$/;"	m	class:EnvironmentNAVXYTHETALATTICE
aind	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char aind; \/\/index of the action (unique for given starttheta)$/;"	m	struct:__anon15
bInitialized	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    bool bInitialized;$/;"	m	struct:__anon18
bNeedtoRecomputeGoalHeuristics	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    bool bNeedtoRecomputeGoalHeuristics; \/\/set whenever grid2Dsearchfromgoal needs to be re-executed$/;"	m	class:EnvironmentNAVXYTHETALATTICE
bNeedtoRecomputeStartHeuristics	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    bool bNeedtoRecomputeStartHeuristics; \/\/set whenever grid2Dsearchfromstart needs to be re-executed$/;"	m	class:EnvironmentNAVXYTHETALATTICE
cellsize_m	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double cellsize_m;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
cost	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned int cost;$/;"	m	struct:__anon15
cost_inscribed_thresh	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char cost_inscribed_thresh;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
cost_possibly_circumscribed_thresh	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int cost_possibly_circumscribed_thresh; \/\/ it has to be integer, because -1 means that it is not provided.$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
dX	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char dX;$/;"	m	struct:__anon15
dXY	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int dXY[NAVXYTHETALAT_DXYWIDTH][2];$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
dY	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char dY;$/;"	m	struct:__anon15
endcell	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    sbpl_xy_theta_cell_t endcell;$/;"	m	struct:__anon17
endtheta	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char endtheta;$/;"	m	struct:__anon15
goalstateid	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int goalstateid;$/;"	m	struct:__anon18
goaltheta	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaltheta;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goaltol_theta	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaltol_theta;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goaltol_x	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaltol_x;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goaltol_y	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaltol_y;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goalx	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goalx;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goaly	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaly;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
grid2Dsearchfromgoal	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    SBPL2DGridSearch* grid2Dsearchfromgoal; \/\/computes h-values that estimate distances to goal x,y from all cells$/;"	m	class:EnvironmentNAVXYTHETALATTICE
grid2Dsearchfromstart	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    SBPL2DGridSearch* grid2Dsearchfromstart; \/\/computes h-values that estimate distances from start x,y to all cells$/;"	m	class:EnvironmentNAVXYTHETALATTICE
interm3DcellsV	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_cell_t> interm3DcellsV;$/;"	m	struct:__anon15
intermptV	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_pt_t> intermptV;$/;"	m	struct:__anon15
intermptV	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_pt_t> intermptV;$/;"	m	struct:__anon17
intersectingcellsV	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_2Dcell_t> intersectingcellsV;$/;"	m	struct:__anon15
iteration	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int iteration;$/;"	m	class:EnvironmentNAVXYTHETALATTICE
iteration	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int iteration;$/;"	m	struct:__anon16
mapdata	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    const unsigned char* mapdata;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
motprimID	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int motprimID;$/;"	m	struct:__anon17
mprimV	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<SBPL_xytheta_mprimitive> mprimV;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
nominalvel_mpersecs	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double nominalvel_mpersecs;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
numThetas	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned int numThetas;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
obsthresh	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char obsthresh;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
startstateid	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int startstateid;$/;"	m	struct:__anon18
starttheta	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char starttheta;$/;"	m	struct:__anon15
starttheta	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double starttheta;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
starttheta_c	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char starttheta_c;$/;"	m	struct:__anon17
startx	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double startx;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
starty	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double starty;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
stateID	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int stateID;$/;"	m	struct:__anon16
timetoturn45degsinplace_secs	include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double timetoturn45degsinplace_secs;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
AddLevelFootprintPolygonV	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    std::vector<sbpl_2Dpt_t>* AddLevelFootprintPolygonV;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
AddLevelGrid2D	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    unsigned char*** AddLevelGrid2D;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
AddLevel_cost_inscribed_thresh	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    unsigned char* AddLevel_cost_inscribed_thresh;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
AddLevel_cost_possibly_circumscribed_thresh	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    unsigned char* AddLevel_cost_possibly_circumscribed_thresh;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
AdditionalInfoinActionsV	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    EnvNAVXYTHETAMLEVLATAddInfoAction_t** AdditionalInfoinActionsV;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
EnvNAVXYTHETAMLEVLATAddInfoAction_t	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^} EnvNAVXYTHETAMLEVLATAddInfoAction_t;$/;"	t	typeref:struct:__anon19
EnvironmentNAVXYTHETAMLEVLAT	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^class EnvironmentNAVXYTHETAMLEVLAT : public EnvironmentNAVXYTHETALAT$/;"	c
GetPredsofChangedEdges	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    virtual void GetPredsofChangedEdges(std::vector<nav2dcell_t> const * changedcellsV,$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
GetSuccsofChangedEdges	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    virtual void GetSuccsofChangedEdges(std::vector<nav2dcell_t> const * changedcellsV,$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
__ENVIRONMENT_NAVXYTHETAMLEVLAT_H_	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	31;"	d
dX	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    char dX; \/\/ should be equal to the corresponding EnvNAVXYTHETALATAction_t structure$/;"	m	struct:__anon19
dY	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    char dY; \/\/ should be equal to the corresponding EnvNAVXYTHETALATAction_t structure$/;"	m	struct:__anon19
endtheta	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    char endtheta; \/\/ should be equal to the corresponding EnvNAVXYTHETALATAction_t structure$/;"	m	struct:__anon19
intersectingcellsV	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    std::vector<sbpl_2Dcell_t>* intersectingcellsV; \/\/ one footprint per additional level$/;"	m	struct:__anon19
numofadditionalzlevs	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    int numofadditionalzlevs;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
starttheta	include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    char starttheta; \/\/ should be equal to the corresponding EnvNAVXYTHETALATAction_t structure$/;"	m	struct:__anon19
AdjListIterator	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^typedef Adjacencies::iterator AdjListIterator;$/;"	t
Adjacencies	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^typedef std::list<Adjacency> Adjacencies;$/;"	t
Adjacency	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^struct Adjacency$/;"	s
AdjacencyListSBPLEnv	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^AdjacencyListSBPLEnv<Coords>::AdjacencyListSBPLEnv() :$/;"	f	class:AdjacencyListSBPLEnv
AdjacencyListSBPLEnv	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^class AdjacencyListSBPLEnv : public DiscreteSpaceInformation$/;"	c
GetFromToHeuristic	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^int AdjacencyListSBPLEnv<Coords>::GetFromToHeuristic(int FromStateID, int ToStateID)$/;"	f	class:AdjacencyListSBPLEnv
GetGoalHeuristic	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^int AdjacencyListSBPLEnv<Coords>::GetGoalHeuristic(int stateID)$/;"	f	class:AdjacencyListSBPLEnv
GetPreds	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::GetPreds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV)$/;"	f	class:AdjacencyListSBPLEnv
GetStartHeuristic	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^int AdjacencyListSBPLEnv<Coords>::GetStartHeuristic(int stateID)$/;"	f	class:AdjacencyListSBPLEnv
GetSuccs	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::GetSuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV)$/;"	f	class:AdjacencyListSBPLEnv
InitializeEnv	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^bool AdjacencyListSBPLEnv<Coords>::InitializeEnv(const char* sEnvFile)$/;"	f	class:AdjacencyListSBPLEnv
InitializeMDPCfg	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^bool AdjacencyListSBPLEnv<Coords>::InitializeMDPCfg(MDPConfig *MDPCfg)$/;"	f	class:AdjacencyListSBPLEnv
PrintEnv_Config	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::PrintEnv_Config(FILE* fOut)$/;"	f	class:AdjacencyListSBPLEnv
PrintState	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::PrintState(int stateID, bool bVerbose, FILE* fOut)$/;"	f	class:AdjacencyListSBPLEnv
SetAllActionsandAllOutcomes	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::SetAllActionsandAllOutcomes(CMDPSTATE* state)$/;"	f	class:AdjacencyListSBPLEnv
SetAllPreds	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::SetAllPreds(CMDPSTATE* state)$/;"	f	class:AdjacencyListSBPLEnv
SizeofCreatedEnv	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^int AdjacencyListSBPLEnv<Coords>::SizeofCreatedEnv()$/;"	f	class:AdjacencyListSBPLEnv
__PRECOMPUTED_ADJACENCY_LIST_H_	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	2;"	d
addPoint	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::addPoint(const Coords& c)$/;"	f	class:AdjacencyListSBPLEnv
adjacency_vector_	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    std::vector<Adjacencies> adjacency_vector_;$/;"	m	class:AdjacencyListSBPLEnv
cost	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    int cost;$/;"	m	struct:Adjacency
findOptimalPath	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^std::vector<Coords> AdjacencyListSBPLEnv<Coords>::findOptimalPath(int* solution_cost)$/;"	f	class:AdjacencyListSBPLEnv
goalStateId_	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    int goalStateId_;$/;"	m	class:AdjacencyListSBPLEnv
hasPoint	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^bool AdjacencyListSBPLEnv<Coords>::hasPoint(const Coords& c)$/;"	f	class:AdjacencyListSBPLEnv
neighbor	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    int neighbor;$/;"	m	struct:Adjacency
pointIds_	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    std::map<Coords, int> pointIds_;$/;"	m	class:AdjacencyListSBPLEnv
points_	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    std::vector<Coords> points_;$/;"	m	class:AdjacencyListSBPLEnv
removeLastPoints	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::removeLastPoints(unsigned int n)$/;"	f	class:AdjacencyListSBPLEnv
resetStateId2IndexMapping	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::resetStateId2IndexMapping(void)$/;"	f	class:AdjacencyListSBPLEnv
setCost	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::setCost(const Coords& c1, const Coords& c2)$/;"	f	class:AdjacencyListSBPLEnv
setCost	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::setCost(const Coords& c1, const Coords& c2, int cost)$/;"	f	class:AdjacencyListSBPLEnv
setGoalState	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::setGoalState(const Coords& c)$/;"	f	class:AdjacencyListSBPLEnv
setStartState	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::setStartState(const Coords& c)$/;"	f	class:AdjacencyListSBPLEnv
startStateId_	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    int startStateId_;$/;"	m	class:AdjacencyListSBPLEnv
writeToStream	include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::writeToStream(std::ostream& str)$/;"	f	class:AdjacencyListSBPLEnv
BaseX_c	include/sbpl/discrete_space_information/environment_robarm.h	/^    int BaseX_c;$/;"	m	struct:ENV_ROBARM_CONFIG
CELLV	include/sbpl/discrete_space_information/environment_robarm.h	/^} CELLV;$/;"	t	typeref:struct:__anon22
Coord2StateIDHashTable	include/sbpl/discrete_space_information/environment_robarm.h	/^    std::vector<EnvROBARMHashEntry_t*>* Coord2StateIDHashTable;$/;"	m	struct:__anon23
ENDEFF_CHECK_ONLY	include/sbpl/discrete_space_information/environment_robarm.h	44;"	d
ENVROBARMHASHENTRY	include/sbpl/discrete_space_information/environment_robarm.h	/^typedef struct ENVROBARMHASHENTRY$/;"	s
ENV_ROBARM_CONFIG	include/sbpl/discrete_space_information/environment_robarm.h	/^typedef struct ENV_ROBARM_CONFIG$/;"	s
EndEffGoalX_c	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int EndEffGoalX_c;$/;"	m	struct:ENV_ROBARM_CONFIG
EndEffGoalY_c	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int EndEffGoalY_c;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvHeight_c	include/sbpl/discrete_space_information/environment_robarm.h	/^    int EnvHeight_c;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvHeight_m	include/sbpl/discrete_space_information/environment_robarm.h	/^    double EnvHeight_m;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvROBARM	include/sbpl/discrete_space_information/environment_robarm.h	/^    EnvironmentROBARM_t EnvROBARM;$/;"	m	class:EnvironmentROBARM
EnvROBARMCfg	include/sbpl/discrete_space_information/environment_robarm.h	/^    EnvROBARMConfig_t EnvROBARMCfg;$/;"	m	class:EnvironmentROBARM
EnvROBARMConfig_t	include/sbpl/discrete_space_information/environment_robarm.h	/^} EnvROBARMConfig_t;$/;"	t	typeref:struct:ENV_ROBARM_CONFIG
EnvROBARMHashEntry_t	include/sbpl/discrete_space_information/environment_robarm.h	/^} EnvROBARMHashEntry_t;$/;"	t	typeref:struct:ENVROBARMHASHENTRY
EnvWidth_c	include/sbpl/discrete_space_information/environment_robarm.h	/^    int EnvWidth_c;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvWidth_m	include/sbpl/discrete_space_information/environment_robarm.h	/^    double EnvWidth_m;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvironmentROBARM	include/sbpl/discrete_space_information/environment_robarm.h	/^class EnvironmentROBARM : public DiscreteSpaceInformation$/;"	c
EnvironmentROBARM_t	include/sbpl/discrete_space_information/environment_robarm.h	/^} EnvironmentROBARM_t;$/;"	t	typeref:struct:__anon23
Grid2D	include/sbpl/discrete_space_information/environment_robarm.h	/^    char** Grid2D;$/;"	m	struct:ENV_ROBARM_CONFIG
GridCellWidth	include/sbpl/discrete_space_information/environment_robarm.h	/^    double GridCellWidth;$/;"	m	struct:ENV_ROBARM_CONFIG
HashTableSize	include/sbpl/discrete_space_information/environment_robarm.h	/^    int HashTableSize;$/;"	m	struct:__anon23
Heur	include/sbpl/discrete_space_information/environment_robarm.h	/^    int** Heur; \/\/h[fromx][fromy][tox][toy] = Heur[to][from], where to= tox+toy*width_c, from = fromx+fromy*width_c$/;"	m	struct:__anon23
INVALID_NUMBER	include/sbpl/discrete_space_information/environment_robarm.h	46;"	d
LinkGoalAngles_d	include/sbpl/discrete_space_information/environment_robarm.h	/^    double LinkGoalAngles_d[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
LinkLength_m	include/sbpl/discrete_space_information/environment_robarm.h	/^    double LinkLength_m[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
LinkStartAngles_d	include/sbpl/discrete_space_information/environment_robarm.h	/^    double LinkStartAngles_d[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
NUMOFLINKS	include/sbpl/discrete_space_information/environment_robarm.h	36;"	d
ROBARM_LONGACTIONDIST_CELLS	include/sbpl/discrete_space_information/environment_robarm.h	39;"	d
ROBARM_NUMOFRANDSUCCSATDIST	include/sbpl/discrete_space_information/environment_robarm.h	41;"	d
STATE2D_t	include/sbpl/discrete_space_information/environment_robarm.h	/^typedef struct STATE2D_t$/;"	s
State2D	include/sbpl/discrete_space_information/environment_robarm.h	/^} State2D;$/;"	t	typeref:struct:STATE2D_t
StateID2CoordTable	include/sbpl/discrete_space_information/environment_robarm.h	/^    std::vector<EnvROBARMHashEntry_t*> StateID2CoordTable;$/;"	m	struct:__anon23
UNIFORM_COST	include/sbpl/discrete_space_information/environment_robarm.h	45;"	d
__ENVIRONMENT_ROBARM_H_	include/sbpl/discrete_space_information/environment_robarm.h	31;"	d
angledelta	include/sbpl/discrete_space_information/environment_robarm.h	/^    double angledelta[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
anglevals	include/sbpl/discrete_space_information/environment_robarm.h	/^    int anglevals[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
bIsObstacle	include/sbpl/discrete_space_information/environment_robarm.h	/^    bool bIsObstacle;$/;"	m	struct:__anon22
coord	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int coord[NUMOFLINKS];$/;"	m	struct:ENVROBARMHASHENTRY
endeffx	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int endeffx;$/;"	m	struct:ENVROBARMHASHENTRY
endeffy	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int endeffy;$/;"	m	struct:ENVROBARMHASHENTRY
g	include/sbpl/discrete_space_information/environment_robarm.h	/^    unsigned int g;$/;"	m	struct:STATE2D_t
goalHashEntry	include/sbpl/discrete_space_information/environment_robarm.h	/^    EnvROBARMHashEntry_t* goalHashEntry;$/;"	m	struct:__anon23
iterationclosed	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int iterationclosed;$/;"	m	struct:STATE2D_t
startHashEntry	include/sbpl/discrete_space_information/environment_robarm.h	/^    EnvROBARMHashEntry_t* startHashEntry;$/;"	m	struct:__anon23
stateID	include/sbpl/discrete_space_information/environment_robarm.h	/^    int stateID;$/;"	m	struct:ENVROBARMHASHENTRY
x	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int x;$/;"	m	struct:STATE2D_t
x	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int x;$/;"	m	struct:__anon22
y	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int y;$/;"	m	struct:STATE2D_t
y	include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int y;$/;"	m	struct:__anon22
~EnvironmentROBARM	include/sbpl/discrete_space_information/environment_robarm.h	/^    ~EnvironmentROBARM() { }$/;"	f	class:EnvironmentROBARM
CRTDBG_MAP_ALLOC	include/sbpl/headers.h	38;"	d
_CRTDBG_MAP_ALLOC	include/sbpl/headers.h	37;"	d
__HEADERS_H_	include/sbpl/headers.h	31;"	d
G	include/sbpl/planners/ANAplanner.h	/^    unsigned int G;$/;"	m	struct:anaSEARCHSTATESPACE
MDPCfg_	include/sbpl/planners/ANAplanner.h	/^    MDPConfig* MDPCfg_;$/;"	m	class:anaPlanner
MDPstate	include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:anaSEARCHSTATEDATA
MaxMemoryCounter	include/sbpl/planners/ANAplanner.h	/^    int MaxMemoryCounter;$/;"	m	class:anaPlanner
TimeStarted	include/sbpl/planners/ANAplanner.h	/^    clock_t TimeStarted;$/;"	m	class:anaPlanner
__anaPLANNER_H_	include/sbpl/planners/ANAplanner.h	10;"	d
anaPlanner	include/sbpl/planners/ANAplanner.h	/^class anaPlanner : public SBPLPlanner$/;"	c
anaSEARCHSTATEDATA	include/sbpl/planners/ANAplanner.h	/^    anaSEARCHSTATEDATA() { }$/;"	f	class:anaSEARCHSTATEDATA
anaSEARCHSTATEDATA	include/sbpl/planners/ANAplanner.h	/^typedef class anaSEARCHSTATEDATA : public AbstractSearchState$/;"	c
anaSEARCHSTATESPACE	include/sbpl/planners/ANAplanner.h	/^typedef struct anaSEARCHSTATESPACE$/;"	s
anaSearchStateSpace_t	include/sbpl/planners/ANAplanner.h	/^} anaSearchStateSpace_t;$/;"	t	typeref:struct:anaSEARCHSTATESPACE
anaState	include/sbpl/planners/ANAplanner.h	/^} anaState;$/;"	t	typeref:class:anaSEARCHSTATEDATA
ana_DECREASE_EPS	include/sbpl/planners/ANAplanner.h	22;"	d
ana_DEFAULT_INITIAL_EPS	include/sbpl/planners/ANAplanner.h	20;"	d
ana_FINAL_EPS	include/sbpl/planners/ANAplanner.h	24;"	d
ana_INCONS_LIST_ID	include/sbpl/planners/ANAplanner.h	26;"	d
bNewSearchIteration	include/sbpl/planners/ANAplanner.h	/^    bool bNewSearchIteration;$/;"	m	struct:anaSEARCHSTATESPACE
bReevaluatefvals	include/sbpl/planners/ANAplanner.h	/^    bool bReevaluatefvals;$/;"	m	struct:anaSEARCHSTATESPACE
bReinitializeSearchStateSpace	include/sbpl/planners/ANAplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:anaSEARCHSTATESPACE
bestnextstate	include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE *bestnextstate;$/;"	m	class:anaSEARCHSTATEDATA
bestpredstate	include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE *bestpredstate;$/;"	m	class:anaSEARCHSTATEDATA
bforwardsearch	include/sbpl/planners/ANAplanner.h	/^    bool bforwardsearch; \/\/if true, then search proceeds forward, otherwise backward$/;"	m	class:anaPlanner
bsearchuntilfirstsolution	include/sbpl/planners/ANAplanner.h	/^    bool bsearchuntilfirstsolution; \/\/if true, then search until first solution only (see planner.h for search modes)$/;"	m	class:anaPlanner
callnumber	include/sbpl/planners/ANAplanner.h	/^    short unsigned int callnumber;$/;"	m	struct:anaSEARCHSTATESPACE
callnumberaccessed	include/sbpl/planners/ANAplanner.h	/^    short unsigned int callnumberaccessed;$/;"	m	class:anaSEARCHSTATEDATA
costtobestnextstate	include/sbpl/planners/ANAplanner.h	/^    unsigned int costtobestnextstate;$/;"	m	class:anaSEARCHSTATEDATA
eps	include/sbpl/planners/ANAplanner.h	/^    double eps;$/;"	m	struct:anaSEARCHSTATESPACE
eps_satisfied	include/sbpl/planners/ANAplanner.h	/^    double eps_satisfied;$/;"	m	struct:anaSEARCHSTATESPACE
fDeb	include/sbpl/planners/ANAplanner.h	/^    FILE *fDeb;$/;"	m	class:anaPlanner
finitial_eps	include/sbpl/planners/ANAplanner.h	/^    double finitial_eps;$/;"	m	class:anaPlanner
g	include/sbpl/planners/ANAplanner.h	/^    unsigned int g;$/;"	m	class:anaSEARCHSTATEDATA
get_n_expands	include/sbpl/planners/ANAplanner.h	/^    virtual int get_n_expands() const { return searchexpands; }$/;"	f	class:anaPlanner
get_solution_eps	include/sbpl/planners/ANAplanner.h	/^    virtual double get_solution_eps() const { return pSearchStateSpace_->eps_satisfied; }$/;"	f	class:anaPlanner
h	include/sbpl/planners/ANAplanner.h	/^    int h;$/;"	m	class:anaSEARCHSTATEDATA
heap	include/sbpl/planners/ANAplanner.h	/^    CHeap* heap;$/;"	m	struct:anaSEARCHSTATESPACE
iterationclosed	include/sbpl/planners/ANAplanner.h	/^    short unsigned int iterationclosed;$/;"	m	class:anaSEARCHSTATEDATA
numofexpands	include/sbpl/planners/ANAplanner.h	/^    short unsigned int numofexpands;$/;"	m	class:anaSEARCHSTATEDATA
pSearchStateSpace_	include/sbpl/planners/ANAplanner.h	/^    anaSearchStateSpace_t* pSearchStateSpace_;$/;"	m	class:anaPlanner
searchMDP	include/sbpl/planners/ANAplanner.h	/^    CMDP searchMDP;$/;"	m	struct:anaSEARCHSTATESPACE
searchexpands	include/sbpl/planners/ANAplanner.h	/^    unsigned int searchexpands;$/;"	m	class:anaPlanner
searchgoalstate	include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE* searchgoalstate;$/;"	m	struct:anaSEARCHSTATESPACE
searchiteration	include/sbpl/planners/ANAplanner.h	/^    short unsigned int searchiteration;$/;"	m	struct:anaSEARCHSTATESPACE
searchstartstate	include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE* searchstartstate;$/;"	m	struct:anaSEARCHSTATESPACE
set_initialsolution_eps	include/sbpl/planners/ANAplanner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { finitial_eps = initialsolution_eps; }$/;"	f	class:anaPlanner
v	include/sbpl/planners/ANAplanner.h	/^    unsigned int v;$/;"	m	class:anaSEARCHSTATEDATA
~anaSEARCHSTATEDATA	include/sbpl/planners/ANAplanner.h	/^    ~anaSEARCHSTATEDATA() { }$/;"	f	class:anaSEARCHSTATEDATA
ADPlanner	include/sbpl/planners/adplanner.h	/^class ADPlanner : public SBPLPlanner$/;"	c
ADSEARCHSTATEDATA	include/sbpl/planners/adplanner.h	/^    ADSEARCHSTATEDATA() { }$/;"	f	class:ADSEARCHSTATEDATA
ADSEARCHSTATEDATA	include/sbpl/planners/adplanner.h	/^typedef class ADSEARCHSTATEDATA : public AbstractSearchState$/;"	c
ADSEARCHSTATESPACE	include/sbpl/planners/adplanner.h	/^typedef struct ADSEARCHSTATESPACE$/;"	s
ADSearchStateSpace_t	include/sbpl/planners/adplanner.h	/^} ADSearchStateSpace_t;$/;"	t	typeref:struct:ADSEARCHSTATESPACE
ADState	include/sbpl/planners/adplanner.h	/^} ADState;$/;"	t	typeref:class:ADSEARCHSTATEDATA
AD_DECREASE_EPS	include/sbpl/planners/adplanner.h	44;"	d
AD_DEFAULT_INITIAL_EPS	include/sbpl/planners/adplanner.h	42;"	d
AD_FINAL_EPS	include/sbpl/planners/adplanner.h	46;"	d
AD_INCONS_LIST_ID	include/sbpl/planners/adplanner.h	48;"	d
MDPCfg_	include/sbpl/planners/adplanner.h	/^    MDPConfig* MDPCfg_;$/;"	m	class:ADPlanner
MDPstate	include/sbpl/planners/adplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:ADSEARCHSTATEDATA
MaxMemoryCounter	include/sbpl/planners/adplanner.h	/^    int MaxMemoryCounter;$/;"	m	class:ADPlanner
StateChangeQuery	include/sbpl/planners/adplanner.h	/^class StateChangeQuery$/;"	c
TimeStarted	include/sbpl/planners/adplanner.h	/^    clock_t TimeStarted;$/;"	m	class:ADPlanner
__ADPLANNER_H_	include/sbpl/planners/adplanner.h	31;"	d
bRebuildOpenList	include/sbpl/planners/adplanner.h	/^    bool bRebuildOpenList;$/;"	m	struct:ADSEARCHSTATESPACE
bReevaluatefvals	include/sbpl/planners/adplanner.h	/^    bool bReevaluatefvals;$/;"	m	struct:ADSEARCHSTATESPACE
bReinitializeSearchStateSpace	include/sbpl/planners/adplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:ADSEARCHSTATESPACE
bestnextstate	include/sbpl/planners/adplanner.h	/^    CMDPSTATE *bestnextstate;$/;"	m	class:ADSEARCHSTATEDATA
bestpredstate	include/sbpl/planners/adplanner.h	/^    CMDPSTATE *bestpredstate;$/;"	m	class:ADSEARCHSTATEDATA
bforwardsearch	include/sbpl/planners/adplanner.h	/^    bool bforwardsearch;$/;"	m	class:ADPlanner
bsearchuntilfirstsolution	include/sbpl/planners/adplanner.h	/^    bool bsearchuntilfirstsolution; \/\/if true, then search until first solution (see planner.h for search modes)$/;"	m	class:ADPlanner
callnumber	include/sbpl/planners/adplanner.h	/^    short unsigned int callnumber;$/;"	m	struct:ADSEARCHSTATESPACE
callnumberaccessed	include/sbpl/planners/adplanner.h	/^    short unsigned int callnumberaccessed;$/;"	m	class:ADSEARCHSTATEDATA
costtobestnextstate	include/sbpl/planners/adplanner.h	/^    unsigned int costtobestnextstate;$/;"	m	class:ADSEARCHSTATEDATA
dec_eps	include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
eps	include/sbpl/planners/adplanner.h	/^    double eps;$/;"	m	struct:ADSEARCHSTATESPACE
eps_satisfied	include/sbpl/planners/adplanner.h	/^    double eps_satisfied;$/;"	m	struct:ADSEARCHSTATESPACE
fDeb	include/sbpl/planners/adplanner.h	/^    FILE *fDeb;$/;"	m	class:ADPlanner
final_eps	include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
final_eps_planning_time	include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
final_epsilon	include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
finitial_eps	include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
finitial_eps_planning_time	include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
g	include/sbpl/planners/adplanner.h	/^    unsigned int g;$/;"	m	class:ADSEARCHSTATEDATA
get_final_eps_planning_time	include/sbpl/planners/adplanner.h	/^    virtual double get_final_eps_planning_time() { return final_eps_planning_time; }$/;"	f	class:ADPlanner
get_final_epsilon	include/sbpl/planners/adplanner.h	/^    virtual double get_final_epsilon() { return final_eps; }$/;"	f	class:ADPlanner
get_initial_eps	include/sbpl/planners/adplanner.h	/^    virtual double get_initial_eps() { return finitial_eps; }$/;"	f	class:ADPlanner
get_initial_eps_planning_time	include/sbpl/planners/adplanner.h	/^    virtual double get_initial_eps_planning_time() { return finitial_eps_planning_time; }$/;"	f	class:ADPlanner
get_n_expands	include/sbpl/planners/adplanner.h	/^    virtual int get_n_expands() const { return searchexpands; }$/;"	f	class:ADPlanner
get_n_expands_init_solution	include/sbpl/planners/adplanner.h	/^    virtual int get_n_expands_init_solution() { return num_of_expands_initial_solution; }$/;"	f	class:ADPlanner
get_solution_eps	include/sbpl/planners/adplanner.h	/^    virtual double get_solution_eps() const { return pSearchStateSpace_->eps_satisfied; }$/;"	f	class:ADPlanner
h	include/sbpl/planners/adplanner.h	/^    int h;$/;"	m	class:ADSEARCHSTATEDATA
heap	include/sbpl/planners/adplanner.h	/^    CHeap* heap;$/;"	m	struct:ADSEARCHSTATESPACE
inconslist	include/sbpl/planners/adplanner.h	/^    CList* inconslist;$/;"	m	struct:ADSEARCHSTATESPACE
iterationclosed	include/sbpl/planners/adplanner.h	/^    short unsigned int iterationclosed;$/;"	m	class:ADSEARCHSTATEDATA
num_of_expands_initial_solution	include/sbpl/planners/adplanner.h	/^    int num_of_expands_initial_solution;$/;"	m	class:ADPlanner
numofexpands	include/sbpl/planners/adplanner.h	/^    short unsigned int numofexpands;$/;"	m	class:ADSEARCHSTATEDATA
pSearchStateSpace_	include/sbpl/planners/adplanner.h	/^    ADSearchStateSpace_t* pSearchStateSpace_;$/;"	m	class:ADPlanner
repair_time	include/sbpl/planners/adplanner.h	/^    double repair_time;$/;"	m	class:ADPlanner
searchMDP	include/sbpl/planners/adplanner.h	/^    CMDP searchMDP;$/;"	m	struct:ADSEARCHSTATESPACE
searchexpands	include/sbpl/planners/adplanner.h	/^    unsigned int searchexpands;$/;"	m	class:ADPlanner
searchgoalstate	include/sbpl/planners/adplanner.h	/^    CMDPSTATE* searchgoalstate;$/;"	m	struct:ADSEARCHSTATESPACE
searchiteration	include/sbpl/planners/adplanner.h	/^    short unsigned int searchiteration;$/;"	m	struct:ADSEARCHSTATESPACE
searchstartstate	include/sbpl/planners/adplanner.h	/^    CMDPSTATE* searchstartstate;$/;"	m	struct:ADSEARCHSTATESPACE
set_initialsolution_eps	include/sbpl/planners/adplanner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { finitial_eps = initialsolution_eps; }$/;"	f	class:ADPlanner
stats	include/sbpl/planners/adplanner.h	/^    std::vector<PlannerStats> stats;$/;"	m	class:ADPlanner
use_repair_time	include/sbpl/planners/adplanner.h	/^    bool use_repair_time;$/;"	m	class:ADPlanner
v	include/sbpl/planners/adplanner.h	/^    unsigned int v;$/;"	m	class:ADSEARCHSTATEDATA
~ADSEARCHSTATEDATA	include/sbpl/planners/adplanner.h	/^    ~ADSEARCHSTATEDATA() { }$/;"	f	class:ADSEARCHSTATEDATA
~StateChangeQuery	include/sbpl/planners/adplanner.h	/^    virtual ~StateChangeQuery() { }$/;"	f	class:StateChangeQuery
ARAPlanner	include/sbpl/planners/araplanner.h	/^class ARAPlanner : public SBPLPlanner$/;"	c
ARASEARCHSTATEDATA	include/sbpl/planners/araplanner.h	/^    ARASEARCHSTATEDATA() { }$/;"	f	class:ARASEARCHSTATEDATA
ARASEARCHSTATEDATA	include/sbpl/planners/araplanner.h	/^typedef class ARASEARCHSTATEDATA : public AbstractSearchState$/;"	c
ARASEARCHSTATESPACE	include/sbpl/planners/araplanner.h	/^typedef struct ARASEARCHSTATESPACE$/;"	s
ARASearchStateSpace_t	include/sbpl/planners/araplanner.h	/^} ARASearchStateSpace_t;$/;"	t	typeref:struct:ARASEARCHSTATESPACE
ARAState	include/sbpl/planners/araplanner.h	/^} ARAState;$/;"	t	typeref:class:ARASEARCHSTATEDATA
ARA_DECREASE_EPS	include/sbpl/planners/araplanner.h	44;"	d
ARA_DEFAULT_INITIAL_EPS	include/sbpl/planners/araplanner.h	42;"	d
ARA_FINAL_EPS	include/sbpl/planners/araplanner.h	46;"	d
ARA_INCONS_LIST_ID	include/sbpl/planners/araplanner.h	48;"	d
MDPCfg_	include/sbpl/planners/araplanner.h	/^    MDPConfig* MDPCfg_;$/;"	m	class:ARAPlanner
MDPstate	include/sbpl/planners/araplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:ARASEARCHSTATEDATA
MaxMemoryCounter	include/sbpl/planners/araplanner.h	/^    int MaxMemoryCounter;$/;"	m	class:ARAPlanner
TimeStarted	include/sbpl/planners/araplanner.h	/^    clock_t TimeStarted;$/;"	m	class:ARAPlanner
__ARAPLANNER_H_	include/sbpl/planners/araplanner.h	31;"	d
bNewSearchIteration	include/sbpl/planners/araplanner.h	/^    bool bNewSearchIteration;$/;"	m	struct:ARASEARCHSTATESPACE
bReevaluatefvals	include/sbpl/planners/araplanner.h	/^    bool bReevaluatefvals;$/;"	m	struct:ARASEARCHSTATESPACE
bReinitializeSearchStateSpace	include/sbpl/planners/araplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:ARASEARCHSTATESPACE
bestnextstate	include/sbpl/planners/araplanner.h	/^    CMDPSTATE *bestnextstate;$/;"	m	class:ARASEARCHSTATEDATA
bestpredstate	include/sbpl/planners/araplanner.h	/^    CMDPSTATE *bestpredstate;$/;"	m	class:ARASEARCHSTATEDATA
bforwardsearch	include/sbpl/planners/araplanner.h	/^    bool bforwardsearch; \/\/if true, then search proceeds forward, otherwise backward$/;"	m	class:ARAPlanner
bsearchuntilfirstsolution	include/sbpl/planners/araplanner.h	/^    bool bsearchuntilfirstsolution; \/\/if true, then search until first solution only (see planner.h for search modes)$/;"	m	class:ARAPlanner
callnumber	include/sbpl/planners/araplanner.h	/^    short unsigned int callnumber;$/;"	m	struct:ARASEARCHSTATESPACE
callnumberaccessed	include/sbpl/planners/araplanner.h	/^    short unsigned int callnumberaccessed;$/;"	m	class:ARASEARCHSTATEDATA
costtobestnextstate	include/sbpl/planners/araplanner.h	/^    unsigned int costtobestnextstate;$/;"	m	class:ARASEARCHSTATEDATA
dec_eps	include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
eps	include/sbpl/planners/araplanner.h	/^    double eps;$/;"	m	struct:ARASEARCHSTATESPACE
eps_satisfied	include/sbpl/planners/araplanner.h	/^    double eps_satisfied;$/;"	m	struct:ARASEARCHSTATESPACE
fDeb	include/sbpl/planners/araplanner.h	/^    FILE *fDeb;$/;"	m	class:ARAPlanner
final_eps	include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
final_eps_planning_time	include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
final_epsilon	include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
finitial_eps	include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
finitial_eps_planning_time	include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
g	include/sbpl/planners/araplanner.h	/^    unsigned int g;$/;"	m	class:ARASEARCHSTATEDATA
get_final_eps_planning_time	include/sbpl/planners/araplanner.h	/^    virtual double get_final_eps_planning_time() { return final_eps_planning_time; }$/;"	f	class:ARAPlanner
get_final_epsilon	include/sbpl/planners/araplanner.h	/^    virtual double get_final_epsilon() { return final_eps; }$/;"	f	class:ARAPlanner
get_initial_eps	include/sbpl/planners/araplanner.h	/^    virtual double get_initial_eps() { return finitial_eps; }$/;"	f	class:ARAPlanner
get_initial_eps_planning_time	include/sbpl/planners/araplanner.h	/^    virtual double get_initial_eps_planning_time() { return finitial_eps_planning_time; }$/;"	f	class:ARAPlanner
get_n_expands	include/sbpl/planners/araplanner.h	/^    virtual int get_n_expands() const { return searchexpands; }$/;"	f	class:ARAPlanner
get_n_expands_init_solution	include/sbpl/planners/araplanner.h	/^    virtual int get_n_expands_init_solution() { return num_of_expands_initial_solution; }$/;"	f	class:ARAPlanner
get_solution_eps	include/sbpl/planners/araplanner.h	/^    virtual double get_solution_eps() const { return pSearchStateSpace_->eps_satisfied; }$/;"	f	class:ARAPlanner
h	include/sbpl/planners/araplanner.h	/^    int h;$/;"	m	class:ARASEARCHSTATEDATA
heap	include/sbpl/planners/araplanner.h	/^    CHeap* heap;$/;"	m	struct:ARASEARCHSTATESPACE
inconslist	include/sbpl/planners/araplanner.h	/^    CList* inconslist;$/;"	m	struct:ARASEARCHSTATESPACE
iterationclosed	include/sbpl/planners/araplanner.h	/^    short unsigned int iterationclosed;$/;"	m	class:ARASEARCHSTATEDATA
num_of_expands_initial_solution	include/sbpl/planners/araplanner.h	/^    int num_of_expands_initial_solution;$/;"	m	class:ARAPlanner
numofexpands	include/sbpl/planners/araplanner.h	/^    short unsigned int numofexpands;$/;"	m	class:ARASEARCHSTATEDATA
pSearchStateSpace_	include/sbpl/planners/araplanner.h	/^    ARASearchStateSpace_t* pSearchStateSpace_;$/;"	m	class:ARAPlanner
repair_time	include/sbpl/planners/araplanner.h	/^    double repair_time;$/;"	m	class:ARAPlanner
searchMDP	include/sbpl/planners/araplanner.h	/^    CMDP searchMDP;$/;"	m	struct:ARASEARCHSTATESPACE
searchexpands	include/sbpl/planners/araplanner.h	/^    unsigned int searchexpands;$/;"	m	class:ARAPlanner
searchgoalstate	include/sbpl/planners/araplanner.h	/^    CMDPSTATE* searchgoalstate;$/;"	m	struct:ARASEARCHSTATESPACE
searchiteration	include/sbpl/planners/araplanner.h	/^    short unsigned int searchiteration;$/;"	m	struct:ARASEARCHSTATESPACE
searchstartstate	include/sbpl/planners/araplanner.h	/^    CMDPSTATE* searchstartstate;$/;"	m	struct:ARASEARCHSTATESPACE
set_eps_step	include/sbpl/planners/araplanner.h	/^    virtual void set_eps_step(double eps) { dec_eps = eps; }$/;"	f	class:ARAPlanner
set_initialsolution_eps	include/sbpl/planners/araplanner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { finitial_eps = initialsolution_eps; }$/;"	f	class:ARAPlanner
stats	include/sbpl/planners/araplanner.h	/^    std::vector<PlannerStats> stats;$/;"	m	class:ARAPlanner
use_repair_time	include/sbpl/planners/araplanner.h	/^    bool use_repair_time;$/;"	m	class:ARAPlanner
v	include/sbpl/planners/araplanner.h	/^    unsigned int v;$/;"	m	class:ARASEARCHSTATEDATA
~ARASEARCHSTATEDATA	include/sbpl/planners/araplanner.h	/^    ~ARASEARCHSTATEDATA() { }$/;"	f	class:ARASEARCHSTATEDATA
LazyARAPlanner	include/sbpl/planners/lazyARA.h	/^class LazyARAPlanner : public SBPLPlanner{$/;"	c
LazyARAState	include/sbpl/planners/lazyARA.h	/^class LazyARAState: public AbstractSearchState{$/;"	c
LazyListElement	include/sbpl/planners/lazyARA.h	/^    LazyListElement(LazyARAState* p, int ec, bool itc){$/;"	f	class:LazyListElement
LazyListElement	include/sbpl/planners/lazyARA.h	/^class LazyListElement{$/;"	c
TimeStarted	include/sbpl/planners/lazyARA.h	/^	clock_t TimeStarted;$/;"	m	class:LazyARAPlanner
_LAZY_ARA_PLANNER_H_	include/sbpl/planners/lazyARA.h	30;"	d
best_parent	include/sbpl/planners/lazyARA.h	/^    LazyARAState* best_parent;$/;"	m	class:LazyARAState
bforwardsearch	include/sbpl/planners/lazyARA.h	/^	bool bforwardsearch; \/\/if true, then search proceeds forward, otherwise backward$/;"	m	class:LazyARAPlanner
costs_changed	include/sbpl/planners/lazyARA.h	/^  virtual void costs_changed(){return;};$/;"	f	class:LazyARAPlanner
costs_changed	include/sbpl/planners/lazyARA.h	/^  virtual void costs_changed(StateChangeQuery const & stateChange){return;};$/;"	f	class:LazyARAPlanner
edgeCost	include/sbpl/planners/lazyARA.h	/^    int edgeCost;$/;"	m	class:LazyListElement
eps	include/sbpl/planners/lazyARA.h	/^	double eps;$/;"	m	class:LazyARAPlanner
eps_satisfied	include/sbpl/planners/lazyARA.h	/^  double eps_satisfied;$/;"	m	class:LazyARAPlanner
expanded_best_parent	include/sbpl/planners/lazyARA.h	/^    LazyARAState* expanded_best_parent;$/;"	m	class:LazyARAState
force_planning_from_scratch	include/sbpl/planners/lazyARA.h	/^  virtual int force_planning_from_scratch(){return 1;};$/;"	f	class:LazyARAPlanner
force_planning_from_scratch_and_free_memory	include/sbpl/planners/lazyARA.h	/^  virtual int force_planning_from_scratch_and_free_memory(){return 1;};$/;"	f	class:LazyARAPlanner
g	include/sbpl/planners/lazyARA.h	/^    unsigned int g;$/;"	m	class:LazyARAState
get_final_eps_planning_time	include/sbpl/planners/lazyARA.h	/^  double get_final_eps_planning_time(){ $/;"	f	class:LazyARAPlanner
get_final_epsilon	include/sbpl/planners/lazyARA.h	/^  double get_final_epsilon() { $/;"	f	class:LazyARAPlanner
get_initial_eps	include/sbpl/planners/lazyARA.h	/^  double get_initial_eps(){ $/;"	f	class:LazyARAPlanner
get_initial_eps_planning_time	include/sbpl/planners/lazyARA.h	/^  double get_initial_eps_planning_time(){ $/;"	f	class:LazyARAPlanner
get_n_expands	include/sbpl/planners/lazyARA.h	/^  int get_n_expands() const { $/;"	f	class:LazyARAPlanner
get_n_expands_init_solution	include/sbpl/planners/lazyARA.h	/^  int get_n_expands_init_solution(){ $/;"	f	class:LazyARAPlanner
get_solution_eps	include/sbpl/planners/lazyARA.h	/^  double get_solution_eps() const { $/;"	f	class:LazyARAPlanner
goal_state	include/sbpl/planners/lazyARA.h	/^	LazyARAState* goal_state;$/;"	m	class:LazyARAPlanner
goal_state_id	include/sbpl/planners/lazyARA.h	/^  int goal_state_id;$/;"	m	class:LazyARAPlanner
h	include/sbpl/planners/lazyARA.h	/^    int h;$/;"	m	class:LazyARAState
heap	include/sbpl/planners/lazyARA.h	/^	CHeap heap;$/;"	m	class:LazyARAPlanner
id	include/sbpl/planners/lazyARA.h	/^    int id;$/;"	m	class:LazyARAState
in_incons	include/sbpl/planners/lazyARA.h	/^    bool in_incons;$/;"	m	class:LazyARAState
incons	include/sbpl/planners/lazyARA.h	/^  std::vector<LazyARAState*> incons;$/;"	m	class:LazyARAPlanner
isTrueCost	include/sbpl/planners/lazyARA.h	/^    bool isTrueCost;$/;"	m	class:LazyARAState
isTrueCost	include/sbpl/planners/lazyARA.h	/^    bool isTrueCost;$/;"	m	class:LazyListElement
iteration_closed	include/sbpl/planners/lazyARA.h	/^    short unsigned int iteration_closed;$/;"	m	class:LazyARAState
lazyList	include/sbpl/planners/lazyARA.h	/^    std::priority_queue<LazyListElement> lazyList;$/;"	m	class:LazyARAState
operator <	include/sbpl/planners/lazyARA.h	/^    bool operator< (const LazyListElement& other) const{$/;"	f	class:LazyListElement
params	include/sbpl/planners/lazyARA.h	/^  ReplanParams params;$/;"	m	class:LazyARAPlanner
parent	include/sbpl/planners/lazyARA.h	/^    LazyARAState* parent;$/;"	m	class:LazyListElement
reconstructTime	include/sbpl/planners/lazyARA.h	/^  double reconstructTime;$/;"	m	class:LazyARAPlanner
replan_number	include/sbpl/planners/lazyARA.h	/^	short unsigned int replan_number;$/;"	m	class:LazyARAPlanner
replan_number	include/sbpl/planners/lazyARA.h	/^    short unsigned int replan_number;$/;"	m	class:LazyARAState
search_expands	include/sbpl/planners/lazyARA.h	/^  int search_expands;$/;"	m	class:LazyARAPlanner
search_iteration	include/sbpl/planners/lazyARA.h	/^	short unsigned int search_iteration;$/;"	m	class:LazyARAPlanner
set_initialsolution_eps	include/sbpl/planners/lazyARA.h	/^	virtual void set_initialsolution_eps(double initialsolution_eps){$/;"	f	class:LazyARAPlanner
set_search_mode	include/sbpl/planners/lazyARA.h	/^	virtual int set_search_mode(bool bSearchUntilFirstSolution){$/;"	f	class:LazyARAPlanner
start_state	include/sbpl/planners/lazyARA.h	/^	LazyARAState* start_state;$/;"	m	class:LazyARAPlanner
start_state_id	include/sbpl/planners/lazyARA.h	/^  int start_state_id;$/;"	m	class:LazyARAPlanner
states	include/sbpl/planners/lazyARA.h	/^  std::vector<LazyARAState*> states;$/;"	m	class:LazyARAPlanner
stats	include/sbpl/planners/lazyARA.h	/^  std::vector<PlannerStats> stats;$/;"	m	class:LazyARAPlanner
totalExpands	include/sbpl/planners/lazyARA.h	/^  unsigned int totalExpands;$/;"	m	class:LazyARAPlanner
totalPlanTime	include/sbpl/planners/lazyARA.h	/^  double totalPlanTime;$/;"	m	class:LazyARAPlanner
totalTime	include/sbpl/planners/lazyARA.h	/^  double totalTime;$/;"	m	class:LazyARAPlanner
use_repair_time	include/sbpl/planners/lazyARA.h	/^  bool use_repair_time;$/;"	m	class:LazyARAPlanner
v	include/sbpl/planners/lazyARA.h	/^    unsigned int v;$/;"	m	class:LazyARAState
~LazyARAPlanner	include/sbpl/planners/lazyARA.h	/^  ~LazyARAPlanner(){};$/;"	f	class:LazyARAPlanner
ABSTRACT_GENERALSTATE	include/sbpl/planners/planner.h	/^    ABSTRACT_STATE = 0, ABSTRACT_STATEACTIONPAIR, ABSTRACT_GENERALSTATE$/;"	e	enum:__anon13
ABSTRACT_STATE	include/sbpl/planners/planner.h	/^    ABSTRACT_STATE = 0, ABSTRACT_STATEACTIONPAIR, ABSTRACT_GENERALSTATE$/;"	e	enum:__anon13
ABSTRACT_STATEACTIONPAIR	include/sbpl/planners/planner.h	/^    ABSTRACT_STATE = 0, ABSTRACT_STATEACTIONPAIR, ABSTRACT_GENERALSTATE$/;"	e	enum:__anon13
ADMDP_STATEID2IND	include/sbpl/planners/planner.h	49;"	d
ARAMDP_STATEID2IND	include/sbpl/planners/planner.h	48;"	d
AbstractSearchState	include/sbpl/planners/planner.h	/^    AbstractSearchState()$/;"	f	class:AbstractSearchState
AbstractSearchState	include/sbpl/planners/planner.h	/^class AbstractSearchState$/;"	c
AbstractSearchStateType_t	include/sbpl/planners/planner.h	/^} AbstractSearchStateType_t;$/;"	t	typeref:enum:__anon13
GETSTATEIND	include/sbpl/planners/planner.h	37;"	d
NUMOFINDICES_STATEID2IND	include/sbpl/planners/planner.h	/^    NUMOFINDICES_STATEID2IND$/;"	e	enum:STATEID2IND
PlannerStats	include/sbpl/planners/planner.h	/^class PlannerStats$/;"	c
RSTARMDP_LSEARCH_STATEID2IND	include/sbpl/planners/planner.h	51;"	d
RSTARMDP_STATEID2IND	include/sbpl/planners/planner.h	50;"	d
ReplanParams	include/sbpl/planners/planner.h	/^    ReplanParams(double time)$/;"	f	class:ReplanParams
ReplanParams	include/sbpl/planners/planner.h	/^class ReplanParams$/;"	c
SBPLPlanner	include/sbpl/planners/planner.h	/^class SBPLPlanner$/;"	c
STATEID2IND	include/sbpl/planners/planner.h	/^enum STATEID2IND$/;"	g
STATEID2IND_SLOT0	include/sbpl/planners/planner.h	/^    STATEID2IND_SLOT0 = 0, STATEID2IND_SLOT1,\/\/add more slots if necessary$/;"	e	enum:STATEID2IND
STATEID2IND_SLOT1	include/sbpl/planners/planner.h	/^    STATEID2IND_SLOT0 = 0, STATEID2IND_SLOT1,\/\/add more slots if necessary$/;"	e	enum:STATEID2IND
StateType	include/sbpl/planners/planner.h	/^    AbstractSearchStateType_t StateType;$/;"	m	class:AbstractSearchState
VIMDP_STATEID2IND	include/sbpl/planners/planner.h	47;"	d
__PLANNER_H_	include/sbpl/planners/planner.h	31;"	d
anaMDP_STATEID2IND	include/sbpl/planners/planner.h	52;"	d
cost	include/sbpl/planners/planner.h	/^    int cost;$/;"	m	class:PlannerStats
dec_eps	include/sbpl/planners/planner.h	/^    double dec_eps;$/;"	m	class:ReplanParams
environment_	include/sbpl/planners/planner.h	/^    DiscreteSpaceInformation *environment_;$/;"	m	class:SBPLPlanner
eps	include/sbpl/planners/planner.h	/^    double eps;$/;"	m	class:PlannerStats
expands	include/sbpl/planners/planner.h	/^    int expands;$/;"	m	class:PlannerStats
final_eps	include/sbpl/planners/planner.h	/^    double final_eps;$/;"	m	class:ReplanParams
force_planning_from_scratch_and_free_memory	include/sbpl/planners/planner.h	/^    virtual int force_planning_from_scratch_and_free_memory()$/;"	f	class:SBPLPlanner
get_final_eps_planning_time	include/sbpl/planners/planner.h	/^    virtual double get_final_eps_planning_time()$/;"	f	class:SBPLPlanner
get_final_epsilon	include/sbpl/planners/planner.h	/^    virtual double get_final_epsilon()$/;"	f	class:SBPLPlanner
get_initial_eps	include/sbpl/planners/planner.h	/^    virtual double get_initial_eps()$/;"	f	class:SBPLPlanner
get_initial_eps_planning_time	include/sbpl/planners/planner.h	/^    virtual double get_initial_eps_planning_time()$/;"	f	class:SBPLPlanner
get_n_expands	include/sbpl/planners/planner.h	/^    virtual int get_n_expands() const$/;"	f	class:SBPLPlanner
get_n_expands_init_solution	include/sbpl/planners/planner.h	/^    virtual int get_n_expands_init_solution()$/;"	f	class:SBPLPlanner
get_search_stats	include/sbpl/planners/planner.h	/^    virtual void get_search_stats(std::vector<PlannerStats>* s)$/;"	f	class:SBPLPlanner
get_solution_eps	include/sbpl/planners/planner.h	/^    virtual double get_solution_eps() const$/;"	f	class:SBPLPlanner
heapindex	include/sbpl/planners/planner.h	/^    int heapindex;$/;"	m	class:AbstractSearchState
initial_eps	include/sbpl/planners/planner.h	/^    double initial_eps;$/;"	m	class:ReplanParams
listelem	include/sbpl/planners/planner.h	/^    struct listelement* listelem[2];$/;"	m	class:AbstractSearchState	typeref:struct:AbstractSearchState::listelement
max_time	include/sbpl/planners/planner.h	/^    double max_time;$/;"	m	class:ReplanParams
repair_time	include/sbpl/planners/planner.h	/^    double repair_time;$/;"	m	class:ReplanParams
replan	include/sbpl/planners/planner.h	/^    virtual int replan(std::vector<int>* solution_stateIDs_V, ReplanParams params)$/;"	f	class:SBPLPlanner
replan	include/sbpl/planners/planner.h	/^    virtual int replan(std::vector<int>* solution_stateIDs_V, ReplanParams params, int* solcost)$/;"	f	class:SBPLPlanner
return_first_solution	include/sbpl/planners/planner.h	/^    bool return_first_solution;$/;"	m	class:ReplanParams
set_initialsolution_eps	include/sbpl/planners/planner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { }$/;"	f	class:SBPLPlanner
time	include/sbpl/planners/planner.h	/^    double time;$/;"	m	class:PlannerStats
~AbstractSearchState	include/sbpl/planners/planner.h	/^    ~AbstractSearchState() { }$/;"	f	class:AbstractSearchState
~SBPLPlanner	include/sbpl/planners/planner.h	/^    virtual ~SBPLPlanner() { }$/;"	f	class:SBPLPlanner
GoalState	include/sbpl/planners/ppcpplanner.h	/^    CMDPSTATE* GoalState;$/;"	m	struct:PPCPSTATESPACE
MDP	include/sbpl/planners/ppcpplanner.h	/^    CMDP MDP;$/;"	m	struct:PPCPSTATESPACE
MDPstate	include/sbpl/planners/ppcpplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:PPCPPLANNERSTATEDATA
PPCPPLANNERSTATEDATA	include/sbpl/planners/ppcpplanner.h	/^    PPCPPLANNERSTATEDATA() { }$/;"	f	class:PPCPPLANNERSTATEDATA
PPCPPLANNERSTATEDATA	include/sbpl/planners/ppcpplanner.h	/^typedef class PPCPPLANNERSTATEDATA : public AbstractSearchState$/;"	c
PPCPPlanner	include/sbpl/planners/ppcpplanner.h	/^class PPCPPlanner : public SBPLPlanner$/;"	c
PPCPSTATESPACE	include/sbpl/planners/ppcpplanner.h	/^typedef struct PPCPSTATESPACE$/;"	s
PPCPState	include/sbpl/planners/ppcpplanner.h	/^} PPCPState;$/;"	t	typeref:class:PPCPPLANNERSTATEDATA
PPCPStateSpace_t	include/sbpl/planners/ppcpplanner.h	/^} PPCPStateSpace_t;$/;"	t	typeref:struct:PPCPSTATESPACE
Pc	include/sbpl/planners/ppcpplanner.h	/^    float Pc;$/;"	m	class:PPCPPLANNERSTATEDATA
StartState	include/sbpl/planners/ppcpplanner.h	/^    CMDPSTATE* StartState;$/;"	m	struct:PPCPSTATESPACE
__PPCPPLANNER_H_	include/sbpl/planners/ppcpplanner.h	31;"	d
bReinitializeSearchStateSpace	include/sbpl/planners/ppcpplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:PPCPSTATESPACE
bestnextaction	include/sbpl/planners/ppcpplanner.h	/^    CMDPACTION *bestnextaction;$/;"	m	class:PPCPPLANNERSTATEDATA
currentpolicyconfidence	include/sbpl/planners/ppcpplanner.h	/^    double currentpolicyconfidence;$/;"	m	struct:PPCPSTATESPACE
fDeb	include/sbpl/planners/ppcpplanner.h	/^    FILE* fDeb;$/;"	m	class:PPCPPlanner
iteration	include/sbpl/planners/ppcpplanner.h	/^    int iteration;$/;"	m	struct:PPCPSTATESPACE
iteration	include/sbpl/planners/ppcpplanner.h	/^    unsigned int iteration;$/;"	m	class:PPCPPLANNERSTATEDATA
pStateSpace	include/sbpl/planners/ppcpplanner.h	/^    PPCPStateSpace_t* pStateSpace;$/;"	m	class:PPCPPlanner
replan	include/sbpl/planners/ppcpplanner.h	/^    int replan(double allocated_time_sec, std::vector<int>* solution_stateIDs_V)$/;"	f	class:PPCPPlanner
replan	include/sbpl/planners/ppcpplanner.h	/^    int replan(double allocated_time_sec, std::vector<int>* solution_stateIDs_V, int* solcost)$/;"	f	class:PPCPPlanner
searchiteration	include/sbpl/planners/ppcpplanner.h	/^    int searchiteration;$/;"	m	struct:PPCPSTATESPACE
set_search_mode	include/sbpl/planners/ppcpplanner.h	/^    int set_search_mode(bool bSearchUntilFirstSolution)$/;"	f	class:PPCPPlanner
v	include/sbpl/planners/ppcpplanner.h	/^    int v;$/;"	m	class:PPCPPLANNERSTATEDATA
~PPCPPLANNERSTATEDATA	include/sbpl/planners/ppcpplanner.h	/^    ~PPCPPLANNERSTATEDATA() { }$/;"	f	class:PPCPPLANNERSTATEDATA
GoalState	include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* GoalState;$/;"	m	class:RSTARLSEARCHSTATESPACE
INCONS	include/sbpl/planners/rstarplanner.h	/^    CList* INCONS;$/;"	m	class:RSTARLSEARCHSTATESPACE
MDP	include/sbpl/planners/rstarplanner.h	/^    CMDP MDP;$/;"	m	class:RSTARLSEARCHSTATESPACE
MDPstate	include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:RSTARLSEARCHSTATEDATA
MDPstate	include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:RSTARSEARCHSTATEDATA
MaxMemoryCounter	include/sbpl/planners/rstarplanner.h	/^    int MaxMemoryCounter;$/;"	m	class:RSTARPlanner
OPEN	include/sbpl/planners/rstarplanner.h	/^    CHeap* OPEN;$/;"	m	class:RSTARLSEARCHSTATESPACE
OPEN	include/sbpl/planners/rstarplanner.h	/^    CHeap* OPEN;$/;"	m	struct:RSTARSEARCHSTATESPACE
RSTARACTIONDATA	include/sbpl/planners/rstarplanner.h	/^} RSTARACTIONDATA;$/;"	t	typeref:struct:RSTARACTIONDATA_T
RSTARACTIONDATA_T	include/sbpl/planners/rstarplanner.h	/^typedef struct RSTARACTIONDATA_T$/;"	s
RSTARLSEARCHSTATEDATA	include/sbpl/planners/rstarplanner.h	/^    RSTARLSEARCHSTATEDATA() { }$/;"	f	class:RSTARLSEARCHSTATEDATA
RSTARLSEARCHSTATEDATA	include/sbpl/planners/rstarplanner.h	/^typedef class RSTARLSEARCHSTATEDATA : public AbstractSearchState$/;"	c
RSTARLSEARCHSTATESPACE	include/sbpl/planners/rstarplanner.h	/^    RSTARLSEARCHSTATESPACE()$/;"	f	class:RSTARLSEARCHSTATESPACE
RSTARLSEARCHSTATESPACE	include/sbpl/planners/rstarplanner.h	/^class RSTARLSEARCHSTATESPACE$/;"	c
RSTARLSearchState	include/sbpl/planners/rstarplanner.h	/^} RSTARLSearchState;$/;"	t	typeref:class:RSTARLSEARCHSTATEDATA
RSTARLSearchStateSpace_t	include/sbpl/planners/rstarplanner.h	/^typedef class RSTARLSEARCHSTATESPACE RSTARLSearchStateSpace_t;$/;"	t	typeref:class:RSTARLSEARCHSTATESPACE
RSTARPlanner	include/sbpl/planners/rstarplanner.h	/^class RSTARPlanner : public SBPLPlanner$/;"	c
RSTARSEARCHSTATEDATA	include/sbpl/planners/rstarplanner.h	/^    RSTARSEARCHSTATEDATA() { }$/;"	f	class:RSTARSEARCHSTATEDATA
RSTARSEARCHSTATEDATA	include/sbpl/planners/rstarplanner.h	/^typedef class RSTARSEARCHSTATEDATA : public AbstractSearchState$/;"	c
RSTARSEARCHSTATESPACE	include/sbpl/planners/rstarplanner.h	/^typedef struct RSTARSEARCHSTATESPACE$/;"	s
RSTARSearchStateSpace_t	include/sbpl/planners/rstarplanner.h	/^} RSTARSearchStateSpace_t;$/;"	t	typeref:struct:RSTARSEARCHSTATESPACE
RSTARState	include/sbpl/planners/rstarplanner.h	/^} RSTARState;$/;"	t	typeref:class:RSTARSEARCHSTATEDATA
RSTAR_DECREASE_EPS	include/sbpl/planners/rstarplanner.h	43;"	d
RSTAR_DEFAULT_INITIAL_EPS	include/sbpl/planners/rstarplanner.h	42;"	d
RSTAR_EXPTHRESH	include/sbpl/planners/rstarplanner.h	47;"	d
RSTAR_FINAL_EPS	include/sbpl/planners/rstarplanner.h	44;"	d
RSTAR_INCONS_LIST_ID	include/sbpl/planners/rstarplanner.h	49;"	d
StartState	include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* StartState;$/;"	m	class:RSTARLSEARCHSTATESPACE
TimeStarted	include/sbpl/planners/rstarplanner.h	/^    clock_t TimeStarted;$/;"	m	class:RSTARPlanner
__RSTARPLANNER_H_	include/sbpl/planners/rstarplanner.h	31;"	d
bNewSearchIteration	include/sbpl/planners/rstarplanner.h	/^    bool bNewSearchIteration;$/;"	m	struct:RSTARSEARCHSTATESPACE
bReevaluatefvals	include/sbpl/planners/rstarplanner.h	/^    bool bReevaluatefvals;$/;"	m	struct:RSTARSEARCHSTATESPACE
bReinitializeSearchStateSpace	include/sbpl/planners/rstarplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:RSTARSEARCHSTATESPACE
bestpredaction	include/sbpl/planners/rstarplanner.h	/^    CMDPACTION *bestpredaction;$/;"	m	class:RSTARSEARCHSTATEDATA
bestpredstate	include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* bestpredstate;$/;"	m	class:RSTARLSEARCHSTATEDATA
bestpredstateactioncost	include/sbpl/planners/rstarplanner.h	/^    int bestpredstateactioncost;$/;"	m	class:RSTARLSEARCHSTATEDATA
bforwardsearch	include/sbpl/planners/rstarplanner.h	/^    bool bforwardsearch; \/\/if true, then search proceeds forward, otherwise backward$/;"	m	class:RSTARPlanner
bsearchuntilfirstsolution	include/sbpl/planners/rstarplanner.h	/^    bool bsearchuntilfirstsolution; \/\/if true, then search until first solution only (see planner.h for search modes)$/;"	m	class:RSTARPlanner
callnumber	include/sbpl/planners/rstarplanner.h	/^    short unsigned int callnumber;$/;"	m	struct:RSTARSEARCHSTATESPACE
callnumberaccessed	include/sbpl/planners/rstarplanner.h	/^    short unsigned int callnumberaccessed;$/;"	m	class:RSTARSEARCHSTATEDATA
clow	include/sbpl/planners/rstarplanner.h	/^    int clow;$/;"	m	struct:RSTARACTIONDATA_T
dec_eps	include/sbpl/planners/rstarplanner.h	/^    double dec_eps;$/;"	m	class:RSTARPlanner
eps	include/sbpl/planners/rstarplanner.h	/^    double eps;$/;"	m	struct:RSTARSEARCHSTATESPACE
eps_satisfied	include/sbpl/planners/rstarplanner.h	/^    double eps_satisfied;$/;"	m	struct:RSTARSEARCHSTATESPACE
exp	include/sbpl/planners/rstarplanner.h	/^    int exp;$/;"	m	struct:RSTARACTIONDATA_T
fDeb	include/sbpl/planners/rstarplanner.h	/^    FILE *fDeb;$/;"	m	class:RSTARPlanner
final_epsilon	include/sbpl/planners/rstarplanner.h	/^    double final_epsilon;$/;"	m	class:RSTARPlanner
finitial_eps	include/sbpl/planners/rstarplanner.h	/^    double finitial_eps;$/;"	m	class:RSTARPlanner
g	include/sbpl/planners/rstarplanner.h	/^    int g;$/;"	m	class:RSTARLSEARCHSTATEDATA
g	include/sbpl/planners/rstarplanner.h	/^    unsigned int g;$/;"	m	class:RSTARSEARCHSTATEDATA
get_final_epsilon	include/sbpl/planners/rstarplanner.h	/^    double get_final_epsilon()$/;"	f	class:RSTARPlanner
get_highlevel_expands	include/sbpl/planners/rstarplanner.h	/^    virtual int get_highlevel_expands() const { return highlevel_searchexpands; }$/;"	f	class:RSTARPlanner
get_initial_eps	include/sbpl/planners/rstarplanner.h	/^    double get_initial_eps() { return finitial_eps; }$/;"	f	class:RSTARPlanner
get_lowlevel_expands	include/sbpl/planners/rstarplanner.h	/^    virtual int get_lowlevel_expands() const { return lowlevel_searchexpands; }$/;"	f	class:RSTARPlanner
get_solution_probabilisticeps	include/sbpl/planners/rstarplanner.h	/^    virtual double get_solution_probabilisticeps() const { return pSearchStateSpace->eps_satisfied; }$/;"	f	class:RSTARPlanner
h	include/sbpl/planners/rstarplanner.h	/^    int h;$/;"	m	class:RSTARSEARCHSTATEDATA
highlevel_searchexpands	include/sbpl/planners/rstarplanner.h	/^    unsigned int highlevel_searchexpands;$/;"	m	class:RSTARPlanner
iteration	include/sbpl/planners/rstarplanner.h	/^    int iteration;$/;"	m	class:RSTARLSEARCHSTATESPACE
iteration	include/sbpl/planners/rstarplanner.h	/^    unsigned int iteration;$/;"	m	class:RSTARLSEARCHSTATEDATA
iterationclosed	include/sbpl/planners/rstarplanner.h	/^    short unsigned int iterationclosed;$/;"	m	class:RSTARSEARCHSTATEDATA
iterationclosed	include/sbpl/planners/rstarplanner.h	/^    unsigned int iterationclosed;$/;"	m	class:RSTARLSEARCHSTATEDATA
local_expand_thres	include/sbpl/planners/rstarplanner.h	/^    double local_expand_thres;$/;"	m	class:RSTARPlanner
lowlevel_searchexpands	include/sbpl/planners/rstarplanner.h	/^    unsigned int lowlevel_searchexpands;$/;"	m	class:RSTARPlanner
pLSearchStateSpace	include/sbpl/planners/rstarplanner.h	/^    RSTARLSearchStateSpace_t* pLSearchStateSpace;$/;"	m	class:RSTARPlanner
pSearchStateSpace	include/sbpl/planners/rstarplanner.h	/^    RSTARSearchStateSpace_t* pSearchStateSpace;$/;"	m	class:RSTARPlanner
pathIDs	include/sbpl/planners/rstarplanner.h	/^    std::vector<int> pathIDs;$/;"	m	struct:RSTARACTIONDATA_T
predactionV	include/sbpl/planners/rstarplanner.h	/^    std::vector<CMDPACTION*> predactionV;$/;"	m	class:RSTARSEARCHSTATEDATA
searchMDP	include/sbpl/planners/rstarplanner.h	/^    CMDP searchMDP;$/;"	m	struct:RSTARSEARCHSTATESPACE
searchgoalstate	include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* searchgoalstate;$/;"	m	struct:RSTARSEARCHSTATESPACE
searchiteration	include/sbpl/planners/rstarplanner.h	/^    short unsigned int searchiteration;$/;"	m	struct:RSTARSEARCHSTATESPACE
searchstartstate	include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* searchstartstate;$/;"	m	struct:RSTARSEARCHSTATESPACE
set_eps_step	include/sbpl/planners/rstarplanner.h	/^    virtual void set_eps_step(double eps) { dec_eps = eps; }$/;"	f	class:RSTARPlanner
set_initialsolution_eps	include/sbpl/planners/rstarplanner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { finitial_eps = initialsolution_eps; }$/;"	f	class:RSTARPlanner
set_local_expand_thres	include/sbpl/planners/rstarplanner.h	/^    virtual void set_local_expand_thres(unsigned thres) { local_expand_thres = thres; }$/;"	f	class:RSTARPlanner
~RSTARLSEARCHSTATEDATA	include/sbpl/planners/rstarplanner.h	/^    ~RSTARLSEARCHSTATEDATA() { }$/;"	f	class:RSTARLSEARCHSTATEDATA
~RSTARLSEARCHSTATESPACE	include/sbpl/planners/rstarplanner.h	/^    ~RSTARLSEARCHSTATESPACE()$/;"	f	class:RSTARLSEARCHSTATESPACE
~RSTARSEARCHSTATEDATA	include/sbpl/planners/rstarplanner.h	/^    ~RSTARSEARCHSTATEDATA() { }$/;"	f	class:RSTARSEARCHSTATEDATA
GoalState	include/sbpl/planners/viplanner.h	/^    CMDPSTATE* GoalState;$/;"	m	struct:VIPLANNER_T
MDP	include/sbpl/planners/viplanner.h	/^    CMDP MDP;$/;"	m	struct:VIPLANNER_T
MDPCfg_	include/sbpl/planners/viplanner.h	/^    MDPConfig* MDPCfg_;$/;"	m	class:VIPlanner
MDP_ERRDELTA	include/sbpl/planners/viplanner.h	38;"	d
MDPstate	include/sbpl/planners/viplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:VIPLANNERSTATEDATA
Pc	include/sbpl/planners/viplanner.h	/^    float Pc;$/;"	m	class:VIPLANNERSTATEDATA
StartState	include/sbpl/planners/viplanner.h	/^    CMDPSTATE* StartState;$/;"	m	struct:VIPLANNER_T
VIPLANNERSTATEDATA	include/sbpl/planners/viplanner.h	/^    VIPLANNERSTATEDATA() { }$/;"	f	class:VIPLANNERSTATEDATA
VIPLANNERSTATEDATA	include/sbpl/planners/viplanner.h	/^typedef class VIPLANNERSTATEDATA : public AbstractSearchState$/;"	c
VIPLANNER_T	include/sbpl/planners/viplanner.h	/^struct VIPLANNER_T$/;"	s
VIPlanner	include/sbpl/planners/viplanner.h	/^    VIPlanner(DiscreteSpaceInformation* environment, MDPConfig* MDP_cfg)$/;"	f	class:VIPlanner
VIPlanner	include/sbpl/planners/viplanner.h	/^class VIPlanner : public SBPLPlanner$/;"	c
VIState	include/sbpl/planners/viplanner.h	/^} VIState;$/;"	t	typeref:class:VIPLANNERSTATEDATA
__VIPLANNER_H_	include/sbpl/planners/viplanner.h	31;"	d
bestnextaction	include/sbpl/planners/viplanner.h	/^    CMDPACTION *bestnextaction;$/;"	m	class:VIPLANNERSTATEDATA
iteration	include/sbpl/planners/viplanner.h	/^    int iteration;$/;"	m	struct:VIPLANNER_T
iteration	include/sbpl/planners/viplanner.h	/^    unsigned int iteration;$/;"	m	class:VIPLANNERSTATEDATA
v	include/sbpl/planners/viplanner.h	/^    float v;$/;"	m	class:VIPLANNERSTATEDATA
viPlanner	include/sbpl/planners/viplanner.h	/^    VIPLANNER_T viPlanner;$/;"	m	class:VIPlanner
~VIPLANNERSTATEDATA	include/sbpl/planners/viplanner.h	/^    ~VIPLANNERSTATEDATA() { }$/;"	f	class:VIPLANNERSTATEDATA
SBPL_EXCEPTION_H	include/sbpl/sbpl_exception.h	31;"	d
SBPL_Exception	include/sbpl/sbpl_exception.h	/^class SBPL_Exception : public std::exception$/;"	c
what	include/sbpl/sbpl_exception.h	/^    virtual const char* what() const throw()$/;"	f	class:SBPL_Exception
OPEN2DBLIST_	include/sbpl/utils/2Dgridsearch.h	/^    CSlidingBucket* OPEN2DBLIST_;$/;"	m	class:SBPL2DGridSearch
OPEN2D_	include/sbpl/utils/2Dgridsearch.h	/^    CIntHeap* OPEN2D_;$/;"	m	class:SBPL2DGridSearch
OPENtype_	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_OPENTYPE OPENtype_;$/;"	m	class:SBPL2DGridSearch
SBPL2DGridSearch	include/sbpl/utils/2Dgridsearch.h	/^class SBPL2DGridSearch$/;"	c
SBPL_2DGRIDSEARCH_HEUR2D	include/sbpl/utils/2Dgridsearch.h	61;"	d
SBPL_2DGRIDSEARCH_NUMOF2DDIRS	include/sbpl/utils/2Dgridsearch.h	38;"	d
SBPL_2DGRIDSEARCH_OPENTYPE	include/sbpl/utils/2Dgridsearch.h	/^enum SBPL_2DGRIDSEARCH_OPENTYPE$/;"	g
SBPL_2DGRIDSEARCH_OPENTYPE_HEAP	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_OPENTYPE_HEAP, SBPL_2DGRIDSEARCH_OPENTYPE_SLIDINGBUCKETS$/;"	e	enum:SBPL_2DGRIDSEARCH_OPENTYPE
SBPL_2DGRIDSEARCH_OPENTYPE_SLIDINGBUCKETS	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_OPENTYPE_HEAP, SBPL_2DGRIDSEARCH_OPENTYPE_SLIDINGBUCKETS$/;"	e	enum:SBPL_2DGRIDSEARCH_OPENTYPE
SBPL_2DGRIDSEARCH_TERM_CONDITION	include/sbpl/utils/2Dgridsearch.h	/^enum SBPL_2DGRIDSEARCH_TERM_CONDITION$/;"	g
SBPL_2DGRIDSEARCH_TERM_CONDITION_20PERCENTOVEROPTPATH	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_20PERCENTOVEROPTPATH,$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGRIDSEARCH_TERM_CONDITION_ALLCELLS	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_ALLCELLS$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGRIDSEARCH_TERM_CONDITION_OPTPATHFOUND	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_OPTPATHFOUND,$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGRIDSEARCH_TERM_CONDITION_THREETIMESOPTPATH	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_THREETIMESOPTPATH,$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGRIDSEARCH_TERM_CONDITION_TWOTIMESOPTPATH	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_TWOTIMESOPTPATH,$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGridSearchState	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGridSearchState() { iterationaccessed = 0; }$/;"	f	class:SBPL_2DGridSearchState
SBPL_2DGridSearchState	include/sbpl/utils/2Dgridsearch.h	/^class SBPL_2DGridSearchState : public AbstractSearchState$/;"	c
SBPL_2DSEARCH_OPEN_LIST_ID	include/sbpl/utils/2Dgridsearch.h	40;"	d
__2DGRIDSEARCH_H_	include/sbpl/utils/2Dgridsearch.h	31;"	d
cellSize_m_	include/sbpl/utils/2Dgridsearch.h	/^    float cellSize_m_;$/;"	m	class:SBPL2DGridSearch
dx0intersects_	include/sbpl/utils/2Dgridsearch.h	/^    int dx0intersects_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dx1intersects_	include/sbpl/utils/2Dgridsearch.h	/^    int dx1intersects_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dx_	include/sbpl/utils/2Dgridsearch.h	/^    int dx_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dxy_distance_mm_	include/sbpl/utils/2Dgridsearch.h	/^    int dxy_distance_mm_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dy0intersects_	include/sbpl/utils/2Dgridsearch.h	/^    int dy0intersects_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dy1intersects_	include/sbpl/utils/2Dgridsearch.h	/^    int dy1intersects_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dy_	include/sbpl/utils/2Dgridsearch.h	/^    int dy_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
g	include/sbpl/utils/2Dgridsearch.h	/^    int g;$/;"	m	class:SBPL_2DGridSearchState
getlargestcomputedoptimalf_inmm	include/sbpl/utils/2Dgridsearch.h	/^    int getlargestcomputedoptimalf_inmm() { return largestcomputedoptf_; }$/;"	f	class:SBPL2DGridSearch
getlowerboundoncostfromstart_inmm	include/sbpl/utils/2Dgridsearch.h	/^    inline int getlowerboundoncostfromstart_inmm(int x, int y)$/;"	f	class:SBPL2DGridSearch
goalX_	include/sbpl/utils/2Dgridsearch.h	/^    int goalX_, goalY_;$/;"	m	class:SBPL2DGridSearch
goalY_	include/sbpl/utils/2Dgridsearch.h	/^    int goalX_, goalY_;$/;"	m	class:SBPL2DGridSearch
height_	include/sbpl/utils/2Dgridsearch.h	/^    int width_, height_;$/;"	m	class:SBPL2DGridSearch
iteration_	include/sbpl/utils/2Dgridsearch.h	/^    int iteration_;$/;"	m	class:SBPL2DGridSearch
iterationaccessed	include/sbpl/utils/2Dgridsearch.h	/^    int iterationaccessed;$/;"	m	class:SBPL_2DGridSearchState
largestcomputedoptf_	include/sbpl/utils/2Dgridsearch.h	/^    int largestcomputedoptf_;$/;"	m	class:SBPL2DGridSearch
searchStates2D_	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGridSearchState** searchStates2D_;$/;"	m	class:SBPL2DGridSearch
startX_	include/sbpl/utils/2Dgridsearch.h	/^    int startX_, startY_;$/;"	m	class:SBPL2DGridSearch
startY_	include/sbpl/utils/2Dgridsearch.h	/^    int startX_, startY_;$/;"	m	class:SBPL2DGridSearch
term_condition_usedlast	include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION term_condition_usedlast;$/;"	m	class:SBPL2DGridSearch
width_	include/sbpl/utils/2Dgridsearch.h	/^    int width_, height_;$/;"	m	class:SBPL2DGridSearch
withinMap	include/sbpl/utils/2Dgridsearch.h	/^    inline bool withinMap(int x, int y)$/;"	f	class:SBPL2DGridSearch
x	include/sbpl/utils/2Dgridsearch.h	/^    int x, y;$/;"	m	class:SBPL_2DGridSearchState
y	include/sbpl/utils/2Dgridsearch.h	/^    int x, y;$/;"	m	class:SBPL_2DGridSearchState
~SBPL2DGridSearch	include/sbpl/utils/2Dgridsearch.h	/^    ~SBPL2DGridSearch()$/;"	f	class:SBPL2DGridSearch
~SBPL_2DGridSearchState	include/sbpl/utils/2Dgridsearch.h	/^    ~SBPL_2DGridSearchState() { }$/;"	f	class:SBPL_2DGridSearchState
CHeap	include/sbpl/utils/heap.h	/^class CHeap$/;"	c
CIntHeap	include/sbpl/utils/heap.h	/^class CIntHeap$/;"	c
HEAPELEMENT	include/sbpl/utils/heap.h	/^struct HEAPELEMENT$/;"	s
HEAPINTELEMENT	include/sbpl/utils/heap.h	/^struct HEAPINTELEMENT$/;"	s
HEAPSIZE	include/sbpl/utils/heap.h	37;"	d
HEAPSIZE_INIT	include/sbpl/utils/heap.h	38;"	d
__HEAP_H_	include/sbpl/utils/heap.h	31;"	d
allocated	include/sbpl/utils/heap.h	/^    int allocated;$/;"	m	class:CHeap
allocated	include/sbpl/utils/heap.h	/^    int allocated;$/;"	m	class:CIntHeap
currentsize	include/sbpl/utils/heap.h	/^    int currentsize;$/;"	m	class:CHeap
currentsize	include/sbpl/utils/heap.h	/^    int currentsize;$/;"	m	class:CIntHeap
heap	include/sbpl/utils/heap.h	/^    heapelement* heap;$/;"	m	class:CHeap
heap	include/sbpl/utils/heap.h	/^    heapintelement* heap;$/;"	m	class:CIntHeap
heapelement	include/sbpl/utils/heap.h	/^typedef struct HEAPELEMENT heapelement;$/;"	t	typeref:struct:HEAPELEMENT
heapintelement	include/sbpl/utils/heap.h	/^typedef struct HEAPINTELEMENT heapintelement;$/;"	t	typeref:struct:HEAPINTELEMENT
heapstate	include/sbpl/utils/heap.h	/^    AbstractSearchState *heapstate;$/;"	m	struct:HEAPELEMENT
heapstate	include/sbpl/utils/heap.h	/^    AbstractSearchState *heapstate;$/;"	m	struct:HEAPINTELEMENT
key	include/sbpl/utils/heap.h	/^    CKey key;$/;"	m	struct:HEAPELEMENT
key	include/sbpl/utils/heap.h	/^    int key;$/;"	m	struct:HEAPINTELEMENT
percolates	include/sbpl/utils/heap.h	/^    int percolates; \/\/for counting purposes$/;"	m	class:CHeap
percolates	include/sbpl/utils/heap.h	/^    int percolates; \/\/for counting purposes$/;"	m	class:CIntHeap
CKey	include/sbpl/utils/key.h	/^    CKey()$/;"	f	class:CKey
CKey	include/sbpl/utils/key.h	/^class CKey$/;"	c
INFINITECOST	include/sbpl/utils/key.h	35;"	d
KEY_SIZE	include/sbpl/utils/key.h	33;"	d
SetKeytoInfinity	include/sbpl/utils/key.h	/^    void SetKeytoInfinity()$/;"	f	class:CKey
SetKeytoZero	include/sbpl/utils/key.h	/^    void SetKeytoZero()$/;"	f	class:CKey
__KEY_H_	include/sbpl/utils/key.h	31;"	d
key	include/sbpl/utils/key.h	/^    long int key[KEY_SIZE];$/;"	m	class:CKey
operator !=	include/sbpl/utils/key.h	/^    bool operator !=(CKey& RHSKey)$/;"	f	class:CKey
operator -	include/sbpl/utils/key.h	/^    CKey operator -(const CKey& RHSKey) const$/;"	f	class:CKey
operator <	include/sbpl/utils/key.h	/^    bool operator <(CKey& RHSKey)$/;"	f	class:CKey
operator <=	include/sbpl/utils/key.h	/^    bool operator <=(CKey& RHSKey) { return !(*this > RHSKey); }$/;"	f	class:CKey
operator =	include/sbpl/utils/key.h	/^    void operator =(CKey RHSKey)$/;"	f	class:CKey
operator ==	include/sbpl/utils/key.h	/^    bool operator ==(CKey& RHSKey)$/;"	f	class:CKey
operator >	include/sbpl/utils/key.h	/^    bool operator >(CKey& RHSKey)$/;"	f	class:CKey
operator >=	include/sbpl/utils/key.h	/^    bool operator >=(CKey& RHSKey) { return !(*this < RHSKey); }$/;"	f	class:CKey
operator []	include/sbpl/utils/key.h	/^    long int operator [](int i) { return key[i]; }$/;"	f	class:CKey
~CKey	include/sbpl/utils/key.h	/^    ~CKey() { }$/;"	f	class:CKey
CBucket	include/sbpl/utils/list.h	/^    CBucket(int first_priority, int max_bucketed_priority)$/;"	f	class:CBucket
CBucket	include/sbpl/utils/list.h	/^class CBucket$/;"	c
CList	include/sbpl/utils/list.h	/^    CList()$/;"	f	class:CList
CList	include/sbpl/utils/list.h	/^class CList$/;"	c
CSlidingBucket	include/sbpl/utils/list.h	/^    CSlidingBucket(int num_of_buckets, int bucket_size)$/;"	f	class:CSlidingBucket
CSlidingBucket	include/sbpl/utils/list.h	/^class CSlidingBucket$/;"	c
LISTSIZE	include/sbpl/utils/list.h	38;"	d
__LIST_H_	include/sbpl/utils/list.h	31;"	d
assortedpriorityV	include/sbpl/utils/list.h	/^    std::vector<int> assortedpriorityV; $/;"	m	class:CBucket
bucketV	include/sbpl/utils/list.h	/^    AbstractSearchState*** bucketV;$/;"	m	class:CSlidingBucket
bucketV	include/sbpl/utils/list.h	/^    std::vector<AbstractSearchState *>* bucketV;$/;"	m	class:CBucket
bucketsize	include/sbpl/utils/list.h	/^    int bucketsize;$/;"	m	class:CSlidingBucket
createbucket	include/sbpl/utils/list.h	/^    void createbucket(int bucketindex)$/;"	f	class:CSlidingBucket
currentfirstbucket_bindex	include/sbpl/utils/list.h	/^    int currentfirstbucket_bindex; \/\/index of the bucket that corresponds to the first bucket in the list (lowest priority)$/;"	m	class:CSlidingBucket
currentfirstbucket_priority	include/sbpl/utils/list.h	/^    int currentfirstbucket_priority; \/\/priority of the first bucket in the list$/;"	m	class:CSlidingBucket
currentmaxelement_priority	include/sbpl/utils/list.h	/^    int currentmaxelement_priority; \/\/the maxelement priority in the list$/;"	m	class:CSlidingBucket
currentminelement_bindex	include/sbpl/utils/list.h	/^    int currentminelement_bindex; \/\/index of the bucket of the current min element$/;"	m	class:CSlidingBucket
currentminelement_bucketVind	include/sbpl/utils/list.h	/^    int currentminelement_bucketVind; \/\/index within the bucket$/;"	m	class:CBucket
currentminelement_bucketind	include/sbpl/utils/list.h	/^    int currentminelement_bucketind;$/;"	m	class:CBucket
currentminelement_index	include/sbpl/utils/list.h	/^    int currentminelement_index; \/\/index of the current minelement in the bucket$/;"	m	class:CSlidingBucket
currentminelement_priority	include/sbpl/utils/list.h	/^    int currentminelement_priority; \/\/the priority of the current minelement$/;"	m	class:CSlidingBucket
currentminelement_priority	include/sbpl/utils/list.h	/^    int currentminelement_priority;$/;"	m	class:CBucket
currentsize	include/sbpl/utils/list.h	/^    int currentsize;$/;"	m	class:CList
empty	include/sbpl/utils/list.h	/^    bool empty() { return (currentsize == 0); }$/;"	f	class:CList
empty	include/sbpl/utils/list.h	/^    bool empty()$/;"	f	class:CBucket
empty	include/sbpl/utils/list.h	/^    inline bool empty()$/;"	f	class:CSlidingBucket
firstelement	include/sbpl/utils/list.h	/^    listelement* firstelement;$/;"	m	class:CList
firstpriority	include/sbpl/utils/list.h	/^    int firstpriority;$/;"	m	class:CBucket
full	include/sbpl/utils/list.h	/^    bool full() { return (currentsize >= LISTSIZE); }$/;"	f	class:CList
getfirst	include/sbpl/utils/list.h	/^    AbstractSearchState *getfirst()$/;"	f	class:CList
getlast	include/sbpl/utils/list.h	/^    AbstractSearchState *getlast()$/;"	f	class:CList
getminelement	include/sbpl/utils/list.h	/^    AbstractSearchState *getminelement()$/;"	f	class:CBucket
getminelement	include/sbpl/utils/list.h	/^    AbstractSearchState *getminelement()$/;"	f	class:CSlidingBucket
getminkey	include/sbpl/utils/list.h	/^    inline int getminkey()$/;"	f	class:CSlidingBucket
getminpriority	include/sbpl/utils/list.h	/^    int getminpriority()$/;"	f	class:CBucket
getnext	include/sbpl/utils/list.h	/^    AbstractSearchState *getnext(AbstractSearchState* AbstractSearchState1, int listindex)$/;"	f	class:CList
in	include/sbpl/utils/list.h	/^    bool in(AbstractSearchState *AbstractSearchState1, int listindex)$/;"	f	class:CList
insert	include/sbpl/utils/list.h	/^    void insert(AbstractSearchState *AbstractSearchState1, int listindex)$/;"	f	class:CList
insert	include/sbpl/utils/list.h	/^    void insert(AbstractSearchState *AbstractSearchState1, int priority)$/;"	f	class:CBucket
insert	include/sbpl/utils/list.h	/^    void insert(AbstractSearchState *AbstractSearchState1, int priority)$/;"	f	class:CSlidingBucket
insertinfront	include/sbpl/utils/list.h	/^    void insertinfront(AbstractSearchState *AbstractSearchState1, int listindex)$/;"	f	class:CList
lastelement	include/sbpl/utils/list.h	/^    listelement* lastelement;$/;"	m	class:CList
lastelementindexV	include/sbpl/utils/list.h	/^    int* lastelementindexV; \/\/index of the last element for each bucket$/;"	m	class:CSlidingBucket
listelement	include/sbpl/utils/list.h	/^struct listelement$/;"	s
listelement	include/sbpl/utils/list.h	/^typedef struct listelement listelement;$/;"	t	typeref:struct:listelement
liststate	include/sbpl/utils/list.h	/^    AbstractSearchState *liststate;$/;"	m	struct:listelement
makeemptybucketV	include/sbpl/utils/list.h	/^    void makeemptybucketV()$/;"	f	class:CBucket
makeemptylist	include/sbpl/utils/list.h	/^    void makeemptylist(int listindex)$/;"	f	class:CList
maxassortedpriorityVsize	include/sbpl/utils/list.h	/^    int maxassortedpriorityVsize;$/;"	m	class:CBucket
next	include/sbpl/utils/list.h	/^    struct listelement *next;$/;"	m	struct:listelement	typeref:struct:listelement::listelement
numofbuckets	include/sbpl/utils/list.h	/^    int numofbuckets;$/;"	m	class:CBucket
numofbuckets	include/sbpl/utils/list.h	/^    int numofbuckets;$/;"	m	class:CSlidingBucket
popminelement	include/sbpl/utils/list.h	/^    AbstractSearchState *popminelement()$/;"	f	class:CBucket
popminelement	include/sbpl/utils/list.h	/^    AbstractSearchState *popminelement()$/;"	f	class:CSlidingBucket
prev	include/sbpl/utils/list.h	/^    struct listelement *prev;$/;"	m	struct:listelement	typeref:struct:listelement::listelement
recomputeandreturnmin	include/sbpl/utils/list.h	/^    AbstractSearchState *recomputeandreturnmin()$/;"	f	class:CSlidingBucket
recomputeminelementupfrombucket	include/sbpl/utils/list.h	/^    void recomputeminelementupfrombucket(int startbucketindex)$/;"	f	class:CBucket
remove	include/sbpl/utils/list.h	/^    void remove(AbstractSearchState *AbstractSearchState1, int listindex)$/;"	f	class:CList
remove	include/sbpl/utils/list.h	/^    void remove(AbstractSearchState *AbstractSearchState1, int priorityattimeofinsertion)$/;"	f	class:CBucket
removestategivenbucketindex	include/sbpl/utils/list.h	/^    void removestategivenbucketindex(AbstractSearchState *AbstractSearchState1, int bucketindex)$/;"	f	class:CBucket
reset	include/sbpl/utils/list.h	/^    bool reset(int first_priority, int max_bucketed_priority)$/;"	f	class:CBucket
reset	include/sbpl/utils/list.h	/^    void reset()$/;"	f	class:CSlidingBucket
~CBucket	include/sbpl/utils/list.h	/^    ~CBucket()$/;"	f	class:CBucket
~CList	include/sbpl/utils/list.h	/^    ~CList()$/;"	f	class:CList
~CSlidingBucket	include/sbpl/utils/list.h	/^    ~CSlidingBucket()$/;"	f	class:CSlidingBucket
ActionID	include/sbpl/utils/mdp.h	/^    int ActionID;$/;"	m	class:CMDPACTION
Actions	include/sbpl/utils/mdp.h	/^    std::vector<CMDPACTION*> Actions;$/;"	m	class:CMDPSTATE
CMDP	include/sbpl/utils/mdp.h	/^    CMDP() { }$/;"	f	class:CMDP
CMDP	include/sbpl/utils/mdp.h	/^class CMDP$/;"	c
CMDPACTION	include/sbpl/utils/mdp.h	/^    CMDPACTION(int ID, int sourcestateid)$/;"	f	class:CMDPACTION
CMDPACTION	include/sbpl/utils/mdp.h	/^class CMDPACTION$/;"	c
CMDPSTATE	include/sbpl/utils/mdp.h	/^    CMDPSTATE(int ID)$/;"	f	class:CMDPSTATE
CMDPSTATE	include/sbpl/utils/mdp.h	/^class CMDPSTATE$/;"	c
Costs	include/sbpl/utils/mdp.h	/^    std::vector<int> Costs;$/;"	m	class:CMDPACTION
EPS_ERROR	include/sbpl/utils/mdp.h	38;"	d
MAXSTATESPACESIZE	include/sbpl/utils/mdp.h	41;"	d
PlannerSpecificData	include/sbpl/utils/mdp.h	/^    void* PlannerSpecificData;$/;"	m	class:CMDPACTION
PlannerSpecificData	include/sbpl/utils/mdp.h	/^    void* PlannerSpecificData;$/;"	m	class:CMDPSTATE
PredsID	include/sbpl/utils/mdp.h	/^    std::vector<int> PredsID;$/;"	m	class:CMDPSTATE
SourceStateID	include/sbpl/utils/mdp.h	/^    int SourceStateID;$/;"	m	class:CMDPACTION
StateArray	include/sbpl/utils/mdp.h	/^    std::vector<CMDPSTATE*> StateArray;$/;"	m	class:CMDP
StateID	include/sbpl/utils/mdp.h	/^    int StateID;$/;"	m	class:CMDPSTATE
SuccsID	include/sbpl/utils/mdp.h	/^    std::vector<int> SuccsID;$/;"	m	class:CMDPACTION
SuccsProb	include/sbpl/utils/mdp.h	/^    std::vector<float> SuccsProb;$/;"	m	class:CMDPACTION
__MDP_H_	include/sbpl/utils/mdp.h	31;"	d
~CMDP	include/sbpl/utils/mdp.h	/^    ~CMDP() { }$/;"	f	class:CMDP
~CMDPACTION	include/sbpl/utils/mdp.h	/^    ~CMDPACTION()$/;"	f	class:CMDPACTION
~CMDPSTATE	include/sbpl/utils/mdp.h	/^    ~CMDPSTATE()$/;"	f	class:CMDPSTATE
MDPConfig	include/sbpl/utils/mdpconfig.h	/^struct MDPConfig$/;"	s
__MDPCONFIG_H_	include/sbpl/utils/mdpconfig.h	31;"	d
goalstateid	include/sbpl/utils/mdpconfig.h	/^    int goalstateid;$/;"	m	struct:MDPConfig
startstateid	include/sbpl/utils/mdpconfig.h	/^    int startstateid;$/;"	m	struct:MDPConfig
NUM_ACTIONS	include/sbpl/utils/sbpl_bfs_2d.h	/^    const int NUM_ACTIONS;$/;"	m	class:sbpl_bfs_2d
SBPL_BFS_2D	include/sbpl/utils/sbpl_bfs_2d.h	2;"	d
bfs_cell_2d	include/sbpl/utils/sbpl_bfs_2d.h	/^        bfs_cell_2d()$/;"	f	class:sbpl_bfs_2d::bfs_cell_2d
bfs_cell_2d	include/sbpl/utils/sbpl_bfs_2d.h	/^        bfs_cell_2d(int tempX, int tempY)$/;"	f	class:sbpl_bfs_2d::bfs_cell_2d
bfs_cell_2d	include/sbpl/utils/sbpl_bfs_2d.h	/^    class bfs_cell_2d$/;"	c	class:sbpl_bfs_2d
clear_distances	include/sbpl/utils/sbpl_bfs_2d.h	/^    void clear_distances()$/;"	f	class:sbpl_bfs_2d
compute_distance_from_obs	include/sbpl/utils/sbpl_bfs_2d.h	/^    void compute_distance_from_obs(int** grid)$/;"	f	class:sbpl_bfs_2d
compute_distance_from_point	include/sbpl/utils/sbpl_bfs_2d.h	/^    bool compute_distance_from_point(int** grid, int x, int y)$/;"	f	class:sbpl_bfs_2d
compute_distance_from_points	include/sbpl/utils/sbpl_bfs_2d.h	/^    bool compute_distance_from_points(int** grid, std::vector<int> x, std::vector<int> y)$/;"	f	class:sbpl_bfs_2d
compute_distances	include/sbpl/utils/sbpl_bfs_2d.h	/^    void compute_distances(int** grid)$/;"	f	class:sbpl_bfs_2d
dist_	include/sbpl/utils/sbpl_bfs_2d.h	/^    int** dist_;$/;"	m	class:sbpl_bfs_2d
dx	include/sbpl/utils/sbpl_bfs_2d.h	/^    int* dx;$/;"	m	class:sbpl_bfs_2d
dy	include/sbpl/utils/sbpl_bfs_2d.h	/^    int* dy;$/;"	m	class:sbpl_bfs_2d
get_distance	include/sbpl/utils/sbpl_bfs_2d.h	/^    int get_distance(unsigned int x, unsigned int y)$/;"	f	class:sbpl_bfs_2d
q_	include/sbpl/utils/sbpl_bfs_2d.h	/^    sbpl_fifo<bfs_cell_2d>* q_;$/;"	m	class:sbpl_bfs_2d
sbpl_bfs_2d	include/sbpl/utils/sbpl_bfs_2d.h	/^    sbpl_bfs_2d(unsigned int sx, unsigned int sy, int obs_thresh, int fifo_size = -1) :$/;"	f	class:sbpl_bfs_2d
sbpl_bfs_2d	include/sbpl/utils/sbpl_bfs_2d.h	/^class sbpl_bfs_2d$/;"	c
size_x_	include/sbpl/utils/sbpl_bfs_2d.h	/^    int size_x_;$/;"	m	class:sbpl_bfs_2d
size_y_	include/sbpl/utils/sbpl_bfs_2d.h	/^    int size_y_;$/;"	m	class:sbpl_bfs_2d
thresh_	include/sbpl/utils/sbpl_bfs_2d.h	/^    int thresh_;$/;"	m	class:sbpl_bfs_2d
x	include/sbpl/utils/sbpl_bfs_2d.h	/^        int x;$/;"	m	class:sbpl_bfs_2d::bfs_cell_2d
y	include/sbpl/utils/sbpl_bfs_2d.h	/^        int y;$/;"	m	class:sbpl_bfs_2d::bfs_cell_2d
~sbpl_bfs_2d	include/sbpl/utils/sbpl_bfs_2d.h	/^    ~sbpl_bfs_2d()$/;"	f	class:sbpl_bfs_2d
NUM_ACTIONS	include/sbpl/utils/sbpl_bfs_3d.h	/^    const int NUM_ACTIONS;$/;"	m	class:sbpl_bfs_3d
SBPL_BFS_3D	include/sbpl/utils/sbpl_bfs_3d.h	2;"	d
bfs_cell_3d	include/sbpl/utils/sbpl_bfs_3d.h	/^        bfs_cell_3d()$/;"	f	class:sbpl_bfs_3d::bfs_cell_3d
bfs_cell_3d	include/sbpl/utils/sbpl_bfs_3d.h	/^        bfs_cell_3d(int tempX, int tempY, int tempZ)$/;"	f	class:sbpl_bfs_3d::bfs_cell_3d
bfs_cell_3d	include/sbpl/utils/sbpl_bfs_3d.h	/^    class bfs_cell_3d$/;"	c	class:sbpl_bfs_3d
clear_distances	include/sbpl/utils/sbpl_bfs_3d.h	/^    void clear_distances()$/;"	f	class:sbpl_bfs_3d
compute_distance_from_obs	include/sbpl/utils/sbpl_bfs_3d.h	/^    void compute_distance_from_obs(int*** grid)$/;"	f	class:sbpl_bfs_3d
compute_distance_from_point	include/sbpl/utils/sbpl_bfs_3d.h	/^    bool compute_distance_from_point(int*** grid, int x, int y, int z)$/;"	f	class:sbpl_bfs_3d
compute_distance_from_points	include/sbpl/utils/sbpl_bfs_3d.h	/^    bool compute_distance_from_points(int*** grid, std::vector<int> x, std::vector<int> y, std::vector<int> z)$/;"	f	class:sbpl_bfs_3d
compute_distances	include/sbpl/utils/sbpl_bfs_3d.h	/^    void compute_distances(int*** grid)$/;"	f	class:sbpl_bfs_3d
dist_	include/sbpl/utils/sbpl_bfs_3d.h	/^    int*** dist_;$/;"	m	class:sbpl_bfs_3d
dx	include/sbpl/utils/sbpl_bfs_3d.h	/^    int* dx;$/;"	m	class:sbpl_bfs_3d
dy	include/sbpl/utils/sbpl_bfs_3d.h	/^    int* dy;$/;"	m	class:sbpl_bfs_3d
dz	include/sbpl/utils/sbpl_bfs_3d.h	/^    int* dz;$/;"	m	class:sbpl_bfs_3d
get_distance	include/sbpl/utils/sbpl_bfs_3d.h	/^    int get_distance(unsigned int x, unsigned int y, unsigned int z)$/;"	f	class:sbpl_bfs_3d
q_	include/sbpl/utils/sbpl_bfs_3d.h	/^    sbpl_fifo<bfs_cell_3d>* q_;$/;"	m	class:sbpl_bfs_3d
sbpl_bfs_3d	include/sbpl/utils/sbpl_bfs_3d.h	/^    sbpl_bfs_3d(unsigned int sx, unsigned int sy, unsigned int sz, int obs_thresh, int fifo_size = -1) :$/;"	f	class:sbpl_bfs_3d
sbpl_bfs_3d	include/sbpl/utils/sbpl_bfs_3d.h	/^class sbpl_bfs_3d$/;"	c
size_x_	include/sbpl/utils/sbpl_bfs_3d.h	/^    int size_x_;$/;"	m	class:sbpl_bfs_3d
size_y_	include/sbpl/utils/sbpl_bfs_3d.h	/^    int size_y_;$/;"	m	class:sbpl_bfs_3d
size_z_	include/sbpl/utils/sbpl_bfs_3d.h	/^    int size_z_;$/;"	m	class:sbpl_bfs_3d
thresh_	include/sbpl/utils/sbpl_bfs_3d.h	/^    int thresh_;$/;"	m	class:sbpl_bfs_3d
x	include/sbpl/utils/sbpl_bfs_3d.h	/^        int x;$/;"	m	class:sbpl_bfs_3d::bfs_cell_3d
y	include/sbpl/utils/sbpl_bfs_3d.h	/^        int y;$/;"	m	class:sbpl_bfs_3d::bfs_cell_3d
z	include/sbpl/utils/sbpl_bfs_3d.h	/^        int z;$/;"	m	class:sbpl_bfs_3d::bfs_cell_3d
~sbpl_bfs_3d	include/sbpl/utils/sbpl_bfs_3d.h	/^    ~sbpl_bfs_3d()$/;"	f	class:sbpl_bfs_3d
SBPL_FIFO	include/sbpl/utils/sbpl_fifo.h	2;"	d
clear	include/sbpl/utils/sbpl_fifo.h	/^    void clear()$/;"	f	class:sbpl_fifo
empty	include/sbpl/utils/sbpl_fifo.h	/^    bool empty()$/;"	f	class:sbpl_fifo
head_	include/sbpl/utils/sbpl_fifo.h	/^    int head_;$/;"	m	class:sbpl_fifo
insert	include/sbpl/utils/sbpl_fifo.h	/^    bool insert(T val)$/;"	f	class:sbpl_fifo
q_	include/sbpl/utils/sbpl_fifo.h	/^    T* q_;$/;"	m	class:sbpl_fifo
remove	include/sbpl/utils/sbpl_fifo.h	/^    bool remove(T* val)$/;"	f	class:sbpl_fifo
sbpl_fifo	include/sbpl/utils/sbpl_fifo.h	/^    sbpl_fifo(unsigned int size)$/;"	f	class:sbpl_fifo
sbpl_fifo	include/sbpl/utils/sbpl_fifo.h	/^class sbpl_fifo$/;"	c
size_	include/sbpl/utils/sbpl_fifo.h	/^    int size_;$/;"	m	class:sbpl_fifo
tail_	include/sbpl/utils/sbpl_fifo.h	/^    int tail_;$/;"	m	class:sbpl_fifo
~sbpl_fifo	include/sbpl/utils/sbpl_fifo.h	/^    ~sbpl_fifo()$/;"	f	class:sbpl_fifo
BELIEFSTATEWITHBINARYHVALS	include/sbpl/utils/utils.h	/^typedef struct BELIEFSTATEWITHBINARYHVALS$/;"	s
BINARYHIDDENVARIABLE	include/sbpl/utils/utils.h	/^typedef struct BINARYHIDDENVARIABLE$/;"	s
BeliefState	include/sbpl/utils/utils.h	/^    sbpl_BeliefStatewithBinaryh_t BeliefState; \/\/current belief state$/;"	m	struct:POLICYBELIEFSTATEWITHBINARYHVALS
CONTXY2DISC	include/sbpl/utils/utils.h	51;"	d
DISCXY2CONT	include/sbpl/utils/utils.h	52;"	d
DTerm	include/sbpl/utils/utils.h	/^    int DTerm;$/;"	m	struct:__anon24
DeltaX	include/sbpl/utils/utils.h	/^    int DeltaX, DeltaY;$/;"	m	struct:__anon24
DeltaY	include/sbpl/utils/utils.h	/^    int DeltaX, DeltaY;$/;"	m	struct:__anon24
EnvNAVXYTHETALAT2Dpt_t	include/sbpl/utils/utils.h	43;"	d
EnvNAVXYTHETALAT3Dcell_t	include/sbpl/utils/utils.h	45;"	d
EnvNAVXYTHETALAT3Dpt_t	include/sbpl/utils/utils.h	44;"	d
Flipped	include/sbpl/utils/utils.h	/^    int Flipped;$/;"	m	struct:__anon24
IncrE	include/sbpl/utils/utils.h	/^    int IncrE, IncrNE;$/;"	m	struct:__anon24
IncrNE	include/sbpl/utils/utils.h	/^    int IncrE, IncrNE;$/;"	m	struct:__anon24
Increment	include/sbpl/utils/utils.h	/^    int Increment;$/;"	m	struct:__anon24
NORMALIZEDISCTHETA	include/sbpl/utils/utils.h	47;"	d
PI_CONST	include/sbpl/utils/utils.h	54;"	d
POLICYBELIEFSTATEWITHBINARYHVALS	include/sbpl/utils/utils.h	/^typedef struct POLICYBELIEFSTATEWITHBINARYHVALS$/;"	s
Prob	include/sbpl/utils/utils.h	/^    unsigned char Prob;$/;"	m	struct:BINARYHIDDENVARIABLE
UNKNOWN_COST	include/sbpl/utils/utils.h	56;"	d
UsingYIndex	include/sbpl/utils/utils.h	/^    int UsingYIndex;$/;"	m	struct:__anon24
X1	include/sbpl/utils/utils.h	/^    int X1, Y1;$/;"	m	struct:__anon24
X2	include/sbpl/utils/utils.h	/^    int X2, Y2;$/;"	m	struct:__anon24
XIndex	include/sbpl/utils/utils.h	/^    int XIndex, YIndex;$/;"	m	struct:__anon24
Y1	include/sbpl/utils/utils.h	/^    int X1, Y1;$/;"	m	struct:__anon24
Y2	include/sbpl/utils/utils.h	/^    int X2, Y2;$/;"	m	struct:__anon24
YIndex	include/sbpl/utils/utils.h	/^    int XIndex, YIndex;$/;"	m	struct:__anon24
__UTILS_H_	include/sbpl/utils/utils.h	31;"	d
__max	include/sbpl/utils/utils.h	38;"	d
__min	include/sbpl/utils/utils.h	39;"	d
bresenham_param_t	include/sbpl/utils/utils.h	/^} bresenham_param_t;$/;"	t	typeref:struct:__anon24
h_ID	include/sbpl/utils/utils.h	/^    int h_ID; \/\/ID of the variable$/;"	m	struct:BINARYHIDDENVARIABLE
nav2dcell_t	include/sbpl/utils/utils.h	42;"	d
nextpolicyactionID	include/sbpl/utils/utils.h	/^    int nextpolicyactionID; \/\/ID of the next policy action if exists (otherwise -1)$/;"	m	struct:POLICYBELIEFSTATEWITHBINARYHVALS
operator <	include/sbpl/utils/utils.h	/^    bool operator<(const sbpl_2Dcell_t cell) const$/;"	f	class:sbpl_2Dcell_t
operator <	include/sbpl/utils/utils.h	/^    bool operator<(const sbpl_2Dpt_t p) const$/;"	f	class:sbpl_2Dpt_t
operator <	include/sbpl/utils/utils.h	/^    bool operator<(const sbpl_xy_theta_cell_t cell) const$/;"	f	class:sbpl_xy_theta_cell_t
operator <	include/sbpl/utils/utils.h	/^    bool operator<(const sbpl_xy_theta_pt_t p) const$/;"	f	class:sbpl_xy_theta_pt_t
operator ==	include/sbpl/utils/utils.h	/^    bool operator==(const sbpl_2Dcell_t cell) const$/;"	f	class:sbpl_2Dcell_t
operator ==	include/sbpl/utils/utils.h	/^    bool operator==(const sbpl_2Dpt_t p) const$/;"	f	class:sbpl_2Dpt_t
operator ==	include/sbpl/utils/utils.h	/^    bool operator==(const sbpl_xy_theta_cell_t cell) const$/;"	f	class:sbpl_xy_theta_cell_t
operator ==	include/sbpl/utils/utils.h	/^    bool operator==(const sbpl_xy_theta_pt_t p) const$/;"	f	class:sbpl_xy_theta_pt_t
outcomestateIndexV	include/sbpl/utils/utils.h	/^    std::vector<int> outcomestateIndexV; $/;"	m	struct:POLICYBELIEFSTATEWITHBINARYHVALS
s_ID	include/sbpl/utils/utils.h	/^    int s_ID; \/\/ID of S part of state-space$/;"	m	struct:BELIEFSTATEWITHBINARYHVALS
sbpl_2Dcell_t	include/sbpl/utils/utils.h	/^    sbpl_2Dcell_t()$/;"	f	class:sbpl_2Dcell_t
sbpl_2Dcell_t	include/sbpl/utils/utils.h	/^    sbpl_2Dcell_t(int x_, int y_)$/;"	f	class:sbpl_2Dcell_t
sbpl_2Dcell_t	include/sbpl/utils/utils.h	/^class sbpl_2Dcell_t$/;"	c
sbpl_2Dpt_t	include/sbpl/utils/utils.h	/^    sbpl_2Dpt_t()$/;"	f	class:sbpl_2Dpt_t
sbpl_2Dpt_t	include/sbpl/utils/utils.h	/^    sbpl_2Dpt_t(double x_, double y_)$/;"	f	class:sbpl_2Dpt_t
sbpl_2Dpt_t	include/sbpl/utils/utils.h	/^class sbpl_2Dpt_t$/;"	c
sbpl_BeliefStatewithBinaryh_t	include/sbpl/utils/utils.h	/^} sbpl_BeliefStatewithBinaryh_t;$/;"	t	typeref:struct:BELIEFSTATEWITHBINARYHVALS
sbpl_BinaryHiddenVar_t	include/sbpl/utils/utils.h	/^} sbpl_BinaryHiddenVar_t;$/;"	t	typeref:struct:BINARYHIDDENVARIABLE
sbpl_PolicyStatewithBinaryh_t	include/sbpl/utils/utils.h	/^} sbpl_PolicyStatewithBinaryh_t;$/;"	t	typeref:struct:POLICYBELIEFSTATEWITHBINARYHVALS
sbpl_xy_theta_cell_t	include/sbpl/utils/utils.h	/^    sbpl_xy_theta_cell_t()$/;"	f	class:sbpl_xy_theta_cell_t
sbpl_xy_theta_cell_t	include/sbpl/utils/utils.h	/^    sbpl_xy_theta_cell_t(int x_, int y_, int theta_)$/;"	f	class:sbpl_xy_theta_cell_t
sbpl_xy_theta_cell_t	include/sbpl/utils/utils.h	/^class sbpl_xy_theta_cell_t$/;"	c
sbpl_xy_theta_pt_t	include/sbpl/utils/utils.h	/^    sbpl_xy_theta_pt_t()$/;"	f	class:sbpl_xy_theta_pt_t
sbpl_xy_theta_pt_t	include/sbpl/utils/utils.h	/^    sbpl_xy_theta_pt_t(double x_, double y_, double theta_)$/;"	f	class:sbpl_xy_theta_pt_t
sbpl_xy_theta_pt_t	include/sbpl/utils/utils.h	/^class sbpl_xy_theta_pt_t$/;"	c
theta	include/sbpl/utils/utils.h	/^    double theta;$/;"	m	class:sbpl_xy_theta_pt_t
theta	include/sbpl/utils/utils.h	/^    int theta;$/;"	m	class:sbpl_xy_theta_cell_t
updatedhvaluesV	include/sbpl/utils/utils.h	/^    std::vector<sbpl_BinaryHiddenVar_t> updatedhvaluesV; $/;"	m	struct:BELIEFSTATEWITHBINARYHVALS
x	include/sbpl/utils/utils.h	/^    double x;$/;"	m	class:sbpl_2Dpt_t
x	include/sbpl/utils/utils.h	/^    double x;$/;"	m	class:sbpl_xy_theta_pt_t
x	include/sbpl/utils/utils.h	/^    int x;$/;"	m	class:sbpl_2Dcell_t
x	include/sbpl/utils/utils.h	/^    int x;$/;"	m	class:sbpl_xy_theta_cell_t
y	include/sbpl/utils/utils.h	/^    double y;$/;"	m	class:sbpl_2Dpt_t
y	include/sbpl/utils/utils.h	/^    double y;$/;"	m	class:sbpl_xy_theta_pt_t
y	include/sbpl/utils/utils.h	/^    int y;$/;"	m	class:sbpl_2Dcell_t
y	include/sbpl/utils/utils.h	/^    int y;$/;"	m	class:sbpl_xy_theta_cell_t
genmprim	matlab/mprim/genmprim.m	/^function[] = genmprim(outfilename)$/;"	f
genmprim_unicycle	matlab/mprim/genmprim_unicycle.m	/^function[] = genmprim_unicycle(outfilename)$/;"	f
genmprim_unicycleplussideways	matlab/mprim/genmprim_unicycleplussideways.m	/^function[] = genmprim_unicycleplussideways(outfilename)$/;"	f
genmprim_unicycleplussidewaysplusbackturn	matlab/mprim/genmprim_unicycleplussidewaysplusbackturn.m	/^function[] = genmprim_unicycleplussidewaysplusbackturn(outfilename)$/;"	f
genmprim_unicycleplussidewaysplusbackturnplusdiag	matlab/mprim/genmprim_unicycleplussidewaysplusbackturnplusdiag.m	/^function[] = genmprim_unicycleplussidewaysplusbackturnplusdiag(outfilename)$/;"	f
genmprim_unicycleplussidewaysplusbackturn	matlab/mprim/rover_16.m	/^function[] = genmprim_unicycleplussidewaysplusbackturn(outfilename)$/;"	f
genmprim_unicycleplussidewaysplusbackturn	matlab/mprim/rover_32.m	/^function[] = genmprim_unicycleplussidewaysplusbackturn(outfilename)$/;"	f
radians	matlab/mprim/rover_32.m	/^function y = radians(deg)$/;"	f
plot_3Dpath	matlab/visualization/plot_3Dpath.m	/^function[] = plot_3Dpath(solfilename, mapfilename, resolution)$/;"	f
AddAllOutcomes	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::AddAllOutcomes(unsigned int SourceX1, unsigned int SourceX2, unsigned int SourceX3,$/;"	f	class:EnvironmentXXX
ComputeHeuristicValues	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::ComputeHeuristicValues()$/;"	f	class:EnvironmentXXX
CreateNewHashEntry	src/discrete_space_information/environment_XXX.cpp	/^EnvXXXHashEntry_t* EnvironmentXXX::CreateNewHashEntry(unsigned int X1, unsigned int X2, unsigned int X3,$/;"	f	class:EnvironmentXXX
CreateStartandGoalStates	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::CreateStartandGoalStates()$/;"	f	class:EnvironmentXXX
GETHASHBIN	src/discrete_space_information/environment_XXX.cpp	/^unsigned int EnvironmentXXX::GETHASHBIN(unsigned int X1, unsigned int X2, unsigned int X3, unsigned int X4)$/;"	f	class:EnvironmentXXX
GetFromToHeuristic	src/discrete_space_information/environment_XXX.cpp	/^int EnvironmentXXX::GetFromToHeuristic(int FromStateID, int ToStateID)$/;"	f	class:EnvironmentXXX
GetGoalHeuristic	src/discrete_space_information/environment_XXX.cpp	/^int EnvironmentXXX::GetGoalHeuristic(int stateID)$/;"	f	class:EnvironmentXXX
GetHashEntry	src/discrete_space_information/environment_XXX.cpp	/^EnvXXXHashEntry_t* EnvironmentXXX::GetHashEntry(unsigned int X1, unsigned int X2, unsigned int X3, unsigned int X4)$/;"	f	class:EnvironmentXXX
GetPreds	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::GetPreds(int TargetStateID, vector<int>* PredIDV, vector<int>* CostV)$/;"	f	class:EnvironmentXXX
GetStartHeuristic	src/discrete_space_information/environment_XXX.cpp	/^int EnvironmentXXX::GetStartHeuristic(int stateID)$/;"	f	class:EnvironmentXXX
GetSuccs	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::GetSuccs(int SourceStateID, vector<int>* SuccIDV, vector<int>* CostV)$/;"	f	class:EnvironmentXXX
InitializeEnv	src/discrete_space_information/environment_XXX.cpp	/^bool EnvironmentXXX::InitializeEnv(const char* sEnvFile)$/;"	f	class:EnvironmentXXX
InitializeEnvConfig	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::InitializeEnvConfig()$/;"	f	class:EnvironmentXXX
InitializeEnvironment	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::InitializeEnvironment()$/;"	f	class:EnvironmentXXX
InitializeMDPCfg	src/discrete_space_information/environment_XXX.cpp	/^bool EnvironmentXXX::InitializeMDPCfg(MDPConfig *MDPCfg)$/;"	f	class:EnvironmentXXX
PrintEnv_Config	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::PrintEnv_Config(FILE* fOut)$/;"	f	class:EnvironmentXXX
PrintHashTableHist	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::PrintHashTableHist()$/;"	f	class:EnvironmentXXX
PrintState	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::PrintState(int stateID, bool bVerbose, FILE* fOut \/*=NULL*\/)$/;"	f	class:EnvironmentXXX
ReadConfiguration	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::ReadConfiguration(FILE* fCfg)$/;"	f	class:EnvironmentXXX
SetAllActionsandAllOutcomes	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::SetAllActionsandAllOutcomes(CMDPSTATE* state)$/;"	f	class:EnvironmentXXX
SetAllPreds	src/discrete_space_information/environment_XXX.cpp	/^void EnvironmentXXX::SetAllPreds(CMDPSTATE* state)$/;"	f	class:EnvironmentXXX
SizeofCreatedEnv	src/discrete_space_information/environment_XXX.cpp	/^int EnvironmentXXX::SizeofCreatedEnv()$/;"	f	class:EnvironmentXXX
inthash	src/discrete_space_information/environment_XXX.cpp	/^static unsigned int inthash(unsigned int key)$/;"	f	file:
AreEquivalent	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::AreEquivalent(int StateID1, int StateID2)$/;"	f	class:EnvironmentNAV2D
ComputeHeuristicValues	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::ComputeHeuristicValues()$/;"	f	class:EnvironmentNAV2D
Computedxy	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::Computedxy()$/;"	f	class:EnvironmentNAV2D
CreateNewHashEntry	src/discrete_space_information/environment_nav2D.cpp	/^EnvNAV2DHashEntry_t* EnvironmentNAV2D::CreateNewHashEntry(int X, int Y)$/;"	f	class:EnvironmentNAV2D
EnvironmentNAV2D	src/discrete_space_information/environment_nav2D.cpp	/^EnvironmentNAV2D::EnvironmentNAV2D()$/;"	f	class:EnvironmentNAV2D
EuclideanDistance	src/discrete_space_information/environment_nav2D.cpp	/^static int EuclideanDistance(int X1, int Y1, int X2, int Y2)$/;"	f	file:
GETHASHBIN	src/discrete_space_information/environment_nav2D.cpp	/^unsigned int EnvironmentNAV2D::GETHASHBIN(unsigned int X1, unsigned int X2)$/;"	f	class:EnvironmentNAV2D
GetCoordFromState	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::GetCoordFromState(int stateID, int& x, int& y) const$/;"	f	class:EnvironmentNAV2D
GetEnvNavConfig	src/discrete_space_information/environment_nav2D.cpp	/^const EnvNAV2DConfig_t* EnvironmentNAV2D::GetEnvNavConfig()$/;"	f	class:EnvironmentNAV2D
GetEnvParms	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::GetEnvParms(int *size_x, int *size_y, int* startx, int* starty, int* goalx, int* goaly,$/;"	f	class:EnvironmentNAV2D
GetFromToHeuristic	src/discrete_space_information/environment_nav2D.cpp	/^int EnvironmentNAV2D::GetFromToHeuristic(int FromStateID, int ToStateID)$/;"	f	class:EnvironmentNAV2D
GetGoalHeuristic	src/discrete_space_information/environment_nav2D.cpp	/^int EnvironmentNAV2D::GetGoalHeuristic(int stateID)$/;"	f	class:EnvironmentNAV2D
GetHashEntry	src/discrete_space_information/environment_nav2D.cpp	/^EnvNAV2DHashEntry_t* EnvironmentNAV2D::GetHashEntry(int X, int Y)$/;"	f	class:EnvironmentNAV2D
GetMapCost	src/discrete_space_information/environment_nav2D.cpp	/^unsigned char EnvironmentNAV2D::GetMapCost(int x, int y)$/;"	f	class:EnvironmentNAV2D
GetPreds	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::GetPreds(int TargetStateID, vector<int>* PredIDV, vector<int>* CostV)$/;"	f	class:EnvironmentNAV2D
GetPredsofChangedEdges	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::GetPredsofChangedEdges(vector<nav2dcell_t> const * changedcellsV,$/;"	f	class:EnvironmentNAV2D
GetRandomNeighs	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::GetRandomNeighs(int stateID, std::vector<int>* NeighIDV, std::vector<int>* CLowV,$/;"	f	class:EnvironmentNAV2D
GetRandomPredsatDistance	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::GetRandomPredsatDistance(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CLowV)$/;"	f	class:EnvironmentNAV2D
GetRandomSuccsatDistance	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::GetRandomSuccsatDistance(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CLowV)$/;"	f	class:EnvironmentNAV2D
GetStartHeuristic	src/discrete_space_information/environment_nav2D.cpp	/^int EnvironmentNAV2D::GetStartHeuristic(int stateID)$/;"	f	class:EnvironmentNAV2D
GetStateFromCoord	src/discrete_space_information/environment_nav2D.cpp	/^int EnvironmentNAV2D::GetStateFromCoord(int x, int y)$/;"	f	class:EnvironmentNAV2D
GetSuccs	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::GetSuccs(int SourceStateID, vector<int>* SuccIDV, vector<int>* CostV)$/;"	f	class:EnvironmentNAV2D
GetSuccsofChangedEdges	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::GetSuccsofChangedEdges(vector<nav2dcell_t> const * changedcellsV,$/;"	f	class:EnvironmentNAV2D
InitGeneral	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::InitGeneral()$/;"	f	class:EnvironmentNAV2D
InitializeEnv	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::InitializeEnv(const char* sEnvFile)$/;"	f	class:EnvironmentNAV2D
InitializeEnv	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::InitializeEnv(int width, int height, const unsigned char* mapdata, int startx, int starty,$/;"	f	class:EnvironmentNAV2D
InitializeEnv	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::InitializeEnv(int width, int height, const unsigned char* mapdata, unsigned char obsthresh)$/;"	f	class:EnvironmentNAV2D
InitializeEnvConfig	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::InitializeEnvConfig()$/;"	f	class:EnvironmentNAV2D
InitializeEnvironment	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::InitializeEnvironment()$/;"	f	class:EnvironmentNAV2D
InitializeMDPCfg	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::InitializeMDPCfg(MDPConfig *MDPCfg)$/;"	f	class:EnvironmentNAV2D
IsObstacle	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::IsObstacle(int x, int y)$/;"	f	class:EnvironmentNAV2D
IsValidCell	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::IsValidCell(int X, int Y)$/;"	f	class:EnvironmentNAV2D
IsWithinMapCell	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::IsWithinMapCell(int X, int Y)$/;"	f	class:EnvironmentNAV2D
PrintEnv_Config	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::PrintEnv_Config(FILE* fOut)$/;"	f	class:EnvironmentNAV2D
PrintHashTableHist	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::PrintHashTableHist()$/;"	f	class:EnvironmentNAV2D
PrintState	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::PrintState(int stateID, bool bVerbose, FILE* fOut \/*=NULL*\/)$/;"	f	class:EnvironmentNAV2D
PrintTimeStat	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::PrintTimeStat(FILE* fOut)$/;"	f	class:EnvironmentNAV2D
ReadConfiguration	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::ReadConfiguration(FILE* fCfg)$/;"	f	class:EnvironmentNAV2D
SetAllActionsandAllOutcomes	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::SetAllActionsandAllOutcomes(CMDPSTATE* state)$/;"	f	class:EnvironmentNAV2D
SetAllPreds	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::SetAllPreds(CMDPSTATE* state)$/;"	f	class:EnvironmentNAV2D
SetConfiguration	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::SetConfiguration(int width, int height, const unsigned char* mapdata, int startx, int starty,$/;"	f	class:EnvironmentNAV2D
SetEnvParameter	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::SetEnvParameter(const char* parameter, int value)$/;"	f	class:EnvironmentNAV2D
SetGoal	src/discrete_space_information/environment_nav2D.cpp	/^int EnvironmentNAV2D::SetGoal(int x, int y)$/;"	f	class:EnvironmentNAV2D
SetGoalTolerance	src/discrete_space_information/environment_nav2D.cpp	/^void EnvironmentNAV2D::SetGoalTolerance(double tol_x, double tol_y, double tol_theta)$/;"	f	class:EnvironmentNAV2D
SetStart	src/discrete_space_information/environment_nav2D.cpp	/^int EnvironmentNAV2D::SetStart(int x, int y)$/;"	f	class:EnvironmentNAV2D
SizeofCreatedEnv	src/discrete_space_information/environment_nav2D.cpp	/^int EnvironmentNAV2D::SizeofCreatedEnv()$/;"	f	class:EnvironmentNAV2D
UpdateCost	src/discrete_space_information/environment_nav2D.cpp	/^bool EnvironmentNAV2D::UpdateCost(int x, int y, unsigned char newcost)$/;"	f	class:EnvironmentNAV2D
inthash	src/discrete_space_information/environment_nav2D.cpp	/^static unsigned int inthash(unsigned int key)$/;"	f	file:
time3_addallout	src/discrete_space_information/environment_nav2D.cpp	/^static clock_t time3_addallout = 0;$/;"	v	file:
time_createhash	src/discrete_space_information/environment_nav2D.cpp	/^static clock_t time_createhash = 0;$/;"	v	file:
time_gethash	src/discrete_space_information/environment_nav2D.cpp	/^static clock_t time_gethash = 0;$/;"	v	file:
time_getsuccs	src/discrete_space_information/environment_nav2D.cpp	/^static clock_t time_getsuccs = 0;$/;"	v	file:
~EnvironmentNAV2D	src/discrete_space_information/environment_nav2D.cpp	/^EnvironmentNAV2D::~EnvironmentNAV2D()$/;"	f	class:EnvironmentNAV2D
ComputeHeuristicValues	src/discrete_space_information/environment_nav2Duu.cpp	/^void EnvironmentNAV2DUU::ComputeHeuristicValues()$/;"	f	class:EnvironmentNAV2DUU
Computedxy	src/discrete_space_information/environment_nav2Duu.cpp	/^void EnvironmentNAV2DUU::Computedxy()$/;"	f	class:EnvironmentNAV2DUU
EnvironmentNAV2DUU	src/discrete_space_information/environment_nav2Duu.cpp	/^EnvironmentNAV2DUU::EnvironmentNAV2DUU()$/;"	f	class:EnvironmentNAV2DUU
GetFromToHeuristic	src/discrete_space_information/environment_nav2Duu.cpp	/^int EnvironmentNAV2DUU::GetFromToHeuristic(int FromStateID, int ToStateID)$/;"	f	class:EnvironmentNAV2DUU
GetGoalHeuristic	src/discrete_space_information/environment_nav2Duu.cpp	/^int EnvironmentNAV2DUU::GetGoalHeuristic(int stateID)$/;"	f	class:EnvironmentNAV2DUU
GetPreds	src/discrete_space_information/environment_nav2Duu.cpp	/^void EnvironmentNAV2DUU::GetPreds(int stateID, const vector<sbpl_BinaryHiddenVar_t>* updatedhvaluesV,$/;"	f	class:EnvironmentNAV2DUU
GetStartHeuristic	src/discrete_space_information/environment_nav2Duu.cpp	/^int EnvironmentNAV2DUU::GetStartHeuristic(int stateID)$/;"	f	class:EnvironmentNAV2DUU
InitGeneral	src/discrete_space_information/environment_nav2Duu.cpp	/^bool EnvironmentNAV2DUU::InitGeneral()$/;"	f	class:EnvironmentNAV2DUU
InitializeEnv	src/discrete_space_information/environment_nav2Duu.cpp	/^bool EnvironmentNAV2DUU::InitializeEnv(const char* sEnvFile)$/;"	f	class:EnvironmentNAV2DUU
InitializeEnv	src/discrete_space_information/environment_nav2Duu.cpp	/^bool EnvironmentNAV2DUU::InitializeEnv(int width, int height, const unsigned char* mapdata,$/;"	f	class:EnvironmentNAV2DUU
InitializeEnvConfig	src/discrete_space_information/environment_nav2Duu.cpp	/^void EnvironmentNAV2DUU::InitializeEnvConfig()$/;"	f	class:EnvironmentNAV2DUU
InitializeEnvironment	src/discrete_space_information/environment_nav2Duu.cpp	/^void EnvironmentNAV2DUU::InitializeEnvironment()$/;"	f	class:EnvironmentNAV2DUU
InitializeMDPCfg	src/discrete_space_information/environment_nav2Duu.cpp	/^bool EnvironmentNAV2DUU::InitializeMDPCfg(MDPConfig *MDPCfg)$/;"	f	class:EnvironmentNAV2DUU
IsValidRobotPosition	src/discrete_space_information/environment_nav2Duu.cpp	/^bool EnvironmentNAV2DUU::IsValidRobotPosition(int X, int Y)$/;"	f	class:EnvironmentNAV2DUU
IsWithinMapCell	src/discrete_space_information/environment_nav2Duu.cpp	/^bool EnvironmentNAV2DUU::IsWithinMapCell(int X, int Y)$/;"	f	class:EnvironmentNAV2DUU
NAV2DUU_ERR_EPS	src/discrete_space_information/environment_nav2Duu.cpp	42;"	d	file:
PrintEnv_Config	src/discrete_space_information/environment_nav2Duu.cpp	/^void EnvironmentNAV2DUU::PrintEnv_Config(FILE* fOut)$/;"	f	class:EnvironmentNAV2DUU
PrintState	src/discrete_space_information/environment_nav2Duu.cpp	/^void EnvironmentNAV2DUU::PrintState(int stateID, bool bVerbose, FILE* fOut \/*=NULL*\/)$/;"	f	class:EnvironmentNAV2DUU
ReadConfiguration	src/discrete_space_information/environment_nav2Duu.cpp	/^void EnvironmentNAV2DUU::ReadConfiguration(FILE* fCfg)$/;"	f	class:EnvironmentNAV2DUU
SetConfiguration	src/discrete_space_information/environment_nav2Duu.cpp	/^void EnvironmentNAV2DUU::SetConfiguration(int width, int height, const unsigned char* mapdata,$/;"	f	class:EnvironmentNAV2DUU
SetGoal	src/discrete_space_information/environment_nav2Duu.cpp	/^int EnvironmentNAV2DUU::SetGoal(int x, int y)$/;"	f	class:EnvironmentNAV2DUU
SetStart	src/discrete_space_information/environment_nav2Duu.cpp	/^int EnvironmentNAV2DUU::SetStart(int x, int y)$/;"	f	class:EnvironmentNAV2DUU
SizeofCreatedEnv	src/discrete_space_information/environment_nav2Duu.cpp	/^int EnvironmentNAV2DUU::SizeofCreatedEnv()$/;"	f	class:EnvironmentNAV2DUU
SizeofH	src/discrete_space_information/environment_nav2Duu.cpp	/^int EnvironmentNAV2DUU::SizeofH()$/;"	f	class:EnvironmentNAV2DUU
UpdateCost	src/discrete_space_information/environment_nav2Duu.cpp	/^bool EnvironmentNAV2DUU::UpdateCost(int x, int y, unsigned char newcost)$/;"	f	class:EnvironmentNAV2DUU
CalculateFootprintForPose	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::CalculateFootprintForPose(sbpl_xy_theta_pt_t pose, vector<sbpl_2Dcell_t>* footprint)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
CalculateFootprintForPose	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::CalculateFootprintForPose(sbpl_xy_theta_pt_t pose, vector<sbpl_2Dcell_t>* footprint,$/;"	f	class:EnvironmentNAVXYTHETALATTICE
CheckQuant	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::CheckQuant(FILE* fOut)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
ComputeHeuristicValues	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::ComputeHeuristicValues()$/;"	f	class:EnvironmentNAVXYTHETALATTICE
ComputeReplanningData	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::ComputeReplanningData()$/;"	f	class:EnvironmentNAVXYTHETALATTICE
ComputeReplanningDataforAction	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::ComputeReplanningDataforAction(EnvNAVXYTHETALATAction_t* action)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
ConvertStateIDPathintoXYThetaPath	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::ConvertStateIDPathintoXYThetaPath(vector<int>* stateIDPath,$/;"	f	class:EnvironmentNAVXYTHETALAT
CreateNewHashEntry_hash	src/discrete_space_information/environment_navxythetalat.cpp	/^EnvNAVXYTHETALATHashEntry_t* EnvironmentNAVXYTHETALAT::CreateNewHashEntry_hash(int X, int Y, int Theta)$/;"	f	class:EnvironmentNAVXYTHETALAT
CreateNewHashEntry_lookup	src/discrete_space_information/environment_navxythetalat.cpp	/^EnvNAVXYTHETALATHashEntry_t* EnvironmentNAVXYTHETALAT::CreateNewHashEntry_lookup(int X, int Y, int Theta)$/;"	f	class:EnvironmentNAVXYTHETALAT
DeprecatedPrecomputeActions	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::DeprecatedPrecomputeActions()$/;"	f	class:EnvironmentNAVXYTHETALATTICE
EnsureHeuristicsUpdated	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::EnsureHeuristicsUpdated(bool bGoalHeuristics)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
EnvironmentNAVXYTHETALATTICE	src/discrete_space_information/environment_navxythetalat.cpp	/^EnvironmentNAVXYTHETALATTICE::EnvironmentNAVXYTHETALATTICE()$/;"	f	class:EnvironmentNAVXYTHETALATTICE
EuclideanDistance_m	src/discrete_space_information/environment_navxythetalat.cpp	/^double EnvironmentNAVXYTHETALATTICE::EuclideanDistance_m(int X1, int Y1, int X2, int Y2)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GETHASHBIN	src/discrete_space_information/environment_navxythetalat.cpp	/^unsigned int EnvironmentNAVXYTHETALAT::GETHASHBIN(unsigned int X1, unsigned int X2, unsigned int Theta)$/;"	f	class:EnvironmentNAVXYTHETALAT
GetActionCost	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALATTICE::GetActionCost(int SourceX, int SourceY, int SourceTheta,$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetCoordFromState	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::GetCoordFromState(int stateID, int& x, int& y, int& theta) const$/;"	f	class:EnvironmentNAVXYTHETALAT
GetEnvNavConfig	src/discrete_space_information/environment_navxythetalat.cpp	/^const EnvNAVXYTHETALATConfig_t* EnvironmentNAVXYTHETALATTICE::GetEnvNavConfig()$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetEnvParameter	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALATTICE::GetEnvParameter(const char* parameter)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetEnvParms	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::GetEnvParms(int *size_x, int *size_y, double* startx, double* starty,$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetEnvParms	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::GetEnvParms(int *size_x, int *size_y, int* num_thetas, double* startx,$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetFromToHeuristic	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALAT::GetFromToHeuristic(int FromStateID, int ToStateID)$/;"	f	class:EnvironmentNAVXYTHETALAT
GetGoalHeuristic	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALAT::GetGoalHeuristic(int stateID)$/;"	f	class:EnvironmentNAVXYTHETALAT
GetHashEntry_hash	src/discrete_space_information/environment_navxythetalat.cpp	/^EnvNAVXYTHETALATHashEntry_t* EnvironmentNAVXYTHETALAT::GetHashEntry_hash(int X, int Y, int Theta)$/;"	f	class:EnvironmentNAVXYTHETALAT
GetHashEntry_lookup	src/discrete_space_information/environment_navxythetalat.cpp	/^EnvNAVXYTHETALATHashEntry_t* EnvironmentNAVXYTHETALAT::GetHashEntry_lookup(int X, int Y, int Theta)$/;"	f	class:EnvironmentNAVXYTHETALAT
GetLazySuccs	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::GetLazySuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost,$/;"	f	class:EnvironmentNAVXYTHETALAT
GetLazySuccs	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::GetLazySuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetLazySuccsWithUniqueIds	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::GetLazySuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost,$/;"	f	class:EnvironmentNAVXYTHETALAT
GetLazySuccsWithUniqueIds	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::GetLazySuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetMapCost	src/discrete_space_information/environment_navxythetalat.cpp	/^unsigned char EnvironmentNAVXYTHETALATTICE::GetMapCost(int x, int y)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetPreds	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::GetPreds(int TargetStateID, vector<int>* PredIDV, vector<int>* CostV)$/;"	f	class:EnvironmentNAVXYTHETALAT
GetPredsofChangedEdges	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::GetPredsofChangedEdges(vector<nav2dcell_t> const * changedcellsV,$/;"	f	class:EnvironmentNAVXYTHETALAT
GetStartHeuristic	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALAT::GetStartHeuristic(int stateID)$/;"	f	class:EnvironmentNAVXYTHETALAT
GetStateFromCoord	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALAT::GetStateFromCoord(int x, int y, int theta)$/;"	f	class:EnvironmentNAVXYTHETALAT
GetSuccs	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::GetSuccs(int SourceStateID, vector<int>* SuccIDV, vector<int>* CostV, vector<$/;"	f	class:EnvironmentNAVXYTHETALAT
GetSuccs	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::GetSuccs(int SourceStateID, vector<int>* SuccIDV, vector<int>* CostV)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetSuccsWithUniqueIds	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::GetSuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV,$/;"	f	class:EnvironmentNAVXYTHETALAT
GetSuccsWithUniqueIds	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::GetSuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV){$/;"	f	class:EnvironmentNAVXYTHETALATTICE
GetSuccsofChangedEdges	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::GetSuccsofChangedEdges(vector<nav2dcell_t> const * changedcellsV,$/;"	f	class:EnvironmentNAVXYTHETALAT
GetTrueCost	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALAT::GetTrueCost(int parentID, int childID){$/;"	f	class:EnvironmentNAVXYTHETALAT
InitGeneral	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::InitGeneral(vector<SBPL_xytheta_mprimitive>* motionprimitiveV)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
InitializeEnv	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::InitializeEnv(const char* sEnvFile)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
InitializeEnv	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::InitializeEnv(const char* sEnvFile, const vector<sbpl_2Dpt_t>& perimeterptsV,$/;"	f	class:EnvironmentNAVXYTHETALATTICE
InitializeEnv	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::InitializeEnv(int width, int height, const unsigned char* mapdata, double startx,$/;"	f	class:EnvironmentNAVXYTHETALATTICE
InitializeEnv	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::InitializeEnv(int width, int height, const vector<sbpl_2Dpt_t> & perimeterptsV,$/;"	f	class:EnvironmentNAVXYTHETALATTICE
InitializeEnvConfig	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::InitializeEnvConfig(vector<SBPL_xytheta_mprimitive>* motionprimitiveV)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
InitializeEnvironment	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::InitializeEnvironment()$/;"	f	class:EnvironmentNAVXYTHETALAT
InitializeMDPCfg	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::InitializeMDPCfg(MDPConfig *MDPCfg)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
IsObstacle	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::IsObstacle(int x, int y)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
IsValidCell	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::IsValidCell(int X, int Y)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
IsValidConfiguration	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::IsValidConfiguration(int X, int Y, int Theta)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
IsWithinMapCell	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::IsWithinMapCell(int X, int Y)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
PoseContToDisc	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::PoseContToDisc(double px, double py, double pth, int &ix, int &iy, int &ith) const$/;"	f	class:EnvironmentNAVXYTHETALATTICE
PoseDiscToCont	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::PoseDiscToCont(int ix, int iy, int ith, double &px, double &py, double &pth) const$/;"	f	class:EnvironmentNAVXYTHETALATTICE
PrecomputeActionswithBaseMotionPrimitive	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::PrecomputeActionswithBaseMotionPrimitive($/;"	f	class:EnvironmentNAVXYTHETALATTICE
PrecomputeActionswithCompleteMotionPrimitive	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::PrecomputeActionswithCompleteMotionPrimitive($/;"	f	class:EnvironmentNAVXYTHETALATTICE
PrintEnv_Config	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::PrintEnv_Config(FILE* fOut)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
PrintHashTableHist	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::PrintHashTableHist(FILE* fOut)$/;"	f	class:EnvironmentNAVXYTHETALAT
PrintHeuristicValues	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::PrintHeuristicValues()$/;"	f	class:EnvironmentNAVXYTHETALATTICE
PrintState	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::PrintState(int stateID, bool bVerbose, FILE* fOut \/*=NULL*\/)$/;"	f	class:EnvironmentNAVXYTHETALAT
PrintTimeStat	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::PrintTimeStat(FILE* fOut)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
ReadConfiguration	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::ReadConfiguration(FILE* fCfg)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
ReadMotionPrimitives	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::ReadMotionPrimitives(FILE* fMotPrims)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
ReadinCell	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::ReadinCell(sbpl_xy_theta_cell_t* cell, FILE* fIn)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
ReadinMotionPrimitive	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::ReadinMotionPrimitive(SBPL_xytheta_mprimitive* pMotPrim, FILE* fIn)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
ReadinPose	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::ReadinPose(sbpl_xy_theta_pt_t* pose, FILE* fIn)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
RemoveSourceFootprint	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::RemoveSourceFootprint(sbpl_xy_theta_pt_t sourcepose,$/;"	f	class:EnvironmentNAVXYTHETALATTICE
SetAllActionsandAllOutcomes	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALAT::SetAllActionsandAllOutcomes(CMDPSTATE* state)$/;"	f	class:EnvironmentNAVXYTHETALAT
SetAllPreds	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::SetAllPreds(CMDPSTATE* state)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
SetConfiguration	src/discrete_space_information/environment_navxythetalat.cpp	/^void EnvironmentNAVXYTHETALATTICE::SetConfiguration(int width, int height, const unsigned char* mapdata, int startx,$/;"	f	class:EnvironmentNAVXYTHETALATTICE
SetEnvParameter	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::SetEnvParameter(const char* parameter, int value)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
SetGoal	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALAT::SetGoal(double x_m, double y_m, double theta_rad)$/;"	f	class:EnvironmentNAVXYTHETALAT
SetMap	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::SetMap(const unsigned char* mapdata)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
SetStart	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALAT::SetStart(double x_m, double y_m, double theta_rad)$/;"	f	class:EnvironmentNAVXYTHETALAT
SizeofCreatedEnv	src/discrete_space_information/environment_navxythetalat.cpp	/^int EnvironmentNAVXYTHETALAT::SizeofCreatedEnv()$/;"	f	class:EnvironmentNAVXYTHETALAT
UpdateCost	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALATTICE::UpdateCost(int x, int y, unsigned char newcost)$/;"	f	class:EnvironmentNAVXYTHETALATTICE
XYTHETA2INDEX	src/discrete_space_information/environment_navxythetalat.cpp	50;"	d	file:
checks	src/discrete_space_information/environment_navxythetalat.cpp	/^static long int checks = 0;$/;"	v	file:
inthash	src/discrete_space_information/environment_navxythetalat.cpp	/^static unsigned int inthash(unsigned int key)$/;"	f	file:
isGoal	src/discrete_space_information/environment_navxythetalat.cpp	/^bool EnvironmentNAVXYTHETALAT::isGoal(int id){$/;"	f	class:EnvironmentNAVXYTHETALAT
time3_addallout	src/discrete_space_information/environment_navxythetalat.cpp	/^static clock_t time3_addallout = 0;$/;"	v	file:
time_createhash	src/discrete_space_information/environment_navxythetalat.cpp	/^static clock_t time_createhash = 0;$/;"	v	file:
time_gethash	src/discrete_space_information/environment_navxythetalat.cpp	/^static clock_t time_gethash = 0;$/;"	v	file:
time_getsuccs	src/discrete_space_information/environment_navxythetalat.cpp	/^static clock_t time_getsuccs = 0;$/;"	v	file:
~EnvironmentNAVXYTHETALAT	src/discrete_space_information/environment_navxythetalat.cpp	/^EnvironmentNAVXYTHETALAT::~EnvironmentNAVXYTHETALAT()$/;"	f	class:EnvironmentNAVXYTHETALAT
~EnvironmentNAVXYTHETALATTICE	src/discrete_space_information/environment_navxythetalat.cpp	/^EnvironmentNAVXYTHETALATTICE::~EnvironmentNAVXYTHETALATTICE()$/;"	f	class:EnvironmentNAVXYTHETALATTICE
EnvironmentNAVXYTHETAMLEVLAT	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^EnvironmentNAVXYTHETAMLEVLAT::EnvironmentNAVXYTHETAMLEVLAT()$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
GetActionCost	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^int EnvironmentNAVXYTHETAMLEVLAT::GetActionCost(int SourceX, int SourceY, int SourceTheta,$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
GetActionCostacrossAddLevels	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^int EnvironmentNAVXYTHETAMLEVLAT::GetActionCostacrossAddLevels(int SourceX, int SourceY, int SourceTheta,$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
GetMapCost	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^unsigned char EnvironmentNAVXYTHETAMLEVLAT::GetMapCost(int X, int Y)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
GetMapCost	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^unsigned char EnvironmentNAVXYTHETAMLEVLAT::GetMapCost(int X, int Y, int levind)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
InitializeAdditionalLevels	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^bool EnvironmentNAVXYTHETAMLEVLAT::InitializeAdditionalLevels(int numofadditionalzlevs_in,$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
IsObstacle	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^bool EnvironmentNAVXYTHETAMLEVLAT::IsObstacle(int X, int Y)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
IsObstacle	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^bool EnvironmentNAVXYTHETAMLEVLAT::IsObstacle(int X, int Y, int levind)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
IsValidCell	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^bool EnvironmentNAVXYTHETAMLEVLAT::IsValidCell(int X, int Y)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
IsValidCell	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^bool EnvironmentNAVXYTHETAMLEVLAT::IsValidCell(int X, int Y, int levind)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
IsValidConfiguration	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^bool EnvironmentNAVXYTHETAMLEVLAT::IsValidConfiguration(int X, int Y, int Theta)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
Set2DMapforAddLev	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^bool EnvironmentNAVXYTHETAMLEVLAT::Set2DMapforAddLev(const unsigned char* mapdata, int levind)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
Set2DMapforAddLev	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^bool EnvironmentNAVXYTHETAMLEVLAT::Set2DMapforAddLev(const unsigned char** NewGrid2D, int levind)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
UpdateCostinAddLev	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^bool EnvironmentNAVXYTHETAMLEVLAT::UpdateCostinAddLev(int x, int y, unsigned char newcost, int zlev)$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
checks	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^static long int checks = 0;$/;"	v	file:
time3_addallout	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^static clock_t time3_addallout = 0;$/;"	v	file:
time_createhash	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^static clock_t time_createhash = 0;$/;"	v	file:
time_gethash	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^static clock_t time_gethash = 0;$/;"	v	file:
time_getsuccs	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^static clock_t time_getsuccs = 0;$/;"	v	file:
~EnvironmentNAVXYTHETAMLEVLAT	src/discrete_space_information/environment_navxythetamlevlat.cpp	/^EnvironmentNAVXYTHETAMLEVLAT::~EnvironmentNAVXYTHETAMLEVLAT()$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
AreEquivalent	src/discrete_space_information/environment_robarm.cpp	/^bool EnvironmentROBARM::AreEquivalent(int State1ID, int State2ID)$/;"	f	class:EnvironmentROBARM
COSTMULT	src/discrete_space_information/environment_robarm.cpp	43;"	d	file:
Cell2ContXY	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::Cell2ContXY(int x, int y, double *pX, double *pY)$/;"	f	class:EnvironmentROBARM
ComputeContAngles	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::ComputeContAngles(short unsigned int coord[NUMOFLINKS], double angle[NUMOFLINKS])$/;"	f	class:EnvironmentROBARM
ComputeCoord	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::ComputeCoord(double angle[NUMOFLINKS], short unsigned int coord[NUMOFLINKS])$/;"	f	class:EnvironmentROBARM
ComputeEndEffectorPos	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::ComputeEndEffectorPos(double angles[NUMOFLINKS], short unsigned int* pX, short unsigned int* pY)$/;"	f	class:EnvironmentROBARM
ComputeHeuristicValues	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::ComputeHeuristicValues()$/;"	f	class:EnvironmentROBARM
ContXY2Cell	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::ContXY2Cell(double x, double y, short unsigned int* pX, short unsigned int *pY)$/;"	f	class:EnvironmentROBARM
Create2DStateSpace	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::Create2DStateSpace(State2D*** statespace2D)$/;"	f	class:EnvironmentROBARM
CreateNewHashEntry	src/discrete_space_information/environment_robarm.cpp	/^EnvROBARMHashEntry_t* EnvironmentROBARM::CreateNewHashEntry(short unsigned int* coord, int numofcoord,$/;"	f	class:EnvironmentROBARM
DIRECTIONS	src/discrete_space_information/environment_robarm.cpp	51;"	d	file:
Delete2DStateSpace	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::Delete2DStateSpace(State2D*** statespace2D)$/;"	f	class:EnvironmentROBARM
DiscretizeAngles	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::DiscretizeAngles()$/;"	f	class:EnvironmentROBARM
GETHASHBIN	src/discrete_space_information/environment_robarm.cpp	/^unsigned int EnvironmentROBARM::GETHASHBIN(short unsigned int* coord, int numofcoord)$/;"	f	class:EnvironmentROBARM
GetEdgeCost	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::GetEdgeCost(int FromStateID, int ToStateID)$/;"	f	class:EnvironmentROBARM
GetFromToHeuristic	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::GetFromToHeuristic(int FromStateID, int ToStateID)$/;"	f	class:EnvironmentROBARM
GetGoalHeuristic	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::GetGoalHeuristic(int stateID)$/;"	f	class:EnvironmentROBARM
GetHashEntry	src/discrete_space_information/environment_robarm.cpp	/^EnvROBARMHashEntry_t* EnvironmentROBARM::GetHashEntry(short unsigned int* coord, int numofcoord, bool bIsGoal)$/;"	f	class:EnvironmentROBARM
GetHeurBasedonCoord	src/discrete_space_information/environment_robarm.cpp	/^unsigned int EnvironmentROBARM::GetHeurBasedonCoord(short unsigned int coord[NUMOFLINKS])$/;"	f	class:EnvironmentROBARM
GetPreds	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::GetPreds(int TargetStateID, vector<int>* PredIDV, vector<int>* CostV)$/;"	f	class:EnvironmentROBARM
GetRandomState	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::GetRandomState()$/;"	f	class:EnvironmentROBARM
GetRandomSuccsatDistance	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::GetRandomSuccsatDistance(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CLowV)$/;"	f	class:EnvironmentROBARM
GetStartHeuristic	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::GetStartHeuristic(int stateID)$/;"	f	class:EnvironmentROBARM
GetSuccs	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::GetSuccs(int SourceStateID, vector<int>* SuccIDV, vector<int>* CostV)$/;"	f	class:EnvironmentROBARM
InitializeEnv	src/discrete_space_information/environment_robarm.cpp	/^bool EnvironmentROBARM::InitializeEnv(const char* sEnvFile)$/;"	f	class:EnvironmentROBARM
InitializeEnvConfig	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::InitializeEnvConfig()$/;"	f	class:EnvironmentROBARM
InitializeEnvironment	src/discrete_space_information/environment_robarm.cpp	/^bool EnvironmentROBARM::InitializeEnvironment()$/;"	f	class:EnvironmentROBARM
InitializeMDPCfg	src/discrete_space_information/environment_robarm.cpp	/^bool EnvironmentROBARM::InitializeMDPCfg(MDPConfig *MDPCfg)$/;"	f	class:EnvironmentROBARM
InitializeState2D	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::InitializeState2D(State2D* state, short unsigned int x, short unsigned int y)$/;"	f	class:EnvironmentROBARM
IsValidCoord	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::IsValidCoord(short unsigned int coord[NUMOFLINKS], char** Grid2D \/*=NULL*\/,$/;"	f	class:EnvironmentROBARM
IsValidLineSegment	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::IsValidLineSegment(double x0, double y0, double x1, double y1, char **Grid2D,$/;"	f	class:EnvironmentROBARM
PrintEnv_Config	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::PrintEnv_Config(FILE* fOut)$/;"	f	class:EnvironmentROBARM
PrintHashTableHist	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::PrintHashTableHist()$/;"	f	class:EnvironmentROBARM
PrintHeader	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::PrintHeader(FILE* fOut)$/;"	f	class:EnvironmentROBARM
PrintState	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::PrintState(int stateID, bool bVerbose, FILE* fOut \/*=NULL*\/)$/;"	f	class:EnvironmentROBARM
PrintSuccGoal	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::PrintSuccGoal(int SourceStateID, int costtogoal, bool bVerbose, bool bLocal \/*=false*\/,$/;"	f	class:EnvironmentROBARM
ReInitializeState2D	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::ReInitializeState2D(State2D* state)$/;"	f	class:EnvironmentROBARM
ReadConfiguration	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::ReadConfiguration(FILE* fCfg)$/;"	f	class:EnvironmentROBARM
Search2DwithQueue	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::Search2DwithQueue(State2D** statespace, int* HeurGrid, int searchstartx, int searchstarty)$/;"	f	class:EnvironmentROBARM
SetAllActionsandAllOutcomes	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::SetAllActionsandAllOutcomes(CMDPSTATE* state)$/;"	f	class:EnvironmentROBARM
SetAllPreds	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::SetAllPreds(CMDPSTATE* state)$/;"	f	class:EnvironmentROBARM
SizeofCreatedEnv	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::SizeofCreatedEnv()$/;"	f	class:EnvironmentROBARM
XYTO2DIND	src/discrete_space_information/environment_robarm.cpp	49;"	d	file:
cost	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::cost(short unsigned int state1coord[], short unsigned int state2coord[])$/;"	f	class:EnvironmentROBARM
distanceincoord	src/discrete_space_information/environment_robarm.cpp	/^int EnvironmentROBARM::distanceincoord(unsigned short* statecoord1, unsigned short* statecoord2)$/;"	f	class:EnvironmentROBARM
dx	src/discrete_space_information/environment_robarm.cpp	/^int dx[DIRECTIONS] = {1, 1, 1, 0, 0, -1, -1, -1};$/;"	v
dy	src/discrete_space_information/environment_robarm.cpp	/^int dy[DIRECTIONS] = {1, 0, -1, 1, -1, -1, 0, 1};$/;"	v
inthash	src/discrete_space_information/environment_robarm.cpp	/^static unsigned int inthash(unsigned int key)$/;"	f	file:
printangles	src/discrete_space_information/environment_robarm.cpp	/^void EnvironmentROBARM::printangles(FILE* fOut, short unsigned int* coord, bool bGoal, bool bVerbose, bool bLocal)$/;"	f	class:EnvironmentROBARM
DEBUG	src/include/sbpl/config.h	53;"	d
ERR_EPS	src/include/sbpl/config.h	63;"	d
MEM_CHECK	src/include/sbpl/config.h	47;"	d
SBPL_DEBUG	src/include/sbpl/config.h	84;"	d
SBPL_DEBUG	src/include/sbpl/config.h	92;"	d
SBPL_DEBUG	src/include/sbpl/config.h	99;"	d
SBPL_DEBUG_NAMED	src/include/sbpl/config.h	100;"	d
SBPL_DEBUG_NAMED	src/include/sbpl/config.h	110;"	d
SBPL_DEBUG_NAMED	src/include/sbpl/config.h	85;"	d
SBPL_DEBUG_NAMED	src/include/sbpl/config.h	93;"	d
SBPL_ERROR	src/include/sbpl/config.h	103;"	d
SBPL_ERROR	src/include/sbpl/config.h	88;"	d
SBPL_ERROR	src/include/sbpl/config.h	96;"	d
SBPL_FATAL	src/include/sbpl/config.h	104;"	d
SBPL_FATAL	src/include/sbpl/config.h	89;"	d
SBPL_FATAL	src/include/sbpl/config.h	97;"	d
SBPL_FCLOSE	src/include/sbpl/config.h	113;"	d
SBPL_FCLOSE	src/include/sbpl/config.h	120;"	d
SBPL_FCLOSE	src/include/sbpl/config.h	126;"	d
SBPL_FFLUSH	src/include/sbpl/config.h	116;"	d
SBPL_FFLUSH	src/include/sbpl/config.h	123;"	d
SBPL_FFLUSH	src/include/sbpl/config.h	129;"	d
SBPL_FFLUSH_TEXT_FP	src/include/sbpl/config.h	/^typedef int (*SBPL_FFLUSH_TEXT_FP)(FILE*);$/;"	t
SBPL_FOPEN	src/include/sbpl/config.h	112;"	d
SBPL_FOPEN	src/include/sbpl/config.h	119;"	d
SBPL_FOPEN	src/include/sbpl/config.h	125;"	d
SBPL_FPRINTF	src/include/sbpl/config.h	115;"	d
SBPL_FPRINTF	src/include/sbpl/config.h	122;"	d
SBPL_FPRINTF	src/include/sbpl/config.h	128;"	d
SBPL_INFO	src/include/sbpl/config.h	101;"	d
SBPL_INFO	src/include/sbpl/config.h	86;"	d
SBPL_INFO	src/include/sbpl/config.h	94;"	d
SBPL_LEVEL_DEBUG	src/include/sbpl/config.h	66;"	d
SBPL_LEVEL_ERROR	src/include/sbpl/config.h	69;"	d
SBPL_LEVEL_FATAL	src/include/sbpl/config.h	70;"	d
SBPL_LEVEL_INFO	src/include/sbpl/config.h	67;"	d
SBPL_LEVEL_NONE	src/include/sbpl/config.h	65;"	d
SBPL_LEVEL_WARN	src/include/sbpl/config.h	68;"	d
SBPL_PRINTF	src/include/sbpl/config.h	114;"	d
SBPL_PRINTF	src/include/sbpl/config.h	121;"	d
SBPL_PRINTF	src/include/sbpl/config.h	127;"	d
SBPL_PRINT_TEXT_FP	src/include/sbpl/config.h	/^typedef int (*SBPL_PRINT_TEXT_FP)(int level, const char*);$/;"	t
SBPL_WARN	src/include/sbpl/config.h	102;"	d
SBPL_WARN	src/include/sbpl/config.h	87;"	d
SBPL_WARN	src/include/sbpl/config.h	95;"	d
TIME_DEBUG	src/include/sbpl/config.h	58;"	d
USE_HEUR	src/include/sbpl/config.h	41;"	d
__CONFIG_H_	src/include/sbpl/config.h	36;"	d
AreEquivalent	src/include/sbpl/discrete_space_information/environment.h	/^    virtual bool AreEquivalent(int StateID1, int StateID2)$/;"	f	class:DiscreteSpaceInformation
DiscreteSpaceInformation	src/include/sbpl/discrete_space_information/environment.h	/^    DiscreteSpaceInformation()$/;"	f	class:DiscreteSpaceInformation
DiscreteSpaceInformation	src/include/sbpl/discrete_space_information/environment.h	/^class DiscreteSpaceInformation$/;"	c
EnsureHeuristicsUpdated	src/include/sbpl/discrete_space_information/environment.h	/^    virtual void EnsureHeuristicsUpdated(bool bGoalHeuristics)$/;"	f	class:DiscreteSpaceInformation
GetExpandedStates	src/include/sbpl/discrete_space_information/environment.h	/^    virtual std::vector<int> GetExpandedStates()$/;"	f	class:DiscreteSpaceInformation
GetLazyPreds	src/include/sbpl/discrete_space_information/environment.h	/^    virtual void GetLazyPreds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:DiscreteSpaceInformation
GetLazyPredsWithUniqueIds	src/include/sbpl/discrete_space_information/environment.h	/^    virtual void GetLazyPredsWithUniqueIds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:DiscreteSpaceInformation
GetLazySuccs	src/include/sbpl/discrete_space_information/environment.h	/^    virtual void GetLazySuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:DiscreteSpaceInformation
GetLazySuccsWithUniqueIds	src/include/sbpl/discrete_space_information/environment.h	/^    virtual void GetLazySuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:DiscreteSpaceInformation
GetPredsWithUniqueIds	src/include/sbpl/discrete_space_information/environment.h	/^    virtual void GetPredsWithUniqueIds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV){$/;"	f	class:DiscreteSpaceInformation
GetRandomPredsatDistance	src/include/sbpl/discrete_space_information/environment.h	/^    virtual void GetRandomPredsatDistance(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CLowV)$/;"	f	class:DiscreteSpaceInformation
GetRandomSuccsatDistance	src/include/sbpl/discrete_space_information/environment.h	/^    virtual void GetRandomSuccsatDistance(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CLowV)$/;"	f	class:DiscreteSpaceInformation
GetSuccsWithUniqueIds	src/include/sbpl/discrete_space_information/environment.h	/^    virtual void GetSuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV){$/;"	f	class:DiscreteSpaceInformation
GetTrueCost	src/include/sbpl/discrete_space_information/environment.h	/^    virtual int GetTrueCost(int parentID, int childID){$/;"	f	class:DiscreteSpaceInformation
SetEnvParameter	src/include/sbpl/discrete_space_information/environment.h	/^    virtual bool SetEnvParameter(const char* parameter, int value)$/;"	f	class:DiscreteSpaceInformation
StateID2IndexMapping	src/include/sbpl/discrete_space_information/environment.h	/^    std::vector<int*> StateID2IndexMapping;$/;"	m	class:DiscreteSpaceInformation
__ENVIRONMENT_H_	src/include/sbpl/discrete_space_information/environment.h	31;"	d
fDeb	src/include/sbpl/discrete_space_information/environment.h	/^    FILE* fDeb;$/;"	m	class:DiscreteSpaceInformation
isGoal	src/include/sbpl/discrete_space_information/environment.h	/^    virtual bool isGoal(int id){$/;"	f	class:DiscreteSpaceInformation
~DiscreteSpaceInformation	src/include/sbpl/discrete_space_information/environment.h	/^    virtual ~DiscreteSpaceInformation()$/;"	f	class:DiscreteSpaceInformation
Coord2StateIDHashTable	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    std::vector<EnvXXXHashEntry_t*>* Coord2StateIDHashTable;$/;"	m	struct:__anon9
ENVXXXHASHENTRY	src/include/sbpl/discrete_space_information/environment_XXX.h	/^typedef struct ENVXXXHASHENTRY$/;"	s
ENV_XXX_CONFIG	src/include/sbpl/discrete_space_information/environment_XXX.h	/^typedef struct ENV_XXX_CONFIG$/;"	s
EnvXXX	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    EnvironmentXXX_t EnvXXX;$/;"	m	class:EnvironmentXXX
EnvXXXCfg	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    EnvXXXConfig_t EnvXXXCfg;$/;"	m	class:EnvironmentXXX
EnvXXXConfig_t	src/include/sbpl/discrete_space_information/environment_XXX.h	/^} EnvXXXConfig_t;$/;"	t	typeref:struct:ENV_XXX_CONFIG
EnvXXXHashEntry_t	src/include/sbpl/discrete_space_information/environment_XXX.h	/^} EnvXXXHashEntry_t;$/;"	t	typeref:struct:ENVXXXHASHENTRY
EnvironmentXXX	src/include/sbpl/discrete_space_information/environment_XXX.h	/^class EnvironmentXXX : public DiscreteSpaceInformation$/;"	c
EnvironmentXXX_t	src/include/sbpl/discrete_space_information/environment_XXX.h	/^} EnvironmentXXX_t;$/;"	t	typeref:struct:__anon9
GoalX1	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int GoalX1;$/;"	m	struct:ENV_XXX_CONFIG
GoalX2	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int GoalX2;$/;"	m	struct:ENV_XXX_CONFIG
GoalX3	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int GoalX3;$/;"	m	struct:ENV_XXX_CONFIG
GoalX4	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int GoalX4;$/;"	m	struct:ENV_XXX_CONFIG
HashTableSize	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    int HashTableSize;$/;"	m	struct:__anon9
StartX1	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int StartX1;$/;"	m	struct:ENV_XXX_CONFIG
StartX2	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int StartX2;$/;"	m	struct:ENV_XXX_CONFIG
StartX3	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int StartX3;$/;"	m	struct:ENV_XXX_CONFIG
StartX4	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int StartX4;$/;"	m	struct:ENV_XXX_CONFIG
StateID2CoordTable	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    std::vector<EnvXXXHashEntry_t*> StateID2CoordTable;$/;"	m	struct:__anon9
X1	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int X1;$/;"	m	struct:ENVXXXHASHENTRY
X2	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int X2;$/;"	m	struct:ENVXXXHASHENTRY
X3	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int X3;$/;"	m	struct:ENVXXXHASHENTRY
X4	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    unsigned int X4;$/;"	m	struct:ENVXXXHASHENTRY
XXX_MAXACTIONSWIDTH	src/include/sbpl/discrete_space_information/environment_XXX.h	37;"	d
__ENVIRONMENT_XXX_H_	src/include/sbpl/discrete_space_information/environment_XXX.h	31;"	d
goalstateid	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    int goalstateid;$/;"	m	struct:__anon9
startstateid	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    int startstateid;$/;"	m	struct:__anon9
stateID	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    int stateID;$/;"	m	struct:ENVXXXHASHENTRY
~EnvironmentXXX	src/include/sbpl/discrete_space_information/environment_XXX.h	/^    ~EnvironmentXXX() { }$/;"	f	class:EnvironmentXXX
Coord2StateIDHashTable	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    std::vector<EnvNAV2DHashEntry_t*>* Coord2StateIDHashTable;$/;"	m	struct:__anon8
ENVHASHENTRY	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^typedef struct ENVHASHENTRY$/;"	s
ENVNAV2D_COSTMULT	src/include/sbpl/discrete_space_information/environment_nav2D.h	38;"	d
ENVNAV2D_DEFAULTOBSTHRESH	src/include/sbpl/discrete_space_information/environment_nav2D.h	39;"	d
ENVNAV2D_MAXDIRS	src/include/sbpl/discrete_space_information/environment_nav2D.h	40;"	d
ENV_NAV2D_CONFIG	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^typedef struct ENV_NAV2D_CONFIG$/;"	s
EndX_c	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int EndX_c;$/;"	m	struct:ENV_NAV2D_CONFIG
EndY_c	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int EndY_c;$/;"	m	struct:ENV_NAV2D_CONFIG
EnvHeight_c	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int EnvHeight_c;$/;"	m	struct:ENV_NAV2D_CONFIG
EnvNAV2D	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    EnvironmentNAV2D_t EnvNAV2D;$/;"	m	class:EnvironmentNAV2D
EnvNAV2DCfg	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    EnvNAV2DConfig_t EnvNAV2DCfg;$/;"	m	class:EnvironmentNAV2D
EnvNAV2DConfig_t	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^} EnvNAV2DConfig_t;$/;"	t	typeref:struct:ENV_NAV2D_CONFIG
EnvNAV2DHashEntry_t	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^} EnvNAV2DHashEntry_t;$/;"	t	typeref:struct:ENVHASHENTRY
EnvWidth_c	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int EnvWidth_c;$/;"	m	struct:ENV_NAV2D_CONFIG
EnvironmentNAV2D	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^class EnvironmentNAV2D : public DiscreteSpaceInformation$/;"	c
EnvironmentNAV2D_t	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^} EnvironmentNAV2D_t;$/;"	t	typeref:struct:__anon8
GetLazyPreds	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetLazyPreds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAV2D
GetLazyPredsWithUniqueIds	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetLazyPredsWithUniqueIds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAV2D
GetLazySuccs	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetLazySuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAV2D
GetLazySuccsWithUniqueIds	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetLazySuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV, std::vector<bool>* isTrueCost){$/;"	f	class:EnvironmentNAV2D
GetPredsWithUniqueIds	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetPredsWithUniqueIds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV){$/;"	f	class:EnvironmentNAV2D
GetSuccsWithUniqueIds	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual void GetSuccsWithUniqueIds(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV){$/;"	f	class:EnvironmentNAV2D
GetTrueCost	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual int GetTrueCost(int parentID, int childID){return -1;};\/\/FIXME: this shouldn't ever be called because we always return true cost...$/;"	f	class:EnvironmentNAV2D
Grid2D	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    unsigned char** Grid2D;$/;"	m	struct:ENV_NAV2D_CONFIG
HashTableSize	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int HashTableSize;$/;"	m	struct:__anon8
StartX_c	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int StartX_c;$/;"	m	struct:ENV_NAV2D_CONFIG
StartY_c	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int StartY_c;$/;"	m	struct:ENV_NAV2D_CONFIG
StateID2CoordTable	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    std::vector<EnvNAV2DHashEntry_t*> StateID2CoordTable;$/;"	m	struct:__anon8
X	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int X;$/;"	m	struct:ENVHASHENTRY
Y	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int Y;$/;"	m	struct:ENVHASHENTRY
__ENVIRONMENT_NAV2D_H_	src/include/sbpl/discrete_space_information/environment_nav2D.h	31;"	d
bInitialized	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    bool bInitialized;$/;"	m	struct:__anon8
dx_	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dx_[ENVNAV2D_MAXDIRS];$/;"	m	struct:ENV_NAV2D_CONFIG
dxintersects_	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dxintersects_[ENVNAV2D_MAXDIRS][2];$/;"	m	struct:ENV_NAV2D_CONFIG
dxy_distance_mm_	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dxy_distance_mm_[ENVNAV2D_MAXDIRS];$/;"	m	struct:ENV_NAV2D_CONFIG
dy_	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dy_[ENVNAV2D_MAXDIRS];$/;"	m	struct:ENV_NAV2D_CONFIG
dyintersects_	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int dyintersects_[ENVNAV2D_MAXDIRS][2];$/;"	m	struct:ENV_NAV2D_CONFIG
goalstateid	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int goalstateid;$/;"	m	struct:__anon8
isGoal	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    virtual bool isGoal(int id){$/;"	f	class:EnvironmentNAV2D
numofdirs	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int numofdirs; \/\/for now either 8 or 16 (default is 8)$/;"	m	struct:ENV_NAV2D_CONFIG
obsthresh	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    unsigned char obsthresh;$/;"	m	struct:ENV_NAV2D_CONFIG
startstateid	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int startstateid;$/;"	m	struct:__anon8
stateID	src/include/sbpl/discrete_space_information/environment_nav2D.h	/^    int stateID;$/;"	m	struct:ENVHASHENTRY
ENVNAV2DUU_COSTMULT	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	41;"	d
ENVNAV2DUU_MAXDIRS	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	43;"	d
ENVNAV2DUU_STATEIDTOX	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	87;"	d
ENVNAV2DUU_STATEIDTOY	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	86;"	d
ENVNAV2DUU_XYTOSTATEID	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	88;"	d
ENV_NAV2DUU_CONFIG	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^typedef struct ENV_NAV2DUU_CONFIG$/;"	s
EndX_c	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int EndX_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
EndY_c	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int EndY_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
EnvHeight_c	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int EnvHeight_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
EnvNAV2DUU	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    EnvironmentNAV2DUU_t EnvNAV2DUU;$/;"	m	class:EnvironmentNAV2DUU
EnvNAV2DUUCfg	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    EnvNAV2DUUConfig_t EnvNAV2DUUCfg;$/;"	m	class:EnvironmentNAV2DUU
EnvNAV2DUUConfig_t	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^} EnvNAV2DUUConfig_t;$/;"	t	typeref:struct:ENV_NAV2DUU_CONFIG
EnvWidth_c	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int EnvWidth_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
EnvironmentNAV2DUU	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^class EnvironmentNAV2DUU : public DiscreteSpaceInformation$/;"	c
EnvironmentNAV2DUU_t	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^} EnvironmentNAV2DUU_t;$/;"	t	typeref:struct:__anon2
GetPreds	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    virtual void GetPreds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV)$/;"	f	class:EnvironmentNAV2DUU
GetSuccs	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    virtual void GetSuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV)$/;"	f	class:EnvironmentNAV2DUU
Grid2D	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    unsigned char** Grid2D;$/;"	m	struct:ENV_NAV2DUU_CONFIG
HiddenVariableXY2ID	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int** HiddenVariableXY2ID;$/;"	m	struct:ENV_NAV2DUU_CONFIG
NAV2DUU_MAXACTIONSWIDTH	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	42;"	d
NAVNAV2DUU_MAXWIDTHHEIGH	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	85;"	d
SetAllActionsandAllOutcomes	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    virtual void SetAllActionsandAllOutcomes(CMDPSTATE* state)$/;"	f	class:EnvironmentNAV2DUU
SetAllPreds	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    virtual void SetAllPreds(CMDPSTATE* state)$/;"	f	class:EnvironmentNAV2DUU
StartX_c	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int StartX_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
StartY_c	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int StartY_c;$/;"	m	struct:ENV_NAV2DUU_CONFIG
UncertaintyGrid2D	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    float** UncertaintyGrid2D;$/;"	m	struct:ENV_NAV2DUU_CONFIG
__ENVIRONMENT_NAV2DUU_H_	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	31;"	d
bInitialized	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    bool bInitialized;$/;"	m	struct:__anon2
dx_	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dx_[ENVNAV2DUU_MAXDIRS];$/;"	m	struct:ENV_NAV2DUU_CONFIG
dxintersects_	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dxintersects_[ENVNAV2D_MAXDIRS][2];$/;"	m	struct:ENV_NAV2DUU_CONFIG
dxy_distance_mm_	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dxy_distance_mm_[ENVNAV2DUU_MAXDIRS];$/;"	m	struct:ENV_NAV2DUU_CONFIG
dy_	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dy_[ENVNAV2DUU_MAXDIRS];$/;"	m	struct:ENV_NAV2DUU_CONFIG
dyintersects_	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int dyintersects_[ENVNAV2D_MAXDIRS][2];$/;"	m	struct:ENV_NAV2DUU_CONFIG
goalstateid	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int goalstateid;$/;"	m	struct:__anon2
numofdirs	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int numofdirs; \/\/for now can only be 8$/;"	m	struct:ENV_NAV2DUU_CONFIG
obsthresh	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    unsigned char obsthresh;$/;"	m	struct:ENV_NAV2DUU_CONFIG
sizeofH	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int sizeofH;$/;"	m	struct:ENV_NAV2DUU_CONFIG
sizeofS	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int sizeofS;$/;"	m	struct:ENV_NAV2DUU_CONFIG
startstateid	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    int startstateid;$/;"	m	struct:__anon2
~EnvironmentNAV2DUU	src/include/sbpl/discrete_space_information/environment_nav2Duu.h	/^    ~EnvironmentNAV2DUU()$/;"	f	class:EnvironmentNAV2DUU
ActionsV	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATAction_t** ActionsV; $/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
Coord2StateIDHashTable	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<EnvNAVXYTHETALATHashEntry_t*>* Coord2StateIDHashTable;$/;"	m	class:EnvironmentNAVXYTHETALAT
Coord2StateIDHashTable_lookup	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATHashEntry_t** Coord2StateIDHashTable_lookup;$/;"	m	class:EnvironmentNAVXYTHETALAT
CreateNewHashEntry	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATHashEntry_t* (EnvironmentNAVXYTHETALAT::*CreateNewHashEntry)(int X, int Y, int Theta);$/;"	m	class:EnvironmentNAVXYTHETALAT
ENVNAVXYTHETALAT_DEFAULTOBSTHRESH	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	40;"	d
ENV_NAVXYTHETALAT_CONFIG	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^typedef struct ENV_NAVXYTHETALAT_CONFIG$/;"	s
EndTheta	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EndTheta;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EndX_c	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EndX_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EndY_c	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EndY_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EnvHeight_c	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EnvHeight_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EnvNAVXYTHETALAT	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvironmentNAVXYTHETALAT_t EnvNAVXYTHETALAT;$/;"	m	class:EnvironmentNAVXYTHETALATTICE
EnvNAVXYTHETALATAction_t	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} EnvNAVXYTHETALATAction_t;$/;"	t	typeref:struct:__anon3
EnvNAVXYTHETALATCfg	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATConfig_t EnvNAVXYTHETALATCfg;$/;"	m	class:EnvironmentNAVXYTHETALATTICE
EnvNAVXYTHETALATConfig_t	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} EnvNAVXYTHETALATConfig_t;$/;"	t	typeref:struct:ENV_NAVXYTHETALAT_CONFIG
EnvNAVXYTHETALATHashEntry_t	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} EnvNAVXYTHETALATHashEntry_t;$/;"	t	typeref:struct:__anon4
EnvNAVXYTHETALAT_InitParms	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^class EnvNAVXYTHETALAT_InitParms$/;"	c
EnvWidth_c	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int EnvWidth_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
EnvironmentNAVXYTHETALAT	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvironmentNAVXYTHETALAT()$/;"	f	class:EnvironmentNAVXYTHETALAT
EnvironmentNAVXYTHETALAT	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^class EnvironmentNAVXYTHETALAT : public EnvironmentNAVXYTHETALATTICE$/;"	c
EnvironmentNAVXYTHETALATTICE	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^class EnvironmentNAVXYTHETALATTICE : public DiscreteSpaceInformation$/;"	c
EnvironmentNAVXYTHETALAT_t	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} EnvironmentNAVXYTHETALAT_t;$/;"	t	typeref:struct:__anon6
FootprintPolygon	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_2Dpt_t> FootprintPolygon;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
GetHashEntry	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    EnvNAVXYTHETALATHashEntry_t* (EnvironmentNAVXYTHETALAT::*GetHashEntry)(int X, int Y, int Theta);$/;"	m	class:EnvironmentNAVXYTHETALAT
Grid2D	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char** Grid2D;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
HashTableSize	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int HashTableSize;$/;"	m	class:EnvironmentNAVXYTHETALAT
NAVXYTHETALAT_COSTMULT_MTOMM	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	51;"	d
NAVXYTHETALAT_DEFAULT_ACTIONWIDTH	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	50;"	d
NAVXYTHETALAT_DXYWIDTH	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	39;"	d
NAVXYTHETALAT_THETADIRS	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	47;"	d
NumThetaDirs	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int NumThetaDirs;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
PredActionsV	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<EnvNAVXYTHETALATAction_t*>* PredActionsV; $/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
PrintVars	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    virtual void PrintVars() { }$/;"	f	class:EnvironmentNAVXYTHETALAT
PrintVars	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    virtual void PrintVars() { }$/;"	f	class:EnvironmentNAVXYTHETALATTICE
SBPL_XYTHETALAT_MAXSTATESFORLOOKUP	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	42;"	d
SBPL_xytheta_mprimitive	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^} SBPL_xytheta_mprimitive;$/;"	t	typeref:struct:__anon5
SetGoalTolerance	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    virtual void SetGoalTolerance(double tol_x, double tol_y, double tol_theta) { \/**< not used yet *\/ }$/;"	f	class:EnvironmentNAVXYTHETALAT
StartTheta	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int StartTheta;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
StartX_c	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int StartX_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
StartY_c	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int StartY_c;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
StateID2CoordTable	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<EnvNAVXYTHETALATHashEntry_t*> StateID2CoordTable;$/;"	m	class:EnvironmentNAVXYTHETALAT
Theta	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char Theta;$/;"	m	struct:__anon4
X	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int X;$/;"	m	struct:__anon4
Y	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int Y;$/;"	m	struct:__anon4
__ENVIRONMENT_NAVXYTHETALAT_H_	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	31;"	d
actionwidth	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int actionwidth; \/\/number of motion primitives$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
additionalactioncostmult	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int additionalactioncostmult;$/;"	m	struct:__anon5
affectedpredstatesV	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_cell_t> affectedpredstatesV; \/\/arrays of states whose incoming actions cross cell 0,0$/;"	m	class:EnvironmentNAVXYTHETALATTICE
affectedsuccstatesV	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_cell_t> affectedsuccstatesV; \/\/arrays of states whose outgoing actions cross cell 0,0$/;"	m	class:EnvironmentNAVXYTHETALATTICE
aind	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char aind; \/\/index of the action (unique for given starttheta)$/;"	m	struct:__anon3
bInitialized	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    bool bInitialized;$/;"	m	struct:__anon6
bNeedtoRecomputeGoalHeuristics	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    bool bNeedtoRecomputeGoalHeuristics; \/\/set whenever grid2Dsearchfromgoal needs to be re-executed$/;"	m	class:EnvironmentNAVXYTHETALATTICE
bNeedtoRecomputeStartHeuristics	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    bool bNeedtoRecomputeStartHeuristics; \/\/set whenever grid2Dsearchfromstart needs to be re-executed$/;"	m	class:EnvironmentNAVXYTHETALATTICE
cellsize_m	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double cellsize_m;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
cost	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned int cost;$/;"	m	struct:__anon3
cost_inscribed_thresh	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char cost_inscribed_thresh;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
cost_possibly_circumscribed_thresh	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int cost_possibly_circumscribed_thresh; \/\/ it has to be integer, because -1 means that it is not provided.$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
dX	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char dX;$/;"	m	struct:__anon3
dXY	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int dXY[NAVXYTHETALAT_DXYWIDTH][2];$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
dY	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char dY;$/;"	m	struct:__anon3
endcell	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    sbpl_xy_theta_cell_t endcell;$/;"	m	struct:__anon5
endtheta	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char endtheta;$/;"	m	struct:__anon3
goalstateid	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int goalstateid;$/;"	m	struct:__anon6
goaltheta	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaltheta;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goaltol_theta	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaltol_theta;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goaltol_x	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaltol_x;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goaltol_y	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaltol_y;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goalx	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goalx;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
goaly	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double goaly;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
grid2Dsearchfromgoal	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    SBPL2DGridSearch* grid2Dsearchfromgoal; \/\/computes h-values that estimate distances to goal x,y from all cells$/;"	m	class:EnvironmentNAVXYTHETALATTICE
grid2Dsearchfromstart	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    SBPL2DGridSearch* grid2Dsearchfromstart; \/\/computes h-values that estimate distances from start x,y to all cells$/;"	m	class:EnvironmentNAVXYTHETALATTICE
interm3DcellsV	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_cell_t> interm3DcellsV;$/;"	m	struct:__anon3
intermptV	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_pt_t> intermptV;$/;"	m	struct:__anon3
intermptV	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_xy_theta_pt_t> intermptV;$/;"	m	struct:__anon5
intersectingcellsV	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<sbpl_2Dcell_t> intersectingcellsV;$/;"	m	struct:__anon3
iteration	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int iteration;$/;"	m	class:EnvironmentNAVXYTHETALATTICE
iteration	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int iteration;$/;"	m	struct:__anon4
mapdata	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    const unsigned char* mapdata;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
motprimID	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int motprimID;$/;"	m	struct:__anon5
mprimV	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    std::vector<SBPL_xytheta_mprimitive> mprimV;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
nominalvel_mpersecs	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double nominalvel_mpersecs;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
numThetas	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned int numThetas;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
obsthresh	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char obsthresh;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
startstateid	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int startstateid;$/;"	m	struct:__anon6
starttheta	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    char starttheta;$/;"	m	struct:__anon3
starttheta	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double starttheta;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
starttheta_c	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    unsigned char starttheta_c;$/;"	m	struct:__anon5
startx	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double startx;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
starty	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double starty;$/;"	m	class:EnvNAVXYTHETALAT_InitParms
stateID	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    int stateID;$/;"	m	struct:__anon4
timetoturn45degsinplace_secs	src/include/sbpl/discrete_space_information/environment_navxythetalat.h	/^    double timetoturn45degsinplace_secs;$/;"	m	struct:ENV_NAVXYTHETALAT_CONFIG
AddLevelFootprintPolygonV	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    std::vector<sbpl_2Dpt_t>* AddLevelFootprintPolygonV;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
AddLevelGrid2D	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    unsigned char*** AddLevelGrid2D;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
AddLevel_cost_inscribed_thresh	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    unsigned char* AddLevel_cost_inscribed_thresh;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
AddLevel_cost_possibly_circumscribed_thresh	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    unsigned char* AddLevel_cost_possibly_circumscribed_thresh;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
AdditionalInfoinActionsV	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    EnvNAVXYTHETAMLEVLATAddInfoAction_t** AdditionalInfoinActionsV;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
EnvNAVXYTHETAMLEVLATAddInfoAction_t	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^} EnvNAVXYTHETAMLEVLATAddInfoAction_t;$/;"	t	typeref:struct:__anon7
EnvironmentNAVXYTHETAMLEVLAT	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^class EnvironmentNAVXYTHETAMLEVLAT : public EnvironmentNAVXYTHETALAT$/;"	c
GetPredsofChangedEdges	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    virtual void GetPredsofChangedEdges(std::vector<nav2dcell_t> const * changedcellsV,$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
GetSuccsofChangedEdges	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    virtual void GetSuccsofChangedEdges(std::vector<nav2dcell_t> const * changedcellsV,$/;"	f	class:EnvironmentNAVXYTHETAMLEVLAT
__ENVIRONMENT_NAVXYTHETAMLEVLAT_H_	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	31;"	d
dX	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    char dX; \/\/ should be equal to the corresponding EnvNAVXYTHETALATAction_t structure$/;"	m	struct:__anon7
dY	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    char dY; \/\/ should be equal to the corresponding EnvNAVXYTHETALATAction_t structure$/;"	m	struct:__anon7
endtheta	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    char endtheta; \/\/ should be equal to the corresponding EnvNAVXYTHETALATAction_t structure$/;"	m	struct:__anon7
intersectingcellsV	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    std::vector<sbpl_2Dcell_t>* intersectingcellsV; \/\/ one footprint per additional level$/;"	m	struct:__anon7
numofadditionalzlevs	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    int numofadditionalzlevs;$/;"	m	class:EnvironmentNAVXYTHETAMLEVLAT
starttheta	src/include/sbpl/discrete_space_information/environment_navxythetamlevlat.h	/^    char starttheta; \/\/ should be equal to the corresponding EnvNAVXYTHETALATAction_t structure$/;"	m	struct:__anon7
AdjListIterator	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^typedef Adjacencies::iterator AdjListIterator;$/;"	t
Adjacencies	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^typedef std::list<Adjacency> Adjacencies;$/;"	t
Adjacency	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^struct Adjacency$/;"	s
AdjacencyListSBPLEnv	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^AdjacencyListSBPLEnv<Coords>::AdjacencyListSBPLEnv() :$/;"	f	class:AdjacencyListSBPLEnv
AdjacencyListSBPLEnv	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^class AdjacencyListSBPLEnv : public DiscreteSpaceInformation$/;"	c
GetFromToHeuristic	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^int AdjacencyListSBPLEnv<Coords>::GetFromToHeuristic(int FromStateID, int ToStateID)$/;"	f	class:AdjacencyListSBPLEnv
GetGoalHeuristic	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^int AdjacencyListSBPLEnv<Coords>::GetGoalHeuristic(int stateID)$/;"	f	class:AdjacencyListSBPLEnv
GetPreds	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::GetPreds(int TargetStateID, std::vector<int>* PredIDV, std::vector<int>* CostV)$/;"	f	class:AdjacencyListSBPLEnv
GetStartHeuristic	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^int AdjacencyListSBPLEnv<Coords>::GetStartHeuristic(int stateID)$/;"	f	class:AdjacencyListSBPLEnv
GetSuccs	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::GetSuccs(int SourceStateID, std::vector<int>* SuccIDV, std::vector<int>* CostV)$/;"	f	class:AdjacencyListSBPLEnv
InitializeEnv	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^bool AdjacencyListSBPLEnv<Coords>::InitializeEnv(const char* sEnvFile)$/;"	f	class:AdjacencyListSBPLEnv
InitializeMDPCfg	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^bool AdjacencyListSBPLEnv<Coords>::InitializeMDPCfg(MDPConfig *MDPCfg)$/;"	f	class:AdjacencyListSBPLEnv
PrintEnv_Config	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::PrintEnv_Config(FILE* fOut)$/;"	f	class:AdjacencyListSBPLEnv
PrintState	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::PrintState(int stateID, bool bVerbose, FILE* fOut)$/;"	f	class:AdjacencyListSBPLEnv
SetAllActionsandAllOutcomes	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::SetAllActionsandAllOutcomes(CMDPSTATE* state)$/;"	f	class:AdjacencyListSBPLEnv
SetAllPreds	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::SetAllPreds(CMDPSTATE* state)$/;"	f	class:AdjacencyListSBPLEnv
SizeofCreatedEnv	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^int AdjacencyListSBPLEnv<Coords>::SizeofCreatedEnv()$/;"	f	class:AdjacencyListSBPLEnv
__PRECOMPUTED_ADJACENCY_LIST_H_	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	2;"	d
addPoint	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::addPoint(const Coords& c)$/;"	f	class:AdjacencyListSBPLEnv
adjacency_vector_	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    std::vector<Adjacencies> adjacency_vector_;$/;"	m	class:AdjacencyListSBPLEnv
cost	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    int cost;$/;"	m	struct:Adjacency
findOptimalPath	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^std::vector<Coords> AdjacencyListSBPLEnv<Coords>::findOptimalPath(int* solution_cost)$/;"	f	class:AdjacencyListSBPLEnv
goalStateId_	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    int goalStateId_;$/;"	m	class:AdjacencyListSBPLEnv
hasPoint	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^bool AdjacencyListSBPLEnv<Coords>::hasPoint(const Coords& c)$/;"	f	class:AdjacencyListSBPLEnv
neighbor	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    int neighbor;$/;"	m	struct:Adjacency
pointIds_	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    std::map<Coords, int> pointIds_;$/;"	m	class:AdjacencyListSBPLEnv
points_	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    std::vector<Coords> points_;$/;"	m	class:AdjacencyListSBPLEnv
removeLastPoints	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::removeLastPoints(unsigned int n)$/;"	f	class:AdjacencyListSBPLEnv
resetStateId2IndexMapping	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::resetStateId2IndexMapping(void)$/;"	f	class:AdjacencyListSBPLEnv
setCost	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::setCost(const Coords& c1, const Coords& c2)$/;"	f	class:AdjacencyListSBPLEnv
setCost	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::setCost(const Coords& c1, const Coords& c2, int cost)$/;"	f	class:AdjacencyListSBPLEnv
setGoalState	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::setGoalState(const Coords& c)$/;"	f	class:AdjacencyListSBPLEnv
setStartState	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::setStartState(const Coords& c)$/;"	f	class:AdjacencyListSBPLEnv
startStateId_	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^    int startStateId_;$/;"	m	class:AdjacencyListSBPLEnv
writeToStream	src/include/sbpl/discrete_space_information/environment_precomputed_adjacency_list.h	/^void AdjacencyListSBPLEnv<Coords>::writeToStream(std::ostream& str)$/;"	f	class:AdjacencyListSBPLEnv
BaseX_c	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    int BaseX_c;$/;"	m	struct:ENV_ROBARM_CONFIG
CELLV	src/include/sbpl/discrete_space_information/environment_robarm.h	/^} CELLV;$/;"	t	typeref:struct:__anon10
Coord2StateIDHashTable	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    std::vector<EnvROBARMHashEntry_t*>* Coord2StateIDHashTable;$/;"	m	struct:__anon11
ENDEFF_CHECK_ONLY	src/include/sbpl/discrete_space_information/environment_robarm.h	44;"	d
ENVROBARMHASHENTRY	src/include/sbpl/discrete_space_information/environment_robarm.h	/^typedef struct ENVROBARMHASHENTRY$/;"	s
ENV_ROBARM_CONFIG	src/include/sbpl/discrete_space_information/environment_robarm.h	/^typedef struct ENV_ROBARM_CONFIG$/;"	s
EndEffGoalX_c	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int EndEffGoalX_c;$/;"	m	struct:ENV_ROBARM_CONFIG
EndEffGoalY_c	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int EndEffGoalY_c;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvHeight_c	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    int EnvHeight_c;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvHeight_m	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    double EnvHeight_m;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvROBARM	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    EnvironmentROBARM_t EnvROBARM;$/;"	m	class:EnvironmentROBARM
EnvROBARMCfg	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    EnvROBARMConfig_t EnvROBARMCfg;$/;"	m	class:EnvironmentROBARM
EnvROBARMConfig_t	src/include/sbpl/discrete_space_information/environment_robarm.h	/^} EnvROBARMConfig_t;$/;"	t	typeref:struct:ENV_ROBARM_CONFIG
EnvROBARMHashEntry_t	src/include/sbpl/discrete_space_information/environment_robarm.h	/^} EnvROBARMHashEntry_t;$/;"	t	typeref:struct:ENVROBARMHASHENTRY
EnvWidth_c	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    int EnvWidth_c;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvWidth_m	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    double EnvWidth_m;$/;"	m	struct:ENV_ROBARM_CONFIG
EnvironmentROBARM	src/include/sbpl/discrete_space_information/environment_robarm.h	/^class EnvironmentROBARM : public DiscreteSpaceInformation$/;"	c
EnvironmentROBARM_t	src/include/sbpl/discrete_space_information/environment_robarm.h	/^} EnvironmentROBARM_t;$/;"	t	typeref:struct:__anon11
Grid2D	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    char** Grid2D;$/;"	m	struct:ENV_ROBARM_CONFIG
GridCellWidth	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    double GridCellWidth;$/;"	m	struct:ENV_ROBARM_CONFIG
HashTableSize	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    int HashTableSize;$/;"	m	struct:__anon11
Heur	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    int** Heur; \/\/h[fromx][fromy][tox][toy] = Heur[to][from], where to= tox+toy*width_c, from = fromx+fromy*width_c$/;"	m	struct:__anon11
INVALID_NUMBER	src/include/sbpl/discrete_space_information/environment_robarm.h	46;"	d
LinkGoalAngles_d	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    double LinkGoalAngles_d[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
LinkLength_m	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    double LinkLength_m[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
LinkStartAngles_d	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    double LinkStartAngles_d[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
NUMOFLINKS	src/include/sbpl/discrete_space_information/environment_robarm.h	36;"	d
ROBARM_LONGACTIONDIST_CELLS	src/include/sbpl/discrete_space_information/environment_robarm.h	39;"	d
ROBARM_NUMOFRANDSUCCSATDIST	src/include/sbpl/discrete_space_information/environment_robarm.h	41;"	d
STATE2D_t	src/include/sbpl/discrete_space_information/environment_robarm.h	/^typedef struct STATE2D_t$/;"	s
State2D	src/include/sbpl/discrete_space_information/environment_robarm.h	/^} State2D;$/;"	t	typeref:struct:STATE2D_t
StateID2CoordTable	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    std::vector<EnvROBARMHashEntry_t*> StateID2CoordTable;$/;"	m	struct:__anon11
UNIFORM_COST	src/include/sbpl/discrete_space_information/environment_robarm.h	45;"	d
__ENVIRONMENT_ROBARM_H_	src/include/sbpl/discrete_space_information/environment_robarm.h	31;"	d
angledelta	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    double angledelta[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
anglevals	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    int anglevals[NUMOFLINKS];$/;"	m	struct:ENV_ROBARM_CONFIG
bIsObstacle	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    bool bIsObstacle;$/;"	m	struct:__anon10
coord	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int coord[NUMOFLINKS];$/;"	m	struct:ENVROBARMHASHENTRY
endeffx	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int endeffx;$/;"	m	struct:ENVROBARMHASHENTRY
endeffy	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int endeffy;$/;"	m	struct:ENVROBARMHASHENTRY
g	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    unsigned int g;$/;"	m	struct:STATE2D_t
goalHashEntry	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    EnvROBARMHashEntry_t* goalHashEntry;$/;"	m	struct:__anon11
iterationclosed	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int iterationclosed;$/;"	m	struct:STATE2D_t
startHashEntry	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    EnvROBARMHashEntry_t* startHashEntry;$/;"	m	struct:__anon11
stateID	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    int stateID;$/;"	m	struct:ENVROBARMHASHENTRY
x	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int x;$/;"	m	struct:STATE2D_t
x	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int x;$/;"	m	struct:__anon10
y	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int y;$/;"	m	struct:STATE2D_t
y	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    short unsigned int y;$/;"	m	struct:__anon10
~EnvironmentROBARM	src/include/sbpl/discrete_space_information/environment_robarm.h	/^    ~EnvironmentROBARM() { }$/;"	f	class:EnvironmentROBARM
CRTDBG_MAP_ALLOC	src/include/sbpl/headers.h	38;"	d
_CRTDBG_MAP_ALLOC	src/include/sbpl/headers.h	37;"	d
__HEADERS_H_	src/include/sbpl/headers.h	31;"	d
G	src/include/sbpl/planners/ANAplanner.h	/^    unsigned int G;$/;"	m	struct:anaSEARCHSTATESPACE
MDPCfg_	src/include/sbpl/planners/ANAplanner.h	/^    MDPConfig* MDPCfg_;$/;"	m	class:anaPlanner
MDPstate	src/include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:anaSEARCHSTATEDATA
MaxMemoryCounter	src/include/sbpl/planners/ANAplanner.h	/^    int MaxMemoryCounter;$/;"	m	class:anaPlanner
TimeStarted	src/include/sbpl/planners/ANAplanner.h	/^    clock_t TimeStarted;$/;"	m	class:anaPlanner
__anaPLANNER_H_	src/include/sbpl/planners/ANAplanner.h	10;"	d
anaPlanner	src/include/sbpl/planners/ANAplanner.h	/^class anaPlanner : public SBPLPlanner$/;"	c
anaSEARCHSTATEDATA	src/include/sbpl/planners/ANAplanner.h	/^    anaSEARCHSTATEDATA() { }$/;"	f	class:anaSEARCHSTATEDATA
anaSEARCHSTATEDATA	src/include/sbpl/planners/ANAplanner.h	/^typedef class anaSEARCHSTATEDATA : public AbstractSearchState$/;"	c
anaSEARCHSTATESPACE	src/include/sbpl/planners/ANAplanner.h	/^typedef struct anaSEARCHSTATESPACE$/;"	s
anaSearchStateSpace_t	src/include/sbpl/planners/ANAplanner.h	/^} anaSearchStateSpace_t;$/;"	t	typeref:struct:anaSEARCHSTATESPACE
anaState	src/include/sbpl/planners/ANAplanner.h	/^} anaState;$/;"	t	typeref:class:anaSEARCHSTATEDATA
ana_DECREASE_EPS	src/include/sbpl/planners/ANAplanner.h	22;"	d
ana_DEFAULT_INITIAL_EPS	src/include/sbpl/planners/ANAplanner.h	20;"	d
ana_FINAL_EPS	src/include/sbpl/planners/ANAplanner.h	24;"	d
ana_INCONS_LIST_ID	src/include/sbpl/planners/ANAplanner.h	26;"	d
bNewSearchIteration	src/include/sbpl/planners/ANAplanner.h	/^    bool bNewSearchIteration;$/;"	m	struct:anaSEARCHSTATESPACE
bReevaluatefvals	src/include/sbpl/planners/ANAplanner.h	/^    bool bReevaluatefvals;$/;"	m	struct:anaSEARCHSTATESPACE
bReinitializeSearchStateSpace	src/include/sbpl/planners/ANAplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:anaSEARCHSTATESPACE
bestnextstate	src/include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE *bestnextstate;$/;"	m	class:anaSEARCHSTATEDATA
bestpredstate	src/include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE *bestpredstate;$/;"	m	class:anaSEARCHSTATEDATA
bforwardsearch	src/include/sbpl/planners/ANAplanner.h	/^    bool bforwardsearch; \/\/if true, then search proceeds forward, otherwise backward$/;"	m	class:anaPlanner
bsearchuntilfirstsolution	src/include/sbpl/planners/ANAplanner.h	/^    bool bsearchuntilfirstsolution; \/\/if true, then search until first solution only (see planner.h for search modes)$/;"	m	class:anaPlanner
callnumber	src/include/sbpl/planners/ANAplanner.h	/^    short unsigned int callnumber;$/;"	m	struct:anaSEARCHSTATESPACE
callnumberaccessed	src/include/sbpl/planners/ANAplanner.h	/^    short unsigned int callnumberaccessed;$/;"	m	class:anaSEARCHSTATEDATA
costtobestnextstate	src/include/sbpl/planners/ANAplanner.h	/^    unsigned int costtobestnextstate;$/;"	m	class:anaSEARCHSTATEDATA
eps	src/include/sbpl/planners/ANAplanner.h	/^    double eps;$/;"	m	struct:anaSEARCHSTATESPACE
eps_satisfied	src/include/sbpl/planners/ANAplanner.h	/^    double eps_satisfied;$/;"	m	struct:anaSEARCHSTATESPACE
fDeb	src/include/sbpl/planners/ANAplanner.h	/^    FILE *fDeb;$/;"	m	class:anaPlanner
finitial_eps	src/include/sbpl/planners/ANAplanner.h	/^    double finitial_eps;$/;"	m	class:anaPlanner
g	src/include/sbpl/planners/ANAplanner.h	/^    unsigned int g;$/;"	m	class:anaSEARCHSTATEDATA
get_n_expands	src/include/sbpl/planners/ANAplanner.h	/^    virtual int get_n_expands() const { return searchexpands; }$/;"	f	class:anaPlanner
get_solution_eps	src/include/sbpl/planners/ANAplanner.h	/^    virtual double get_solution_eps() const { return pSearchStateSpace_->eps_satisfied; }$/;"	f	class:anaPlanner
h	src/include/sbpl/planners/ANAplanner.h	/^    int h;$/;"	m	class:anaSEARCHSTATEDATA
heap	src/include/sbpl/planners/ANAplanner.h	/^    CHeap* heap;$/;"	m	struct:anaSEARCHSTATESPACE
iterationclosed	src/include/sbpl/planners/ANAplanner.h	/^    short unsigned int iterationclosed;$/;"	m	class:anaSEARCHSTATEDATA
numofexpands	src/include/sbpl/planners/ANAplanner.h	/^    short unsigned int numofexpands;$/;"	m	class:anaSEARCHSTATEDATA
pSearchStateSpace_	src/include/sbpl/planners/ANAplanner.h	/^    anaSearchStateSpace_t* pSearchStateSpace_;$/;"	m	class:anaPlanner
searchMDP	src/include/sbpl/planners/ANAplanner.h	/^    CMDP searchMDP;$/;"	m	struct:anaSEARCHSTATESPACE
searchexpands	src/include/sbpl/planners/ANAplanner.h	/^    unsigned int searchexpands;$/;"	m	class:anaPlanner
searchgoalstate	src/include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE* searchgoalstate;$/;"	m	struct:anaSEARCHSTATESPACE
searchiteration	src/include/sbpl/planners/ANAplanner.h	/^    short unsigned int searchiteration;$/;"	m	struct:anaSEARCHSTATESPACE
searchstartstate	src/include/sbpl/planners/ANAplanner.h	/^    CMDPSTATE* searchstartstate;$/;"	m	struct:anaSEARCHSTATESPACE
set_initialsolution_eps	src/include/sbpl/planners/ANAplanner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { finitial_eps = initialsolution_eps; }$/;"	f	class:anaPlanner
v	src/include/sbpl/planners/ANAplanner.h	/^    unsigned int v;$/;"	m	class:anaSEARCHSTATEDATA
~anaSEARCHSTATEDATA	src/include/sbpl/planners/ANAplanner.h	/^    ~anaSEARCHSTATEDATA() { }$/;"	f	class:anaSEARCHSTATEDATA
ADPlanner	src/include/sbpl/planners/adplanner.h	/^class ADPlanner : public SBPLPlanner$/;"	c
ADSEARCHSTATEDATA	src/include/sbpl/planners/adplanner.h	/^    ADSEARCHSTATEDATA() { }$/;"	f	class:ADSEARCHSTATEDATA
ADSEARCHSTATEDATA	src/include/sbpl/planners/adplanner.h	/^typedef class ADSEARCHSTATEDATA : public AbstractSearchState$/;"	c
ADSEARCHSTATESPACE	src/include/sbpl/planners/adplanner.h	/^typedef struct ADSEARCHSTATESPACE$/;"	s
ADSearchStateSpace_t	src/include/sbpl/planners/adplanner.h	/^} ADSearchStateSpace_t;$/;"	t	typeref:struct:ADSEARCHSTATESPACE
ADState	src/include/sbpl/planners/adplanner.h	/^} ADState;$/;"	t	typeref:class:ADSEARCHSTATEDATA
AD_DECREASE_EPS	src/include/sbpl/planners/adplanner.h	44;"	d
AD_DEFAULT_INITIAL_EPS	src/include/sbpl/planners/adplanner.h	42;"	d
AD_FINAL_EPS	src/include/sbpl/planners/adplanner.h	46;"	d
AD_INCONS_LIST_ID	src/include/sbpl/planners/adplanner.h	48;"	d
MDPCfg_	src/include/sbpl/planners/adplanner.h	/^    MDPConfig* MDPCfg_;$/;"	m	class:ADPlanner
MDPstate	src/include/sbpl/planners/adplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:ADSEARCHSTATEDATA
MaxMemoryCounter	src/include/sbpl/planners/adplanner.h	/^    int MaxMemoryCounter;$/;"	m	class:ADPlanner
StateChangeQuery	src/include/sbpl/planners/adplanner.h	/^class StateChangeQuery$/;"	c
TimeStarted	src/include/sbpl/planners/adplanner.h	/^    clock_t TimeStarted;$/;"	m	class:ADPlanner
__ADPLANNER_H_	src/include/sbpl/planners/adplanner.h	31;"	d
bRebuildOpenList	src/include/sbpl/planners/adplanner.h	/^    bool bRebuildOpenList;$/;"	m	struct:ADSEARCHSTATESPACE
bReevaluatefvals	src/include/sbpl/planners/adplanner.h	/^    bool bReevaluatefvals;$/;"	m	struct:ADSEARCHSTATESPACE
bReinitializeSearchStateSpace	src/include/sbpl/planners/adplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:ADSEARCHSTATESPACE
bestnextstate	src/include/sbpl/planners/adplanner.h	/^    CMDPSTATE *bestnextstate;$/;"	m	class:ADSEARCHSTATEDATA
bestpredstate	src/include/sbpl/planners/adplanner.h	/^    CMDPSTATE *bestpredstate;$/;"	m	class:ADSEARCHSTATEDATA
bforwardsearch	src/include/sbpl/planners/adplanner.h	/^    bool bforwardsearch;$/;"	m	class:ADPlanner
bsearchuntilfirstsolution	src/include/sbpl/planners/adplanner.h	/^    bool bsearchuntilfirstsolution; \/\/if true, then search until first solution (see planner.h for search modes)$/;"	m	class:ADPlanner
callnumber	src/include/sbpl/planners/adplanner.h	/^    short unsigned int callnumber;$/;"	m	struct:ADSEARCHSTATESPACE
callnumberaccessed	src/include/sbpl/planners/adplanner.h	/^    short unsigned int callnumberaccessed;$/;"	m	class:ADSEARCHSTATEDATA
costtobestnextstate	src/include/sbpl/planners/adplanner.h	/^    unsigned int costtobestnextstate;$/;"	m	class:ADSEARCHSTATEDATA
dec_eps	src/include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
eps	src/include/sbpl/planners/adplanner.h	/^    double eps;$/;"	m	struct:ADSEARCHSTATESPACE
eps_satisfied	src/include/sbpl/planners/adplanner.h	/^    double eps_satisfied;$/;"	m	struct:ADSEARCHSTATESPACE
fDeb	src/include/sbpl/planners/adplanner.h	/^    FILE *fDeb;$/;"	m	class:ADPlanner
final_eps	src/include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
final_eps_planning_time	src/include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
final_epsilon	src/include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
finitial_eps	src/include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
finitial_eps_planning_time	src/include/sbpl/planners/adplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ADPlanner
g	src/include/sbpl/planners/adplanner.h	/^    unsigned int g;$/;"	m	class:ADSEARCHSTATEDATA
get_final_eps_planning_time	src/include/sbpl/planners/adplanner.h	/^    virtual double get_final_eps_planning_time() { return final_eps_planning_time; }$/;"	f	class:ADPlanner
get_final_epsilon	src/include/sbpl/planners/adplanner.h	/^    virtual double get_final_epsilon() { return final_eps; }$/;"	f	class:ADPlanner
get_initial_eps	src/include/sbpl/planners/adplanner.h	/^    virtual double get_initial_eps() { return finitial_eps; }$/;"	f	class:ADPlanner
get_initial_eps_planning_time	src/include/sbpl/planners/adplanner.h	/^    virtual double get_initial_eps_planning_time() { return finitial_eps_planning_time; }$/;"	f	class:ADPlanner
get_n_expands	src/include/sbpl/planners/adplanner.h	/^    virtual int get_n_expands() const { return searchexpands; }$/;"	f	class:ADPlanner
get_n_expands_init_solution	src/include/sbpl/planners/adplanner.h	/^    virtual int get_n_expands_init_solution() { return num_of_expands_initial_solution; }$/;"	f	class:ADPlanner
get_solution_eps	src/include/sbpl/planners/adplanner.h	/^    virtual double get_solution_eps() const { return pSearchStateSpace_->eps_satisfied; }$/;"	f	class:ADPlanner
h	src/include/sbpl/planners/adplanner.h	/^    int h;$/;"	m	class:ADSEARCHSTATEDATA
heap	src/include/sbpl/planners/adplanner.h	/^    CHeap* heap;$/;"	m	struct:ADSEARCHSTATESPACE
inconslist	src/include/sbpl/planners/adplanner.h	/^    CList* inconslist;$/;"	m	struct:ADSEARCHSTATESPACE
iterationclosed	src/include/sbpl/planners/adplanner.h	/^    short unsigned int iterationclosed;$/;"	m	class:ADSEARCHSTATEDATA
num_of_expands_initial_solution	src/include/sbpl/planners/adplanner.h	/^    int num_of_expands_initial_solution;$/;"	m	class:ADPlanner
numofexpands	src/include/sbpl/planners/adplanner.h	/^    short unsigned int numofexpands;$/;"	m	class:ADSEARCHSTATEDATA
pSearchStateSpace_	src/include/sbpl/planners/adplanner.h	/^    ADSearchStateSpace_t* pSearchStateSpace_;$/;"	m	class:ADPlanner
repair_time	src/include/sbpl/planners/adplanner.h	/^    double repair_time;$/;"	m	class:ADPlanner
searchMDP	src/include/sbpl/planners/adplanner.h	/^    CMDP searchMDP;$/;"	m	struct:ADSEARCHSTATESPACE
searchexpands	src/include/sbpl/planners/adplanner.h	/^    unsigned int searchexpands;$/;"	m	class:ADPlanner
searchgoalstate	src/include/sbpl/planners/adplanner.h	/^    CMDPSTATE* searchgoalstate;$/;"	m	struct:ADSEARCHSTATESPACE
searchiteration	src/include/sbpl/planners/adplanner.h	/^    short unsigned int searchiteration;$/;"	m	struct:ADSEARCHSTATESPACE
searchstartstate	src/include/sbpl/planners/adplanner.h	/^    CMDPSTATE* searchstartstate;$/;"	m	struct:ADSEARCHSTATESPACE
set_initialsolution_eps	src/include/sbpl/planners/adplanner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { finitial_eps = initialsolution_eps; }$/;"	f	class:ADPlanner
stats	src/include/sbpl/planners/adplanner.h	/^    std::vector<PlannerStats> stats;$/;"	m	class:ADPlanner
use_repair_time	src/include/sbpl/planners/adplanner.h	/^    bool use_repair_time;$/;"	m	class:ADPlanner
v	src/include/sbpl/planners/adplanner.h	/^    unsigned int v;$/;"	m	class:ADSEARCHSTATEDATA
~ADSEARCHSTATEDATA	src/include/sbpl/planners/adplanner.h	/^    ~ADSEARCHSTATEDATA() { }$/;"	f	class:ADSEARCHSTATEDATA
~StateChangeQuery	src/include/sbpl/planners/adplanner.h	/^    virtual ~StateChangeQuery() { }$/;"	f	class:StateChangeQuery
ARAPlanner	src/include/sbpl/planners/araplanner.h	/^class ARAPlanner : public SBPLPlanner$/;"	c
ARASEARCHSTATEDATA	src/include/sbpl/planners/araplanner.h	/^    ARASEARCHSTATEDATA() { }$/;"	f	class:ARASEARCHSTATEDATA
ARASEARCHSTATEDATA	src/include/sbpl/planners/araplanner.h	/^typedef class ARASEARCHSTATEDATA : public AbstractSearchState$/;"	c
ARASEARCHSTATESPACE	src/include/sbpl/planners/araplanner.h	/^typedef struct ARASEARCHSTATESPACE$/;"	s
ARASearchStateSpace_t	src/include/sbpl/planners/araplanner.h	/^} ARASearchStateSpace_t;$/;"	t	typeref:struct:ARASEARCHSTATESPACE
ARAState	src/include/sbpl/planners/araplanner.h	/^} ARAState;$/;"	t	typeref:class:ARASEARCHSTATEDATA
ARA_DECREASE_EPS	src/include/sbpl/planners/araplanner.h	44;"	d
ARA_DEFAULT_INITIAL_EPS	src/include/sbpl/planners/araplanner.h	42;"	d
ARA_FINAL_EPS	src/include/sbpl/planners/araplanner.h	46;"	d
ARA_INCONS_LIST_ID	src/include/sbpl/planners/araplanner.h	48;"	d
MDPCfg_	src/include/sbpl/planners/araplanner.h	/^    MDPConfig* MDPCfg_;$/;"	m	class:ARAPlanner
MDPstate	src/include/sbpl/planners/araplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:ARASEARCHSTATEDATA
MaxMemoryCounter	src/include/sbpl/planners/araplanner.h	/^    int MaxMemoryCounter;$/;"	m	class:ARAPlanner
TimeStarted	src/include/sbpl/planners/araplanner.h	/^    clock_t TimeStarted;$/;"	m	class:ARAPlanner
__ARAPLANNER_H_	src/include/sbpl/planners/araplanner.h	31;"	d
bNewSearchIteration	src/include/sbpl/planners/araplanner.h	/^    bool bNewSearchIteration;$/;"	m	struct:ARASEARCHSTATESPACE
bReevaluatefvals	src/include/sbpl/planners/araplanner.h	/^    bool bReevaluatefvals;$/;"	m	struct:ARASEARCHSTATESPACE
bReinitializeSearchStateSpace	src/include/sbpl/planners/araplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:ARASEARCHSTATESPACE
bestnextstate	src/include/sbpl/planners/araplanner.h	/^    CMDPSTATE *bestnextstate;$/;"	m	class:ARASEARCHSTATEDATA
bestpredstate	src/include/sbpl/planners/araplanner.h	/^    CMDPSTATE *bestpredstate;$/;"	m	class:ARASEARCHSTATEDATA
bforwardsearch	src/include/sbpl/planners/araplanner.h	/^    bool bforwardsearch; \/\/if true, then search proceeds forward, otherwise backward$/;"	m	class:ARAPlanner
bsearchuntilfirstsolution	src/include/sbpl/planners/araplanner.h	/^    bool bsearchuntilfirstsolution; \/\/if true, then search until first solution only (see planner.h for search modes)$/;"	m	class:ARAPlanner
callnumber	src/include/sbpl/planners/araplanner.h	/^    short unsigned int callnumber;$/;"	m	struct:ARASEARCHSTATESPACE
callnumberaccessed	src/include/sbpl/planners/araplanner.h	/^    short unsigned int callnumberaccessed;$/;"	m	class:ARASEARCHSTATEDATA
costtobestnextstate	src/include/sbpl/planners/araplanner.h	/^    unsigned int costtobestnextstate;$/;"	m	class:ARASEARCHSTATEDATA
dec_eps	src/include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
eps	src/include/sbpl/planners/araplanner.h	/^    double eps;$/;"	m	struct:ARASEARCHSTATESPACE
eps_satisfied	src/include/sbpl/planners/araplanner.h	/^    double eps_satisfied;$/;"	m	struct:ARASEARCHSTATESPACE
fDeb	src/include/sbpl/planners/araplanner.h	/^    FILE *fDeb;$/;"	m	class:ARAPlanner
final_eps	src/include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
final_eps_planning_time	src/include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
final_epsilon	src/include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
finitial_eps	src/include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
finitial_eps_planning_time	src/include/sbpl/planners/araplanner.h	/^    double finitial_eps, finitial_eps_planning_time, final_eps_planning_time, final_eps, dec_eps, final_epsilon;$/;"	m	class:ARAPlanner
g	src/include/sbpl/planners/araplanner.h	/^    unsigned int g;$/;"	m	class:ARASEARCHSTATEDATA
get_final_eps_planning_time	src/include/sbpl/planners/araplanner.h	/^    virtual double get_final_eps_planning_time() { return final_eps_planning_time; }$/;"	f	class:ARAPlanner
get_final_epsilon	src/include/sbpl/planners/araplanner.h	/^    virtual double get_final_epsilon() { return final_eps; }$/;"	f	class:ARAPlanner
get_initial_eps	src/include/sbpl/planners/araplanner.h	/^    virtual double get_initial_eps() { return finitial_eps; }$/;"	f	class:ARAPlanner
get_initial_eps_planning_time	src/include/sbpl/planners/araplanner.h	/^    virtual double get_initial_eps_planning_time() { return finitial_eps_planning_time; }$/;"	f	class:ARAPlanner
get_n_expands	src/include/sbpl/planners/araplanner.h	/^    virtual int get_n_expands() const { return searchexpands; }$/;"	f	class:ARAPlanner
get_n_expands_init_solution	src/include/sbpl/planners/araplanner.h	/^    virtual int get_n_expands_init_solution() { return num_of_expands_initial_solution; }$/;"	f	class:ARAPlanner
get_solution_eps	src/include/sbpl/planners/araplanner.h	/^    virtual double get_solution_eps() const { return pSearchStateSpace_->eps_satisfied; }$/;"	f	class:ARAPlanner
h	src/include/sbpl/planners/araplanner.h	/^    int h;$/;"	m	class:ARASEARCHSTATEDATA
heap	src/include/sbpl/planners/araplanner.h	/^    CHeap* heap;$/;"	m	struct:ARASEARCHSTATESPACE
inconslist	src/include/sbpl/planners/araplanner.h	/^    CList* inconslist;$/;"	m	struct:ARASEARCHSTATESPACE
iterationclosed	src/include/sbpl/planners/araplanner.h	/^    short unsigned int iterationclosed;$/;"	m	class:ARASEARCHSTATEDATA
num_of_expands_initial_solution	src/include/sbpl/planners/araplanner.h	/^    int num_of_expands_initial_solution;$/;"	m	class:ARAPlanner
numofexpands	src/include/sbpl/planners/araplanner.h	/^    short unsigned int numofexpands;$/;"	m	class:ARASEARCHSTATEDATA
pSearchStateSpace_	src/include/sbpl/planners/araplanner.h	/^    ARASearchStateSpace_t* pSearchStateSpace_;$/;"	m	class:ARAPlanner
repair_time	src/include/sbpl/planners/araplanner.h	/^    double repair_time;$/;"	m	class:ARAPlanner
searchMDP	src/include/sbpl/planners/araplanner.h	/^    CMDP searchMDP;$/;"	m	struct:ARASEARCHSTATESPACE
searchexpands	src/include/sbpl/planners/araplanner.h	/^    unsigned int searchexpands;$/;"	m	class:ARAPlanner
searchgoalstate	src/include/sbpl/planners/araplanner.h	/^    CMDPSTATE* searchgoalstate;$/;"	m	struct:ARASEARCHSTATESPACE
searchiteration	src/include/sbpl/planners/araplanner.h	/^    short unsigned int searchiteration;$/;"	m	struct:ARASEARCHSTATESPACE
searchstartstate	src/include/sbpl/planners/araplanner.h	/^    CMDPSTATE* searchstartstate;$/;"	m	struct:ARASEARCHSTATESPACE
set_eps_step	src/include/sbpl/planners/araplanner.h	/^    virtual void set_eps_step(double eps) { dec_eps = eps; }$/;"	f	class:ARAPlanner
set_initialsolution_eps	src/include/sbpl/planners/araplanner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { finitial_eps = initialsolution_eps; }$/;"	f	class:ARAPlanner
stats	src/include/sbpl/planners/araplanner.h	/^    std::vector<PlannerStats> stats;$/;"	m	class:ARAPlanner
use_repair_time	src/include/sbpl/planners/araplanner.h	/^    bool use_repair_time;$/;"	m	class:ARAPlanner
v	src/include/sbpl/planners/araplanner.h	/^    unsigned int v;$/;"	m	class:ARASEARCHSTATEDATA
~ARASEARCHSTATEDATA	src/include/sbpl/planners/araplanner.h	/^    ~ARASEARCHSTATEDATA() { }$/;"	f	class:ARASEARCHSTATEDATA
LazyARAPlanner	src/include/sbpl/planners/lazyARA.h	/^class LazyARAPlanner : public SBPLPlanner{$/;"	c
LazyARAState	src/include/sbpl/planners/lazyARA.h	/^class LazyARAState: public AbstractSearchState{$/;"	c
LazyListElement	src/include/sbpl/planners/lazyARA.h	/^    LazyListElement(LazyARAState* p, int ec, bool itc){$/;"	f	class:LazyListElement
LazyListElement	src/include/sbpl/planners/lazyARA.h	/^class LazyListElement{$/;"	c
TimeStarted	src/include/sbpl/planners/lazyARA.h	/^	clock_t TimeStarted;$/;"	m	class:LazyARAPlanner
_LAZY_ARA_PLANNER_H_	src/include/sbpl/planners/lazyARA.h	30;"	d
best_parent	src/include/sbpl/planners/lazyARA.h	/^    LazyARAState* best_parent;$/;"	m	class:LazyARAState
bforwardsearch	src/include/sbpl/planners/lazyARA.h	/^	bool bforwardsearch; \/\/if true, then search proceeds forward, otherwise backward$/;"	m	class:LazyARAPlanner
costs_changed	src/include/sbpl/planners/lazyARA.h	/^  virtual void costs_changed(){return;};$/;"	f	class:LazyARAPlanner
costs_changed	src/include/sbpl/planners/lazyARA.h	/^  virtual void costs_changed(StateChangeQuery const & stateChange){return;};$/;"	f	class:LazyARAPlanner
edgeCost	src/include/sbpl/planners/lazyARA.h	/^    int edgeCost;$/;"	m	class:LazyListElement
eps	src/include/sbpl/planners/lazyARA.h	/^	double eps;$/;"	m	class:LazyARAPlanner
eps_satisfied	src/include/sbpl/planners/lazyARA.h	/^  double eps_satisfied;$/;"	m	class:LazyARAPlanner
expanded_best_parent	src/include/sbpl/planners/lazyARA.h	/^    LazyARAState* expanded_best_parent;$/;"	m	class:LazyARAState
force_planning_from_scratch	src/include/sbpl/planners/lazyARA.h	/^  virtual int force_planning_from_scratch(){return 1;};$/;"	f	class:LazyARAPlanner
force_planning_from_scratch_and_free_memory	src/include/sbpl/planners/lazyARA.h	/^  virtual int force_planning_from_scratch_and_free_memory(){return 1;};$/;"	f	class:LazyARAPlanner
g	src/include/sbpl/planners/lazyARA.h	/^    unsigned int g;$/;"	m	class:LazyARAState
get_final_eps_planning_time	src/include/sbpl/planners/lazyARA.h	/^  double get_final_eps_planning_time(){ $/;"	f	class:LazyARAPlanner
get_final_epsilon	src/include/sbpl/planners/lazyARA.h	/^  double get_final_epsilon() { $/;"	f	class:LazyARAPlanner
get_initial_eps	src/include/sbpl/planners/lazyARA.h	/^  double get_initial_eps(){ $/;"	f	class:LazyARAPlanner
get_initial_eps_planning_time	src/include/sbpl/planners/lazyARA.h	/^  double get_initial_eps_planning_time(){ $/;"	f	class:LazyARAPlanner
get_n_expands	src/include/sbpl/planners/lazyARA.h	/^  int get_n_expands() const { $/;"	f	class:LazyARAPlanner
get_n_expands_init_solution	src/include/sbpl/planners/lazyARA.h	/^  int get_n_expands_init_solution(){ $/;"	f	class:LazyARAPlanner
get_solution_eps	src/include/sbpl/planners/lazyARA.h	/^  double get_solution_eps() const { $/;"	f	class:LazyARAPlanner
goal_state	src/include/sbpl/planners/lazyARA.h	/^	LazyARAState* goal_state;$/;"	m	class:LazyARAPlanner
goal_state_id	src/include/sbpl/planners/lazyARA.h	/^  int goal_state_id;$/;"	m	class:LazyARAPlanner
h	src/include/sbpl/planners/lazyARA.h	/^    int h;$/;"	m	class:LazyARAState
heap	src/include/sbpl/planners/lazyARA.h	/^	CHeap heap;$/;"	m	class:LazyARAPlanner
id	src/include/sbpl/planners/lazyARA.h	/^    int id;$/;"	m	class:LazyARAState
in_incons	src/include/sbpl/planners/lazyARA.h	/^    bool in_incons;$/;"	m	class:LazyARAState
incons	src/include/sbpl/planners/lazyARA.h	/^  std::vector<LazyARAState*> incons;$/;"	m	class:LazyARAPlanner
isTrueCost	src/include/sbpl/planners/lazyARA.h	/^    bool isTrueCost;$/;"	m	class:LazyARAState
isTrueCost	src/include/sbpl/planners/lazyARA.h	/^    bool isTrueCost;$/;"	m	class:LazyListElement
iteration_closed	src/include/sbpl/planners/lazyARA.h	/^    short unsigned int iteration_closed;$/;"	m	class:LazyARAState
lazyList	src/include/sbpl/planners/lazyARA.h	/^    std::priority_queue<LazyListElement> lazyList;$/;"	m	class:LazyARAState
operator <	src/include/sbpl/planners/lazyARA.h	/^    bool operator< (const LazyListElement& other) const{$/;"	f	class:LazyListElement
params	src/include/sbpl/planners/lazyARA.h	/^  ReplanParams params;$/;"	m	class:LazyARAPlanner
parent	src/include/sbpl/planners/lazyARA.h	/^    LazyARAState* parent;$/;"	m	class:LazyListElement
reconstructTime	src/include/sbpl/planners/lazyARA.h	/^  double reconstructTime;$/;"	m	class:LazyARAPlanner
replan_number	src/include/sbpl/planners/lazyARA.h	/^	short unsigned int replan_number;$/;"	m	class:LazyARAPlanner
replan_number	src/include/sbpl/planners/lazyARA.h	/^    short unsigned int replan_number;$/;"	m	class:LazyARAState
search_expands	src/include/sbpl/planners/lazyARA.h	/^  int search_expands;$/;"	m	class:LazyARAPlanner
search_iteration	src/include/sbpl/planners/lazyARA.h	/^	short unsigned int search_iteration;$/;"	m	class:LazyARAPlanner
set_initialsolution_eps	src/include/sbpl/planners/lazyARA.h	/^	virtual void set_initialsolution_eps(double initialsolution_eps){$/;"	f	class:LazyARAPlanner
set_search_mode	src/include/sbpl/planners/lazyARA.h	/^	virtual int set_search_mode(bool bSearchUntilFirstSolution){$/;"	f	class:LazyARAPlanner
start_state	src/include/sbpl/planners/lazyARA.h	/^	LazyARAState* start_state;$/;"	m	class:LazyARAPlanner
start_state_id	src/include/sbpl/planners/lazyARA.h	/^  int start_state_id;$/;"	m	class:LazyARAPlanner
states	src/include/sbpl/planners/lazyARA.h	/^  std::vector<LazyARAState*> states;$/;"	m	class:LazyARAPlanner
stats	src/include/sbpl/planners/lazyARA.h	/^  std::vector<PlannerStats> stats;$/;"	m	class:LazyARAPlanner
totalExpands	src/include/sbpl/planners/lazyARA.h	/^  unsigned int totalExpands;$/;"	m	class:LazyARAPlanner
totalPlanTime	src/include/sbpl/planners/lazyARA.h	/^  double totalPlanTime;$/;"	m	class:LazyARAPlanner
totalTime	src/include/sbpl/planners/lazyARA.h	/^  double totalTime;$/;"	m	class:LazyARAPlanner
use_repair_time	src/include/sbpl/planners/lazyARA.h	/^  bool use_repair_time;$/;"	m	class:LazyARAPlanner
v	src/include/sbpl/planners/lazyARA.h	/^    unsigned int v;$/;"	m	class:LazyARAState
~LazyARAPlanner	src/include/sbpl/planners/lazyARA.h	/^  ~LazyARAPlanner(){};$/;"	f	class:LazyARAPlanner
ABSTRACT_GENERALSTATE	src/include/sbpl/planners/planner.h	/^    ABSTRACT_STATE = 0, ABSTRACT_STATEACTIONPAIR, ABSTRACT_GENERALSTATE$/;"	e	enum:__anon1
ABSTRACT_STATE	src/include/sbpl/planners/planner.h	/^    ABSTRACT_STATE = 0, ABSTRACT_STATEACTIONPAIR, ABSTRACT_GENERALSTATE$/;"	e	enum:__anon1
ABSTRACT_STATEACTIONPAIR	src/include/sbpl/planners/planner.h	/^    ABSTRACT_STATE = 0, ABSTRACT_STATEACTIONPAIR, ABSTRACT_GENERALSTATE$/;"	e	enum:__anon1
ADMDP_STATEID2IND	src/include/sbpl/planners/planner.h	49;"	d
ARAMDP_STATEID2IND	src/include/sbpl/planners/planner.h	48;"	d
AbstractSearchState	src/include/sbpl/planners/planner.h	/^    AbstractSearchState()$/;"	f	class:AbstractSearchState
AbstractSearchState	src/include/sbpl/planners/planner.h	/^class AbstractSearchState$/;"	c
AbstractSearchStateType_t	src/include/sbpl/planners/planner.h	/^} AbstractSearchStateType_t;$/;"	t	typeref:enum:__anon1
GETSTATEIND	src/include/sbpl/planners/planner.h	37;"	d
NUMOFINDICES_STATEID2IND	src/include/sbpl/planners/planner.h	/^    NUMOFINDICES_STATEID2IND$/;"	e	enum:STATEID2IND
PlannerStats	src/include/sbpl/planners/planner.h	/^class PlannerStats$/;"	c
RSTARMDP_LSEARCH_STATEID2IND	src/include/sbpl/planners/planner.h	51;"	d
RSTARMDP_STATEID2IND	src/include/sbpl/planners/planner.h	50;"	d
ReplanParams	src/include/sbpl/planners/planner.h	/^    ReplanParams(double time)$/;"	f	class:ReplanParams
ReplanParams	src/include/sbpl/planners/planner.h	/^class ReplanParams$/;"	c
SBPLPlanner	src/include/sbpl/planners/planner.h	/^class SBPLPlanner$/;"	c
STATEID2IND	src/include/sbpl/planners/planner.h	/^enum STATEID2IND$/;"	g
STATEID2IND_SLOT0	src/include/sbpl/planners/planner.h	/^    STATEID2IND_SLOT0 = 0, STATEID2IND_SLOT1,\/\/add more slots if necessary$/;"	e	enum:STATEID2IND
STATEID2IND_SLOT1	src/include/sbpl/planners/planner.h	/^    STATEID2IND_SLOT0 = 0, STATEID2IND_SLOT1,\/\/add more slots if necessary$/;"	e	enum:STATEID2IND
StateType	src/include/sbpl/planners/planner.h	/^    AbstractSearchStateType_t StateType;$/;"	m	class:AbstractSearchState
VIMDP_STATEID2IND	src/include/sbpl/planners/planner.h	47;"	d
__PLANNER_H_	src/include/sbpl/planners/planner.h	31;"	d
anaMDP_STATEID2IND	src/include/sbpl/planners/planner.h	52;"	d
cost	src/include/sbpl/planners/planner.h	/^    int cost;$/;"	m	class:PlannerStats
dec_eps	src/include/sbpl/planners/planner.h	/^    double dec_eps;$/;"	m	class:ReplanParams
environment_	src/include/sbpl/planners/planner.h	/^    DiscreteSpaceInformation *environment_;$/;"	m	class:SBPLPlanner
eps	src/include/sbpl/planners/planner.h	/^    double eps;$/;"	m	class:PlannerStats
expands	src/include/sbpl/planners/planner.h	/^    int expands;$/;"	m	class:PlannerStats
final_eps	src/include/sbpl/planners/planner.h	/^    double final_eps;$/;"	m	class:ReplanParams
force_planning_from_scratch_and_free_memory	src/include/sbpl/planners/planner.h	/^    virtual int force_planning_from_scratch_and_free_memory()$/;"	f	class:SBPLPlanner
get_final_eps_planning_time	src/include/sbpl/planners/planner.h	/^    virtual double get_final_eps_planning_time()$/;"	f	class:SBPLPlanner
get_final_epsilon	src/include/sbpl/planners/planner.h	/^    virtual double get_final_epsilon()$/;"	f	class:SBPLPlanner
get_initial_eps	src/include/sbpl/planners/planner.h	/^    virtual double get_initial_eps()$/;"	f	class:SBPLPlanner
get_initial_eps_planning_time	src/include/sbpl/planners/planner.h	/^    virtual double get_initial_eps_planning_time()$/;"	f	class:SBPLPlanner
get_n_expands	src/include/sbpl/planners/planner.h	/^    virtual int get_n_expands() const$/;"	f	class:SBPLPlanner
get_n_expands_init_solution	src/include/sbpl/planners/planner.h	/^    virtual int get_n_expands_init_solution()$/;"	f	class:SBPLPlanner
get_search_stats	src/include/sbpl/planners/planner.h	/^    virtual void get_search_stats(std::vector<PlannerStats>* s)$/;"	f	class:SBPLPlanner
get_solution_eps	src/include/sbpl/planners/planner.h	/^    virtual double get_solution_eps() const$/;"	f	class:SBPLPlanner
heapindex	src/include/sbpl/planners/planner.h	/^    int heapindex;$/;"	m	class:AbstractSearchState
initial_eps	src/include/sbpl/planners/planner.h	/^    double initial_eps;$/;"	m	class:ReplanParams
listelem	src/include/sbpl/planners/planner.h	/^    struct listelement* listelem[2];$/;"	m	class:AbstractSearchState	typeref:struct:AbstractSearchState::listelement
max_time	src/include/sbpl/planners/planner.h	/^    double max_time;$/;"	m	class:ReplanParams
repair_time	src/include/sbpl/planners/planner.h	/^    double repair_time;$/;"	m	class:ReplanParams
replan	src/include/sbpl/planners/planner.h	/^    virtual int replan(std::vector<int>* solution_stateIDs_V, ReplanParams params)$/;"	f	class:SBPLPlanner
replan	src/include/sbpl/planners/planner.h	/^    virtual int replan(std::vector<int>* solution_stateIDs_V, ReplanParams params, int* solcost)$/;"	f	class:SBPLPlanner
return_first_solution	src/include/sbpl/planners/planner.h	/^    bool return_first_solution;$/;"	m	class:ReplanParams
set_initialsolution_eps	src/include/sbpl/planners/planner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { }$/;"	f	class:SBPLPlanner
time	src/include/sbpl/planners/planner.h	/^    double time;$/;"	m	class:PlannerStats
~AbstractSearchState	src/include/sbpl/planners/planner.h	/^    ~AbstractSearchState() { }$/;"	f	class:AbstractSearchState
~SBPLPlanner	src/include/sbpl/planners/planner.h	/^    virtual ~SBPLPlanner() { }$/;"	f	class:SBPLPlanner
GoalState	src/include/sbpl/planners/ppcpplanner.h	/^    CMDPSTATE* GoalState;$/;"	m	struct:PPCPSTATESPACE
MDP	src/include/sbpl/planners/ppcpplanner.h	/^    CMDP MDP;$/;"	m	struct:PPCPSTATESPACE
MDPstate	src/include/sbpl/planners/ppcpplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:PPCPPLANNERSTATEDATA
PPCPPLANNERSTATEDATA	src/include/sbpl/planners/ppcpplanner.h	/^    PPCPPLANNERSTATEDATA() { }$/;"	f	class:PPCPPLANNERSTATEDATA
PPCPPLANNERSTATEDATA	src/include/sbpl/planners/ppcpplanner.h	/^typedef class PPCPPLANNERSTATEDATA : public AbstractSearchState$/;"	c
PPCPPlanner	src/include/sbpl/planners/ppcpplanner.h	/^class PPCPPlanner : public SBPLPlanner$/;"	c
PPCPSTATESPACE	src/include/sbpl/planners/ppcpplanner.h	/^typedef struct PPCPSTATESPACE$/;"	s
PPCPState	src/include/sbpl/planners/ppcpplanner.h	/^} PPCPState;$/;"	t	typeref:class:PPCPPLANNERSTATEDATA
PPCPStateSpace_t	src/include/sbpl/planners/ppcpplanner.h	/^} PPCPStateSpace_t;$/;"	t	typeref:struct:PPCPSTATESPACE
Pc	src/include/sbpl/planners/ppcpplanner.h	/^    float Pc;$/;"	m	class:PPCPPLANNERSTATEDATA
StartState	src/include/sbpl/planners/ppcpplanner.h	/^    CMDPSTATE* StartState;$/;"	m	struct:PPCPSTATESPACE
__PPCPPLANNER_H_	src/include/sbpl/planners/ppcpplanner.h	31;"	d
bReinitializeSearchStateSpace	src/include/sbpl/planners/ppcpplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:PPCPSTATESPACE
bestnextaction	src/include/sbpl/planners/ppcpplanner.h	/^    CMDPACTION *bestnextaction;$/;"	m	class:PPCPPLANNERSTATEDATA
currentpolicyconfidence	src/include/sbpl/planners/ppcpplanner.h	/^    double currentpolicyconfidence;$/;"	m	struct:PPCPSTATESPACE
fDeb	src/include/sbpl/planners/ppcpplanner.h	/^    FILE* fDeb;$/;"	m	class:PPCPPlanner
iteration	src/include/sbpl/planners/ppcpplanner.h	/^    int iteration;$/;"	m	struct:PPCPSTATESPACE
iteration	src/include/sbpl/planners/ppcpplanner.h	/^    unsigned int iteration;$/;"	m	class:PPCPPLANNERSTATEDATA
pStateSpace	src/include/sbpl/planners/ppcpplanner.h	/^    PPCPStateSpace_t* pStateSpace;$/;"	m	class:PPCPPlanner
replan	src/include/sbpl/planners/ppcpplanner.h	/^    int replan(double allocated_time_sec, std::vector<int>* solution_stateIDs_V)$/;"	f	class:PPCPPlanner
replan	src/include/sbpl/planners/ppcpplanner.h	/^    int replan(double allocated_time_sec, std::vector<int>* solution_stateIDs_V, int* solcost)$/;"	f	class:PPCPPlanner
searchiteration	src/include/sbpl/planners/ppcpplanner.h	/^    int searchiteration;$/;"	m	struct:PPCPSTATESPACE
set_search_mode	src/include/sbpl/planners/ppcpplanner.h	/^    int set_search_mode(bool bSearchUntilFirstSolution)$/;"	f	class:PPCPPlanner
v	src/include/sbpl/planners/ppcpplanner.h	/^    int v;$/;"	m	class:PPCPPLANNERSTATEDATA
~PPCPPLANNERSTATEDATA	src/include/sbpl/planners/ppcpplanner.h	/^    ~PPCPPLANNERSTATEDATA() { }$/;"	f	class:PPCPPLANNERSTATEDATA
GoalState	src/include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* GoalState;$/;"	m	class:RSTARLSEARCHSTATESPACE
INCONS	src/include/sbpl/planners/rstarplanner.h	/^    CList* INCONS;$/;"	m	class:RSTARLSEARCHSTATESPACE
MDP	src/include/sbpl/planners/rstarplanner.h	/^    CMDP MDP;$/;"	m	class:RSTARLSEARCHSTATESPACE
MDPstate	src/include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:RSTARLSEARCHSTATEDATA
MDPstate	src/include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:RSTARSEARCHSTATEDATA
MaxMemoryCounter	src/include/sbpl/planners/rstarplanner.h	/^    int MaxMemoryCounter;$/;"	m	class:RSTARPlanner
OPEN	src/include/sbpl/planners/rstarplanner.h	/^    CHeap* OPEN;$/;"	m	class:RSTARLSEARCHSTATESPACE
OPEN	src/include/sbpl/planners/rstarplanner.h	/^    CHeap* OPEN;$/;"	m	struct:RSTARSEARCHSTATESPACE
RSTARACTIONDATA	src/include/sbpl/planners/rstarplanner.h	/^} RSTARACTIONDATA;$/;"	t	typeref:struct:RSTARACTIONDATA_T
RSTARACTIONDATA_T	src/include/sbpl/planners/rstarplanner.h	/^typedef struct RSTARACTIONDATA_T$/;"	s
RSTARLSEARCHSTATEDATA	src/include/sbpl/planners/rstarplanner.h	/^    RSTARLSEARCHSTATEDATA() { }$/;"	f	class:RSTARLSEARCHSTATEDATA
RSTARLSEARCHSTATEDATA	src/include/sbpl/planners/rstarplanner.h	/^typedef class RSTARLSEARCHSTATEDATA : public AbstractSearchState$/;"	c
RSTARLSEARCHSTATESPACE	src/include/sbpl/planners/rstarplanner.h	/^    RSTARLSEARCHSTATESPACE()$/;"	f	class:RSTARLSEARCHSTATESPACE
RSTARLSEARCHSTATESPACE	src/include/sbpl/planners/rstarplanner.h	/^class RSTARLSEARCHSTATESPACE$/;"	c
RSTARLSearchState	src/include/sbpl/planners/rstarplanner.h	/^} RSTARLSearchState;$/;"	t	typeref:class:RSTARLSEARCHSTATEDATA
RSTARLSearchStateSpace_t	src/include/sbpl/planners/rstarplanner.h	/^typedef class RSTARLSEARCHSTATESPACE RSTARLSearchStateSpace_t;$/;"	t	typeref:class:RSTARLSEARCHSTATESPACE
RSTARPlanner	src/include/sbpl/planners/rstarplanner.h	/^class RSTARPlanner : public SBPLPlanner$/;"	c
RSTARSEARCHSTATEDATA	src/include/sbpl/planners/rstarplanner.h	/^    RSTARSEARCHSTATEDATA() { }$/;"	f	class:RSTARSEARCHSTATEDATA
RSTARSEARCHSTATEDATA	src/include/sbpl/planners/rstarplanner.h	/^typedef class RSTARSEARCHSTATEDATA : public AbstractSearchState$/;"	c
RSTARSEARCHSTATESPACE	src/include/sbpl/planners/rstarplanner.h	/^typedef struct RSTARSEARCHSTATESPACE$/;"	s
RSTARSearchStateSpace_t	src/include/sbpl/planners/rstarplanner.h	/^} RSTARSearchStateSpace_t;$/;"	t	typeref:struct:RSTARSEARCHSTATESPACE
RSTARState	src/include/sbpl/planners/rstarplanner.h	/^} RSTARState;$/;"	t	typeref:class:RSTARSEARCHSTATEDATA
RSTAR_DECREASE_EPS	src/include/sbpl/planners/rstarplanner.h	43;"	d
RSTAR_DEFAULT_INITIAL_EPS	src/include/sbpl/planners/rstarplanner.h	42;"	d
RSTAR_EXPTHRESH	src/include/sbpl/planners/rstarplanner.h	47;"	d
RSTAR_FINAL_EPS	src/include/sbpl/planners/rstarplanner.h	44;"	d
RSTAR_INCONS_LIST_ID	src/include/sbpl/planners/rstarplanner.h	49;"	d
StartState	src/include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* StartState;$/;"	m	class:RSTARLSEARCHSTATESPACE
TimeStarted	src/include/sbpl/planners/rstarplanner.h	/^    clock_t TimeStarted;$/;"	m	class:RSTARPlanner
__RSTARPLANNER_H_	src/include/sbpl/planners/rstarplanner.h	31;"	d
bNewSearchIteration	src/include/sbpl/planners/rstarplanner.h	/^    bool bNewSearchIteration;$/;"	m	struct:RSTARSEARCHSTATESPACE
bReevaluatefvals	src/include/sbpl/planners/rstarplanner.h	/^    bool bReevaluatefvals;$/;"	m	struct:RSTARSEARCHSTATESPACE
bReinitializeSearchStateSpace	src/include/sbpl/planners/rstarplanner.h	/^    bool bReinitializeSearchStateSpace;$/;"	m	struct:RSTARSEARCHSTATESPACE
bestpredaction	src/include/sbpl/planners/rstarplanner.h	/^    CMDPACTION *bestpredaction;$/;"	m	class:RSTARSEARCHSTATEDATA
bestpredstate	src/include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* bestpredstate;$/;"	m	class:RSTARLSEARCHSTATEDATA
bestpredstateactioncost	src/include/sbpl/planners/rstarplanner.h	/^    int bestpredstateactioncost;$/;"	m	class:RSTARLSEARCHSTATEDATA
bforwardsearch	src/include/sbpl/planners/rstarplanner.h	/^    bool bforwardsearch; \/\/if true, then search proceeds forward, otherwise backward$/;"	m	class:RSTARPlanner
bsearchuntilfirstsolution	src/include/sbpl/planners/rstarplanner.h	/^    bool bsearchuntilfirstsolution; \/\/if true, then search until first solution only (see planner.h for search modes)$/;"	m	class:RSTARPlanner
callnumber	src/include/sbpl/planners/rstarplanner.h	/^    short unsigned int callnumber;$/;"	m	struct:RSTARSEARCHSTATESPACE
callnumberaccessed	src/include/sbpl/planners/rstarplanner.h	/^    short unsigned int callnumberaccessed;$/;"	m	class:RSTARSEARCHSTATEDATA
clow	src/include/sbpl/planners/rstarplanner.h	/^    int clow;$/;"	m	struct:RSTARACTIONDATA_T
dec_eps	src/include/sbpl/planners/rstarplanner.h	/^    double dec_eps;$/;"	m	class:RSTARPlanner
eps	src/include/sbpl/planners/rstarplanner.h	/^    double eps;$/;"	m	struct:RSTARSEARCHSTATESPACE
eps_satisfied	src/include/sbpl/planners/rstarplanner.h	/^    double eps_satisfied;$/;"	m	struct:RSTARSEARCHSTATESPACE
exp	src/include/sbpl/planners/rstarplanner.h	/^    int exp;$/;"	m	struct:RSTARACTIONDATA_T
fDeb	src/include/sbpl/planners/rstarplanner.h	/^    FILE *fDeb;$/;"	m	class:RSTARPlanner
final_epsilon	src/include/sbpl/planners/rstarplanner.h	/^    double final_epsilon;$/;"	m	class:RSTARPlanner
finitial_eps	src/include/sbpl/planners/rstarplanner.h	/^    double finitial_eps;$/;"	m	class:RSTARPlanner
g	src/include/sbpl/planners/rstarplanner.h	/^    int g;$/;"	m	class:RSTARLSEARCHSTATEDATA
g	src/include/sbpl/planners/rstarplanner.h	/^    unsigned int g;$/;"	m	class:RSTARSEARCHSTATEDATA
get_final_epsilon	src/include/sbpl/planners/rstarplanner.h	/^    double get_final_epsilon()$/;"	f	class:RSTARPlanner
get_highlevel_expands	src/include/sbpl/planners/rstarplanner.h	/^    virtual int get_highlevel_expands() const { return highlevel_searchexpands; }$/;"	f	class:RSTARPlanner
get_initial_eps	src/include/sbpl/planners/rstarplanner.h	/^    double get_initial_eps() { return finitial_eps; }$/;"	f	class:RSTARPlanner
get_lowlevel_expands	src/include/sbpl/planners/rstarplanner.h	/^    virtual int get_lowlevel_expands() const { return lowlevel_searchexpands; }$/;"	f	class:RSTARPlanner
get_solution_probabilisticeps	src/include/sbpl/planners/rstarplanner.h	/^    virtual double get_solution_probabilisticeps() const { return pSearchStateSpace->eps_satisfied; }$/;"	f	class:RSTARPlanner
h	src/include/sbpl/planners/rstarplanner.h	/^    int h;$/;"	m	class:RSTARSEARCHSTATEDATA
highlevel_searchexpands	src/include/sbpl/planners/rstarplanner.h	/^    unsigned int highlevel_searchexpands;$/;"	m	class:RSTARPlanner
iteration	src/include/sbpl/planners/rstarplanner.h	/^    int iteration;$/;"	m	class:RSTARLSEARCHSTATESPACE
iteration	src/include/sbpl/planners/rstarplanner.h	/^    unsigned int iteration;$/;"	m	class:RSTARLSEARCHSTATEDATA
iterationclosed	src/include/sbpl/planners/rstarplanner.h	/^    short unsigned int iterationclosed;$/;"	m	class:RSTARSEARCHSTATEDATA
iterationclosed	src/include/sbpl/planners/rstarplanner.h	/^    unsigned int iterationclosed;$/;"	m	class:RSTARLSEARCHSTATEDATA
local_expand_thres	src/include/sbpl/planners/rstarplanner.h	/^    double local_expand_thres;$/;"	m	class:RSTARPlanner
lowlevel_searchexpands	src/include/sbpl/planners/rstarplanner.h	/^    unsigned int lowlevel_searchexpands;$/;"	m	class:RSTARPlanner
pLSearchStateSpace	src/include/sbpl/planners/rstarplanner.h	/^    RSTARLSearchStateSpace_t* pLSearchStateSpace;$/;"	m	class:RSTARPlanner
pSearchStateSpace	src/include/sbpl/planners/rstarplanner.h	/^    RSTARSearchStateSpace_t* pSearchStateSpace;$/;"	m	class:RSTARPlanner
pathIDs	src/include/sbpl/planners/rstarplanner.h	/^    std::vector<int> pathIDs;$/;"	m	struct:RSTARACTIONDATA_T
predactionV	src/include/sbpl/planners/rstarplanner.h	/^    std::vector<CMDPACTION*> predactionV;$/;"	m	class:RSTARSEARCHSTATEDATA
searchMDP	src/include/sbpl/planners/rstarplanner.h	/^    CMDP searchMDP;$/;"	m	struct:RSTARSEARCHSTATESPACE
searchgoalstate	src/include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* searchgoalstate;$/;"	m	struct:RSTARSEARCHSTATESPACE
searchiteration	src/include/sbpl/planners/rstarplanner.h	/^    short unsigned int searchiteration;$/;"	m	struct:RSTARSEARCHSTATESPACE
searchstartstate	src/include/sbpl/planners/rstarplanner.h	/^    CMDPSTATE* searchstartstate;$/;"	m	struct:RSTARSEARCHSTATESPACE
set_eps_step	src/include/sbpl/planners/rstarplanner.h	/^    virtual void set_eps_step(double eps) { dec_eps = eps; }$/;"	f	class:RSTARPlanner
set_initialsolution_eps	src/include/sbpl/planners/rstarplanner.h	/^    virtual void set_initialsolution_eps(double initialsolution_eps) { finitial_eps = initialsolution_eps; }$/;"	f	class:RSTARPlanner
set_local_expand_thres	src/include/sbpl/planners/rstarplanner.h	/^    virtual void set_local_expand_thres(unsigned thres) { local_expand_thres = thres; }$/;"	f	class:RSTARPlanner
~RSTARLSEARCHSTATEDATA	src/include/sbpl/planners/rstarplanner.h	/^    ~RSTARLSEARCHSTATEDATA() { }$/;"	f	class:RSTARLSEARCHSTATEDATA
~RSTARLSEARCHSTATESPACE	src/include/sbpl/planners/rstarplanner.h	/^    ~RSTARLSEARCHSTATESPACE()$/;"	f	class:RSTARLSEARCHSTATESPACE
~RSTARSEARCHSTATEDATA	src/include/sbpl/planners/rstarplanner.h	/^    ~RSTARSEARCHSTATEDATA() { }$/;"	f	class:RSTARSEARCHSTATEDATA
GoalState	src/include/sbpl/planners/viplanner.h	/^    CMDPSTATE* GoalState;$/;"	m	struct:VIPLANNER_T
MDP	src/include/sbpl/planners/viplanner.h	/^    CMDP MDP;$/;"	m	struct:VIPLANNER_T
MDPCfg_	src/include/sbpl/planners/viplanner.h	/^    MDPConfig* MDPCfg_;$/;"	m	class:VIPlanner
MDP_ERRDELTA	src/include/sbpl/planners/viplanner.h	38;"	d
MDPstate	src/include/sbpl/planners/viplanner.h	/^    CMDPSTATE* MDPstate;$/;"	m	class:VIPLANNERSTATEDATA
Pc	src/include/sbpl/planners/viplanner.h	/^    float Pc;$/;"	m	class:VIPLANNERSTATEDATA
StartState	src/include/sbpl/planners/viplanner.h	/^    CMDPSTATE* StartState;$/;"	m	struct:VIPLANNER_T
VIPLANNERSTATEDATA	src/include/sbpl/planners/viplanner.h	/^    VIPLANNERSTATEDATA() { }$/;"	f	class:VIPLANNERSTATEDATA
VIPLANNERSTATEDATA	src/include/sbpl/planners/viplanner.h	/^typedef class VIPLANNERSTATEDATA : public AbstractSearchState$/;"	c
VIPLANNER_T	src/include/sbpl/planners/viplanner.h	/^struct VIPLANNER_T$/;"	s
VIPlanner	src/include/sbpl/planners/viplanner.h	/^    VIPlanner(DiscreteSpaceInformation* environment, MDPConfig* MDP_cfg)$/;"	f	class:VIPlanner
VIPlanner	src/include/sbpl/planners/viplanner.h	/^class VIPlanner : public SBPLPlanner$/;"	c
VIState	src/include/sbpl/planners/viplanner.h	/^} VIState;$/;"	t	typeref:class:VIPLANNERSTATEDATA
__VIPLANNER_H_	src/include/sbpl/planners/viplanner.h	31;"	d
bestnextaction	src/include/sbpl/planners/viplanner.h	/^    CMDPACTION *bestnextaction;$/;"	m	class:VIPLANNERSTATEDATA
iteration	src/include/sbpl/planners/viplanner.h	/^    int iteration;$/;"	m	struct:VIPLANNER_T
iteration	src/include/sbpl/planners/viplanner.h	/^    unsigned int iteration;$/;"	m	class:VIPLANNERSTATEDATA
v	src/include/sbpl/planners/viplanner.h	/^    float v;$/;"	m	class:VIPLANNERSTATEDATA
viPlanner	src/include/sbpl/planners/viplanner.h	/^    VIPLANNER_T viPlanner;$/;"	m	class:VIPlanner
~VIPLANNERSTATEDATA	src/include/sbpl/planners/viplanner.h	/^    ~VIPLANNERSTATEDATA() { }$/;"	f	class:VIPLANNERSTATEDATA
SBPL_EXCEPTION_H	src/include/sbpl/sbpl_exception.h	31;"	d
SBPL_Exception	src/include/sbpl/sbpl_exception.h	/^class SBPL_Exception : public std::exception$/;"	c
what	src/include/sbpl/sbpl_exception.h	/^    virtual const char* what() const throw()$/;"	f	class:SBPL_Exception
OPEN2DBLIST_	src/include/sbpl/utils/2Dgridsearch.h	/^    CSlidingBucket* OPEN2DBLIST_;$/;"	m	class:SBPL2DGridSearch
OPEN2D_	src/include/sbpl/utils/2Dgridsearch.h	/^    CIntHeap* OPEN2D_;$/;"	m	class:SBPL2DGridSearch
OPENtype_	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_OPENTYPE OPENtype_;$/;"	m	class:SBPL2DGridSearch
SBPL2DGridSearch	src/include/sbpl/utils/2Dgridsearch.h	/^class SBPL2DGridSearch$/;"	c
SBPL_2DGRIDSEARCH_HEUR2D	src/include/sbpl/utils/2Dgridsearch.h	61;"	d
SBPL_2DGRIDSEARCH_NUMOF2DDIRS	src/include/sbpl/utils/2Dgridsearch.h	38;"	d
SBPL_2DGRIDSEARCH_OPENTYPE	src/include/sbpl/utils/2Dgridsearch.h	/^enum SBPL_2DGRIDSEARCH_OPENTYPE$/;"	g
SBPL_2DGRIDSEARCH_OPENTYPE_HEAP	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_OPENTYPE_HEAP, SBPL_2DGRIDSEARCH_OPENTYPE_SLIDINGBUCKETS$/;"	e	enum:SBPL_2DGRIDSEARCH_OPENTYPE
SBPL_2DGRIDSEARCH_OPENTYPE_SLIDINGBUCKETS	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_OPENTYPE_HEAP, SBPL_2DGRIDSEARCH_OPENTYPE_SLIDINGBUCKETS$/;"	e	enum:SBPL_2DGRIDSEARCH_OPENTYPE
SBPL_2DGRIDSEARCH_TERM_CONDITION	src/include/sbpl/utils/2Dgridsearch.h	/^enum SBPL_2DGRIDSEARCH_TERM_CONDITION$/;"	g
SBPL_2DGRIDSEARCH_TERM_CONDITION_20PERCENTOVEROPTPATH	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_20PERCENTOVEROPTPATH,$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGRIDSEARCH_TERM_CONDITION_ALLCELLS	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_ALLCELLS$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGRIDSEARCH_TERM_CONDITION_OPTPATHFOUND	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_OPTPATHFOUND,$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGRIDSEARCH_TERM_CONDITION_THREETIMESOPTPATH	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_THREETIMESOPTPATH,$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGRIDSEARCH_TERM_CONDITION_TWOTIMESOPTPATH	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION_TWOTIMESOPTPATH,$/;"	e	enum:SBPL_2DGRIDSEARCH_TERM_CONDITION
SBPL_2DGridSearchState	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGridSearchState() { iterationaccessed = 0; }$/;"	f	class:SBPL_2DGridSearchState
SBPL_2DGridSearchState	src/include/sbpl/utils/2Dgridsearch.h	/^class SBPL_2DGridSearchState : public AbstractSearchState$/;"	c
SBPL_2DSEARCH_OPEN_LIST_ID	src/include/sbpl/utils/2Dgridsearch.h	40;"	d
__2DGRIDSEARCH_H_	src/include/sbpl/utils/2Dgridsearch.h	31;"	d
cellSize_m_	src/include/sbpl/utils/2Dgridsearch.h	/^    float cellSize_m_;$/;"	m	class:SBPL2DGridSearch
dx0intersects_	src/include/sbpl/utils/2Dgridsearch.h	/^    int dx0intersects_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dx1intersects_	src/include/sbpl/utils/2Dgridsearch.h	/^    int dx1intersects_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dx_	src/include/sbpl/utils/2Dgridsearch.h	/^    int dx_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dxy_distance_mm_	src/include/sbpl/utils/2Dgridsearch.h	/^    int dxy_distance_mm_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dy0intersects_	src/include/sbpl/utils/2Dgridsearch.h	/^    int dy0intersects_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dy1intersects_	src/include/sbpl/utils/2Dgridsearch.h	/^    int dy1intersects_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
dy_	src/include/sbpl/utils/2Dgridsearch.h	/^    int dy_[SBPL_2DGRIDSEARCH_NUMOF2DDIRS];$/;"	m	class:SBPL2DGridSearch
g	src/include/sbpl/utils/2Dgridsearch.h	/^    int g;$/;"	m	class:SBPL_2DGridSearchState
getlargestcomputedoptimalf_inmm	src/include/sbpl/utils/2Dgridsearch.h	/^    int getlargestcomputedoptimalf_inmm() { return largestcomputedoptf_; }$/;"	f	class:SBPL2DGridSearch
getlowerboundoncostfromstart_inmm	src/include/sbpl/utils/2Dgridsearch.h	/^    inline int getlowerboundoncostfromstart_inmm(int x, int y)$/;"	f	class:SBPL2DGridSearch
goalX_	src/include/sbpl/utils/2Dgridsearch.h	/^    int goalX_, goalY_;$/;"	m	class:SBPL2DGridSearch
goalY_	src/include/sbpl/utils/2Dgridsearch.h	/^    int goalX_, goalY_;$/;"	m	class:SBPL2DGridSearch
height_	src/include/sbpl/utils/2Dgridsearch.h	/^    int width_, height_;$/;"	m	class:SBPL2DGridSearch
iteration_	src/include/sbpl/utils/2Dgridsearch.h	/^    int iteration_;$/;"	m	class:SBPL2DGridSearch
iterationaccessed	src/include/sbpl/utils/2Dgridsearch.h	/^    int iterationaccessed;$/;"	m	class:SBPL_2DGridSearchState
largestcomputedoptf_	src/include/sbpl/utils/2Dgridsearch.h	/^    int largestcomputedoptf_;$/;"	m	class:SBPL2DGridSearch
searchStates2D_	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGridSearchState** searchStates2D_;$/;"	m	class:SBPL2DGridSearch
startX_	src/include/sbpl/utils/2Dgridsearch.h	/^    int startX_, startY_;$/;"	m	class:SBPL2DGridSearch
startY_	src/include/sbpl/utils/2Dgridsearch.h	/^    int startX_, startY_;$/;"	m	class:SBPL2DGridSearch
term_condition_usedlast	src/include/sbpl/utils/2Dgridsearch.h	/^    SBPL_2DGRIDSEARCH_TERM_CONDITION term_condition_usedlast;$/;"	m	class:SBPL2DGridSearch
width_	src/include/sbpl/utils/2Dgridsearch.h	/^    int width_, height_;$/;"	m	class:SBPL2DGridSearch
withinMap	src/include/sbpl/utils/2Dgridsearch.h	/^    inline bool withinMap(int x, int y)$/;"	f	class:SBPL2DGridSearch
x	src/include/sbpl/utils/2Dgridsearch.h	/^    int x, y;$/;"	m	class:SBPL_2DGridSearchState
y	src/include/sbpl/utils/2Dgridsearch.h	/^    int x, y;$/;"	m	class:SBPL_2DGridSearchState
~SBPL2DGridSearch	src/include/sbpl/utils/2Dgridsearch.h	/^    ~SBPL2DGridSearch()$/;"	f	class:SBPL2DGridSearch
~SBPL_2DGridSearchState	src/include/sbpl/utils/2Dgridsearch.h	/^    ~SBPL_2DGridSearchState() { }$/;"	f	class:SBPL_2DGridSearchState
CHeap	src/include/sbpl/utils/heap.h	/^class CHeap$/;"	c
CIntHeap	src/include/sbpl/utils/heap.h	/^class CIntHeap$/;"	c
HEAPELEMENT	src/include/sbpl/utils/heap.h	/^struct HEAPELEMENT$/;"	s
HEAPINTELEMENT	src/include/sbpl/utils/heap.h	/^struct HEAPINTELEMENT$/;"	s
HEAPSIZE	src/include/sbpl/utils/heap.h	37;"	d
HEAPSIZE_INIT	src/include/sbpl/utils/heap.h	38;"	d
__HEAP_H_	src/include/sbpl/utils/heap.h	31;"	d
allocated	src/include/sbpl/utils/heap.h	/^    int allocated;$/;"	m	class:CHeap
allocated	src/include/sbpl/utils/heap.h	/^    int allocated;$/;"	m	class:CIntHeap
currentsize	src/include/sbpl/utils/heap.h	/^    int currentsize;$/;"	m	class:CHeap
currentsize	src/include/sbpl/utils/heap.h	/^    int currentsize;$/;"	m	class:CIntHeap
heap	src/include/sbpl/utils/heap.h	/^    heapelement* heap;$/;"	m	class:CHeap
heap	src/include/sbpl/utils/heap.h	/^    heapintelement* heap;$/;"	m	class:CIntHeap
heapelement	src/include/sbpl/utils/heap.h	/^typedef struct HEAPELEMENT heapelement;$/;"	t	typeref:struct:HEAPELEMENT
heapintelement	src/include/sbpl/utils/heap.h	/^typedef struct HEAPINTELEMENT heapintelement;$/;"	t	typeref:struct:HEAPINTELEMENT
heapstate	src/include/sbpl/utils/heap.h	/^    AbstractSearchState *heapstate;$/;"	m	struct:HEAPELEMENT
heapstate	src/include/sbpl/utils/heap.h	/^    AbstractSearchState *heapstate;$/;"	m	struct:HEAPINTELEMENT
key	src/include/sbpl/utils/heap.h	/^    CKey key;$/;"	m	struct:HEAPELEMENT
key	src/include/sbpl/utils/heap.h	/^    int key;$/;"	m	struct:HEAPINTELEMENT
percolates	src/include/sbpl/utils/heap.h	/^    int percolates; \/\/for counting purposes$/;"	m	class:CHeap
percolates	src/include/sbpl/utils/heap.h	/^    int percolates; \/\/for counting purposes$/;"	m	class:CIntHeap
CKey	src/include/sbpl/utils/key.h	/^    CKey()$/;"	f	class:CKey
CKey	src/include/sbpl/utils/key.h	/^class CKey$/;"	c
INFINITECOST	src/include/sbpl/utils/key.h	35;"	d
KEY_SIZE	src/include/sbpl/utils/key.h	33;"	d
SetKeytoInfinity	src/include/sbpl/utils/key.h	/^    void SetKeytoInfinity()$/;"	f	class:CKey
SetKeytoZero	src/include/sbpl/utils/key.h	/^    void SetKeytoZero()$/;"	f	class:CKey
__KEY_H_	src/include/sbpl/utils/key.h	31;"	d
key	src/include/sbpl/utils/key.h	/^    long int key[KEY_SIZE];$/;"	m	class:CKey
operator !=	src/include/sbpl/utils/key.h	/^    bool operator !=(CKey& RHSKey)$/;"	f	class:CKey
operator -	src/include/sbpl/utils/key.h	/^    CKey operator -(const CKey& RHSKey) const$/;"	f	class:CKey
operator <	src/include/sbpl/utils/key.h	/^    bool operator <(CKey& RHSKey)$/;"	f	class:CKey
operator <=	src/include/sbpl/utils/key.h	/^    bool operator <=(CKey& RHSKey) { return !(*this > RHSKey); }$/;"	f	class:CKey
operator =	src/include/sbpl/utils/key.h	/^    void operator =(CKey RHSKey)$/;"	f	class:CKey
operator ==	src/include/sbpl/utils/key.h	/^    bool operator ==(CKey& RHSKey)$/;"	f	class:CKey
operator >	src/include/sbpl/utils/key.h	/^    bool operator >(CKey& RHSKey)$/;"	f	class:CKey
operator >=	src/include/sbpl/utils/key.h	/^    bool operator >=(CKey& RHSKey) { return !(*this < RHSKey); }$/;"	f	class:CKey
operator []	src/include/sbpl/utils/key.h	/^    long int operator [](int i) { return key[i]; }$/;"	f	class:CKey
~CKey	src/include/sbpl/utils/key.h	/^    ~CKey() { }$/;"	f	class:CKey
CBucket	src/include/sbpl/utils/list.h	/^    CBucket(int first_priority, int max_bucketed_priority)$/;"	f	class:CBucket
CBucket	src/include/sbpl/utils/list.h	/^class CBucket$/;"	c
CList	src/include/sbpl/utils/list.h	/^    CList()$/;"	f	class:CList
CList	src/include/sbpl/utils/list.h	/^class CList$/;"	c
CSlidingBucket	src/include/sbpl/utils/list.h	/^    CSlidingBucket(int num_of_buckets, int bucket_size)$/;"	f	class:CSlidingBucket
CSlidingBucket	src/include/sbpl/utils/list.h	/^class CSlidingBucket$/;"	c
LISTSIZE	src/include/sbpl/utils/list.h	38;"	d
__LIST_H_	src/include/sbpl/utils/list.h	31;"	d
assortedpriorityV	src/include/sbpl/utils/list.h	/^    std::vector<int> assortedpriorityV; $/;"	m	class:CBucket
bucketV	src/include/sbpl/utils/list.h	/^    AbstractSearchState*** bucketV;$/;"	m	class:CSlidingBucket
bucketV	src/include/sbpl/utils/list.h	/^    std::vector<AbstractSearchState *>* bucketV;$/;"	m	class:CBucket
bucketsize	src/include/sbpl/utils/list.h	/^    int bucketsize;$/;"	m	class:CSlidingBucket
createbucket	src/include/sbpl/utils/list.h	/^    void createbucket(int bucketindex)$/;"	f	class:CSlidingBucket
currentfirstbucket_bindex	src/include/sbpl/utils/list.h	/^    int currentfirstbucket_bindex; \/\/index of the bucket that corresponds to the first bucket in the list (lowest priority)$/;"	m	class:CSlidingBucket
currentfirstbucket_priority	src/include/sbpl/utils/list.h	/^    int currentfirstbucket_priority; \/\/priority of the first bucket in the list$/;"	m	class:CSlidingBucket
currentmaxelement_priority	src/include/sbpl/utils/list.h	/^    int currentmaxelement_priority; \/\/the maxelement priority in the list$/;"	m	class:CSlidingBucket
currentminelement_bindex	src/include/sbpl/utils/list.h	/^    int currentminelement_bindex; \/\/index of the bucket of the current min element$/;"	m	class:CSlidingBucket
currentminelement_bucketVind	src/include/sbpl/utils/list.h	/^    int currentminelement_bucketVind; \/\/index within the bucket$/;"	m	class:CBucket
currentminelement_bucketind	src/include/sbpl/utils/list.h	/^    int currentminelement_bucketind;$/;"	m	class:CBucket
currentminelement_index	src/include/sbpl/utils/list.h	/^    int currentminelement_index; \/\/index of the current minelement in the bucket$/;"	m	class:CSlidingBucket
currentminelement_priority	src/include/sbpl/utils/list.h	/^    int currentminelement_priority; \/\/the priority of the current minelement$/;"	m	class:CSlidingBucket
currentminelement_priority	src/include/sbpl/utils/list.h	/^    int currentminelement_priority;$/;"	m	class:CBucket
currentsize	src/include/sbpl/utils/list.h	/^    int currentsize;$/;"	m	class:CList
empty	src/include/sbpl/utils/list.h	/^    bool empty() { return (currentsize == 0); }$/;"	f	class:CList
empty	src/include/sbpl/utils/list.h	/^    bool empty()$/;"	f	class:CBucket
empty	src/include/sbpl/utils/list.h	/^    inline bool empty()$/;"	f	class:CSlidingBucket
firstelement	src/include/sbpl/utils/list.h	/^    listelement* firstelement;$/;"	m	class:CList
firstpriority	src/include/sbpl/utils/list.h	/^    int firstpriority;$/;"	m	class:CBucket
full	src/include/sbpl/utils/list.h	/^    bool full() { return (currentsize >= LISTSIZE); }$/;"	f	class:CList
getfirst	src/include/sbpl/utils/list.h	/^    AbstractSearchState *getfirst()$/;"	f	class:CList
getlast	src/include/sbpl/utils/list.h	/^    AbstractSearchState *getlast()$/;"	f	class:CList
getminelement	src/include/sbpl/utils/list.h	/^    AbstractSearchState *getminelement()$/;"	f	class:CBucket
getminelement	src/include/sbpl/utils/list.h	/^    AbstractSearchState *getminelement()$/;"	f	class:CSlidingBucket
getminkey	src/include/sbpl/utils/list.h	/^    inline int getminkey()$/;"	f	class:CSlidingBucket
getminpriority	src/include/sbpl/utils/list.h	/^    int getminpriority()$/;"	f	class:CBucket
getnext	src/include/sbpl/utils/list.h	/^    AbstractSearchState *getnext(AbstractSearchState* AbstractSearchState1, int listindex)$/;"	f	class:CList
in	src/include/sbpl/utils/list.h	/^    bool in(AbstractSearchState *AbstractSearchState1, int listindex)$/;"	f	class:CList
insert	src/include/sbpl/utils/list.h	/^    void insert(AbstractSearchState *AbstractSearchState1, int listindex)$/;"	f	class:CList
insert	src/include/sbpl/utils/list.h	/^    void insert(AbstractSearchState *AbstractSearchState1, int priority)$/;"	f	class:CBucket
insert	src/include/sbpl/utils/list.h	/^    void insert(AbstractSearchState *AbstractSearchState1, int priority)$/;"	f	class:CSlidingBucket
insertinfront	src/include/sbpl/utils/list.h	/^    void insertinfront(AbstractSearchState *AbstractSearchState1, int listindex)$/;"	f	class:CList
lastelement	src/include/sbpl/utils/list.h	/^    listelement* lastelement;$/;"	m	class:CList
lastelementindexV	src/include/sbpl/utils/list.h	/^    int* lastelementindexV; \/\/index of the last element for each bucket$/;"	m	class:CSlidingBucket
listelement	src/include/sbpl/utils/list.h	/^struct listelement$/;"	s
listelement	src/include/sbpl/utils/list.h	/^typedef struct listelement listelement;$/;"	t	typeref:struct:listelement
liststate	src/include/sbpl/utils/list.h	/^    AbstractSearchState *liststate;$/;"	m	struct:listelement
makeemptybucketV	src/include/sbpl/utils/list.h	/^    void makeemptybucketV()$/;"	f	class:CBucket
makeemptylist	src/include/sbpl/utils/list.h	/^    void makeemptylist(int listindex)$/;"	f	class:CList
maxassortedpriorityVsize	src/include/sbpl/utils/list.h	/^    int maxassortedpriorityVsize;$/;"	m	class:CBucket
next	src/include/sbpl/utils/list.h	/^    struct listelement *next;$/;"	m	struct:listelement	typeref:struct:listelement::listelement
numofbuckets	src/include/sbpl/utils/list.h	/^    int numofbuckets;$/;"	m	class:CBucket
numofbuckets	src/include/sbpl/utils/list.h	/^    int numofbuckets;$/;"	m	class:CSlidingBucket
popminelement	src/include/sbpl/utils/list.h	/^    AbstractSearchState *popminelement()$/;"	f	class:CBucket
popminelement	src/include/sbpl/utils/list.h	/^    AbstractSearchState *popminelement()$/;"	f	class:CSlidingBucket
prev	src/include/sbpl/utils/list.h	/^    struct listelement *prev;$/;"	m	struct:listelement	typeref:struct:listelement::listelement
recomputeandreturnmin	src/include/sbpl/utils/list.h	/^    AbstractSearchState *recomputeandreturnmin()$/;"	f	class:CSlidingBucket
recomputeminelementupfrombucket	src/include/sbpl/utils/list.h	/^    void recomputeminelementupfrombucket(int startbucketindex)$/;"	f	class:CBucket
remove	src/include/sbpl/utils/list.h	/^    void remove(AbstractSearchState *AbstractSearchState1, int listindex)$/;"	f	class:CList
remove	src/include/sbpl/utils/list.h	/^    void remove(AbstractSearchState *AbstractSearchState1, int priorityattimeofinsertion)$/;"	f	class:CBucket
removestategivenbucketindex	src/include/sbpl/utils/list.h	/^    void removestategivenbucketindex(AbstractSearchState *AbstractSearchState1, int bucketindex)$/;"	f	class:CBucket
reset	src/include/sbpl/utils/list.h	/^    bool reset(int first_priority, int max_bucketed_priority)$/;"	f	class:CBucket
reset	src/include/sbpl/utils/list.h	/^    void reset()$/;"	f	class:CSlidingBucket
~CBucket	src/include/sbpl/utils/list.h	/^    ~CBucket()$/;"	f	class:CBucket
~CList	src/include/sbpl/utils/list.h	/^    ~CList()$/;"	f	class:CList
~CSlidingBucket	src/include/sbpl/utils/list.h	/^    ~CSlidingBucket()$/;"	f	class:CSlidingBucket
ActionID	src/include/sbpl/utils/mdp.h	/^    int ActionID;$/;"	m	class:CMDPACTION
Actions	src/include/sbpl/utils/mdp.h	/^    std::vector<CMDPACTION*> Actions;$/;"	m	class:CMDPSTATE
CMDP	src/include/sbpl/utils/mdp.h	/^    CMDP() { }$/;"	f	class:CMDP
CMDP	src/include/sbpl/utils/mdp.h	/^class CMDP$/;"	c
CMDPACTION	src/include/sbpl/utils/mdp.h	/^    CMDPACTION(int ID, int sourcestateid)$/;"	f	class:CMDPACTION
CMDPACTION	src/include/sbpl/utils/mdp.h	/^class CMDPACTION$/;"	c
CMDPSTATE	src/include/sbpl/utils/mdp.h	/^    CMDPSTATE(int ID)$/;"	f	class:CMDPSTATE
CMDPSTATE	src/include/sbpl/utils/mdp.h	/^class CMDPSTATE$/;"	c
Costs	src/include/sbpl/utils/mdp.h	/^    std::vector<int> Costs;$/;"	m	class:CMDPACTION
EPS_ERROR	src/include/sbpl/utils/mdp.h	38;"	d
MAXSTATESPACESIZE	src/include/sbpl/utils/mdp.h	41;"	d
PlannerSpecificData	src/include/sbpl/utils/mdp.h	/^    void* PlannerSpecificData;$/;"	m	class:CMDPACTION
PlannerSpecificData	src/include/sbpl/utils/mdp.h	/^    void* PlannerSpecificData;$/;"	m	class:CMDPSTATE
PredsID	src/include/sbpl/utils/mdp.h	/^    std::vector<int> PredsID;$/;"	m	class:CMDPSTATE
SourceStateID	src/include/sbpl/utils/mdp.h	/^    int SourceStateID;$/;"	m	class:CMDPACTION
StateArray	src/include/sbpl/utils/mdp.h	/^    std::vector<CMDPSTATE*> StateArray;$/;"	m	class:CMDP
StateID	src/include/sbpl/utils/mdp.h	/^    int StateID;$/;"	m	class:CMDPSTATE
SuccsID	src/include/sbpl/utils/mdp.h	/^    std::vector<int> SuccsID;$/;"	m	class:CMDPACTION
SuccsProb	src/include/sbpl/utils/mdp.h	/^    std::vector<float> SuccsProb;$/;"	m	class:CMDPACTION
__MDP_H_	src/include/sbpl/utils/mdp.h	31;"	d
~CMDP	src/include/sbpl/utils/mdp.h	/^    ~CMDP() { }$/;"	f	class:CMDP
~CMDPACTION	src/include/sbpl/utils/mdp.h	/^    ~CMDPACTION()$/;"	f	class:CMDPACTION
~CMDPSTATE	src/include/sbpl/utils/mdp.h	/^    ~CMDPSTATE()$/;"	f	class:CMDPSTATE
MDPConfig	src/include/sbpl/utils/mdpconfig.h	/^struct MDPConfig$/;"	s
__MDPCONFIG_H_	src/include/sbpl/utils/mdpconfig.h	31;"	d
goalstateid	src/include/sbpl/utils/mdpconfig.h	/^    int goalstateid;$/;"	m	struct:MDPConfig
startstateid	src/include/sbpl/utils/mdpconfig.h	/^    int startstateid;$/;"	m	struct:MDPConfig
NUM_ACTIONS	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    const int NUM_ACTIONS;$/;"	m	class:sbpl_bfs_2d
SBPL_BFS_2D	src/include/sbpl/utils/sbpl_bfs_2d.h	2;"	d
bfs_cell_2d	src/include/sbpl/utils/sbpl_bfs_2d.h	/^        bfs_cell_2d()$/;"	f	class:sbpl_bfs_2d::bfs_cell_2d
bfs_cell_2d	src/include/sbpl/utils/sbpl_bfs_2d.h	/^        bfs_cell_2d(int tempX, int tempY)$/;"	f	class:sbpl_bfs_2d::bfs_cell_2d
bfs_cell_2d	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    class bfs_cell_2d$/;"	c	class:sbpl_bfs_2d
clear_distances	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    void clear_distances()$/;"	f	class:sbpl_bfs_2d
compute_distance_from_obs	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    void compute_distance_from_obs(int** grid)$/;"	f	class:sbpl_bfs_2d
compute_distance_from_point	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    bool compute_distance_from_point(int** grid, int x, int y)$/;"	f	class:sbpl_bfs_2d
compute_distance_from_points	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    bool compute_distance_from_points(int** grid, std::vector<int> x, std::vector<int> y)$/;"	f	class:sbpl_bfs_2d
compute_distances	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    void compute_distances(int** grid)$/;"	f	class:sbpl_bfs_2d
dist_	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    int** dist_;$/;"	m	class:sbpl_bfs_2d
dx	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    int* dx;$/;"	m	class:sbpl_bfs_2d
dy	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    int* dy;$/;"	m	class:sbpl_bfs_2d
get_distance	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    int get_distance(unsigned int x, unsigned int y)$/;"	f	class:sbpl_bfs_2d
q_	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    sbpl_fifo<bfs_cell_2d>* q_;$/;"	m	class:sbpl_bfs_2d
sbpl_bfs_2d	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    sbpl_bfs_2d(unsigned int sx, unsigned int sy, int obs_thresh, int fifo_size = -1) :$/;"	f	class:sbpl_bfs_2d
sbpl_bfs_2d	src/include/sbpl/utils/sbpl_bfs_2d.h	/^class sbpl_bfs_2d$/;"	c
size_x_	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    int size_x_;$/;"	m	class:sbpl_bfs_2d
size_y_	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    int size_y_;$/;"	m	class:sbpl_bfs_2d
thresh_	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    int thresh_;$/;"	m	class:sbpl_bfs_2d
x	src/include/sbpl/utils/sbpl_bfs_2d.h	/^        int x;$/;"	m	class:sbpl_bfs_2d::bfs_cell_2d
y	src/include/sbpl/utils/sbpl_bfs_2d.h	/^        int y;$/;"	m	class:sbpl_bfs_2d::bfs_cell_2d
~sbpl_bfs_2d	src/include/sbpl/utils/sbpl_bfs_2d.h	/^    ~sbpl_bfs_2d()$/;"	f	class:sbpl_bfs_2d
NUM_ACTIONS	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    const int NUM_ACTIONS;$/;"	m	class:sbpl_bfs_3d
SBPL_BFS_3D	src/include/sbpl/utils/sbpl_bfs_3d.h	2;"	d
bfs_cell_3d	src/include/sbpl/utils/sbpl_bfs_3d.h	/^        bfs_cell_3d()$/;"	f	class:sbpl_bfs_3d::bfs_cell_3d
bfs_cell_3d	src/include/sbpl/utils/sbpl_bfs_3d.h	/^        bfs_cell_3d(int tempX, int tempY, int tempZ)$/;"	f	class:sbpl_bfs_3d::bfs_cell_3d
bfs_cell_3d	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    class bfs_cell_3d$/;"	c	class:sbpl_bfs_3d
clear_distances	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    void clear_distances()$/;"	f	class:sbpl_bfs_3d
compute_distance_from_obs	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    void compute_distance_from_obs(int*** grid)$/;"	f	class:sbpl_bfs_3d
compute_distance_from_point	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    bool compute_distance_from_point(int*** grid, int x, int y, int z)$/;"	f	class:sbpl_bfs_3d
compute_distance_from_points	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    bool compute_distance_from_points(int*** grid, std::vector<int> x, std::vector<int> y, std::vector<int> z)$/;"	f	class:sbpl_bfs_3d
compute_distances	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    void compute_distances(int*** grid)$/;"	f	class:sbpl_bfs_3d
dist_	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    int*** dist_;$/;"	m	class:sbpl_bfs_3d
dx	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    int* dx;$/;"	m	class:sbpl_bfs_3d
dy	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    int* dy;$/;"	m	class:sbpl_bfs_3d
dz	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    int* dz;$/;"	m	class:sbpl_bfs_3d
get_distance	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    int get_distance(unsigned int x, unsigned int y, unsigned int z)$/;"	f	class:sbpl_bfs_3d
q_	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    sbpl_fifo<bfs_cell_3d>* q_;$/;"	m	class:sbpl_bfs_3d
sbpl_bfs_3d	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    sbpl_bfs_3d(unsigned int sx, unsigned int sy, unsigned int sz, int obs_thresh, int fifo_size = -1) :$/;"	f	class:sbpl_bfs_3d
sbpl_bfs_3d	src/include/sbpl/utils/sbpl_bfs_3d.h	/^class sbpl_bfs_3d$/;"	c
size_x_	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    int size_x_;$/;"	m	class:sbpl_bfs_3d
size_y_	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    int size_y_;$/;"	m	class:sbpl_bfs_3d
size_z_	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    int size_z_;$/;"	m	class:sbpl_bfs_3d
thresh_	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    int thresh_;$/;"	m	class:sbpl_bfs_3d
x	src/include/sbpl/utils/sbpl_bfs_3d.h	/^        int x;$/;"	m	class:sbpl_bfs_3d::bfs_cell_3d
y	src/include/sbpl/utils/sbpl_bfs_3d.h	/^        int y;$/;"	m	class:sbpl_bfs_3d::bfs_cell_3d
z	src/include/sbpl/utils/sbpl_bfs_3d.h	/^        int z;$/;"	m	class:sbpl_bfs_3d::bfs_cell_3d
~sbpl_bfs_3d	src/include/sbpl/utils/sbpl_bfs_3d.h	/^    ~sbpl_bfs_3d()$/;"	f	class:sbpl_bfs_3d
SBPL_FIFO	src/include/sbpl/utils/sbpl_fifo.h	2;"	d
clear	src/include/sbpl/utils/sbpl_fifo.h	/^    void clear()$/;"	f	class:sbpl_fifo
empty	src/include/sbpl/utils/sbpl_fifo.h	/^    bool empty()$/;"	f	class:sbpl_fifo
head_	src/include/sbpl/utils/sbpl_fifo.h	/^    int head_;$/;"	m	class:sbpl_fifo
insert	src/include/sbpl/utils/sbpl_fifo.h	/^    bool insert(T val)$/;"	f	class:sbpl_fifo
q_	src/include/sbpl/utils/sbpl_fifo.h	/^    T* q_;$/;"	m	class:sbpl_fifo
remove	src/include/sbpl/utils/sbpl_fifo.h	/^    bool remove(T* val)$/;"	f	class:sbpl_fifo
sbpl_fifo	src/include/sbpl/utils/sbpl_fifo.h	/^    sbpl_fifo(unsigned int size)$/;"	f	class:sbpl_fifo
sbpl_fifo	src/include/sbpl/utils/sbpl_fifo.h	/^class sbpl_fifo$/;"	c
size_	src/include/sbpl/utils/sbpl_fifo.h	/^    int size_;$/;"	m	class:sbpl_fifo
tail_	src/include/sbpl/utils/sbpl_fifo.h	/^    int tail_;$/;"	m	class:sbpl_fifo
~sbpl_fifo	src/include/sbpl/utils/sbpl_fifo.h	/^    ~sbpl_fifo()$/;"	f	class:sbpl_fifo
BELIEFSTATEWITHBINARYHVALS	src/include/sbpl/utils/utils.h	/^typedef struct BELIEFSTATEWITHBINARYHVALS$/;"	s
BINARYHIDDENVARIABLE	src/include/sbpl/utils/utils.h	/^typedef struct BINARYHIDDENVARIABLE$/;"	s
BeliefState	src/include/sbpl/utils/utils.h	/^    sbpl_BeliefStatewithBinaryh_t BeliefState; \/\/current belief state$/;"	m	struct:POLICYBELIEFSTATEWITHBINARYHVALS
CONTXY2DISC	src/include/sbpl/utils/utils.h	51;"	d
DISCXY2CONT	src/include/sbpl/utils/utils.h	52;"	d
DTerm	src/include/sbpl/utils/utils.h	/^    int DTerm;$/;"	m	struct:__anon12
DeltaX	src/include/sbpl/utils/utils.h	/^    int DeltaX, DeltaY;$/;"	m	struct:__anon12
DeltaY	src/include/sbpl/utils/utils.h	/^    int DeltaX, DeltaY;$/;"	m	struct:__anon12
EnvNAVXYTHETALAT2Dpt_t	src/include/sbpl/utils/utils.h	43;"	d
EnvNAVXYTHETALAT3Dcell_t	src/include/sbpl/utils/utils.h	45;"	d
EnvNAVXYTHETALAT3Dpt_t	src/include/sbpl/utils/utils.h	44;"	d
Flipped	src/include/sbpl/utils/utils.h	/^    int Flipped;$/;"	m	struct:__anon12
IncrE	src/include/sbpl/utils/utils.h	/^    int IncrE, IncrNE;$/;"	m	struct:__anon12
IncrNE	src/include/sbpl/utils/utils.h	/^    int IncrE, IncrNE;$/;"	m	struct:__anon12
Increment	src/include/sbpl/utils/utils.h	/^    int Increment;$/;"	m	struct:__anon12
NORMALIZEDISCTHETA	src/include/sbpl/utils/utils.h	47;"	d
PI_CONST	src/include/sbpl/utils/utils.h	54;"	d
POLICYBELIEFSTATEWITHBINARYHVALS	src/include/sbpl/utils/utils.h	/^typedef struct POLICYBELIEFSTATEWITHBINARYHVALS$/;"	s
Prob	src/include/sbpl/utils/utils.h	/^    unsigned char Prob;$/;"	m	struct:BINARYHIDDENVARIABLE
UNKNOWN_COST	src/include/sbpl/utils/utils.h	56;"	d
UsingYIndex	src/include/sbpl/utils/utils.h	/^    int UsingYIndex;$/;"	m	struct:__anon12
X1	src/include/sbpl/utils/utils.h	/^    int X1, Y1;$/;"	m	struct:__anon12
X2	src/include/sbpl/utils/utils.h	/^    int X2, Y2;$/;"	m	struct:__anon12
XIndex	src/include/sbpl/utils/utils.h	/^    int XIndex, YIndex;$/;"	m	struct:__anon12
Y1	src/include/sbpl/utils/utils.h	/^    int X1, Y1;$/;"	m	struct:__anon12
Y2	src/include/sbpl/utils/utils.h	/^    int X2, Y2;$/;"	m	struct:__anon12
YIndex	src/include/sbpl/utils/utils.h	/^    int XIndex, YIndex;$/;"	m	struct:__anon12
__UTILS_H_	src/include/sbpl/utils/utils.h	31;"	d
__max	src/include/sbpl/utils/utils.h	38;"	d
__min	src/include/sbpl/utils/utils.h	39;"	d
bresenham_param_t	src/include/sbpl/utils/utils.h	/^} bresenham_param_t;$/;"	t	typeref:struct:__anon12
h_ID	src/include/sbpl/utils/utils.h	/^    int h_ID; \/\/ID of the variable$/;"	m	struct:BINARYHIDDENVARIABLE
nav2dcell_t	src/include/sbpl/utils/utils.h	42;"	d
nextpolicyactionID	src/include/sbpl/utils/utils.h	/^    int nextpolicyactionID; \/\/ID of the next policy action if exists (otherwise -1)$/;"	m	struct:POLICYBELIEFSTATEWITHBINARYHVALS
operator <	src/include/sbpl/utils/utils.h	/^    bool operator<(const sbpl_2Dcell_t cell) const$/;"	f	class:sbpl_2Dcell_t
operator <	src/include/sbpl/utils/utils.h	/^    bool operator<(const sbpl_2Dpt_t p) const$/;"	f	class:sbpl_2Dpt_t
operator <	src/include/sbpl/utils/utils.h	/^    bool operator<(const sbpl_xy_theta_cell_t cell) const$/;"	f	class:sbpl_xy_theta_cell_t
operator <	src/include/sbpl/utils/utils.h	/^    bool operator<(const sbpl_xy_theta_pt_t p) const$/;"	f	class:sbpl_xy_theta_pt_t
operator ==	src/include/sbpl/utils/utils.h	/^    bool operator==(const sbpl_2Dcell_t cell) const$/;"	f	class:sbpl_2Dcell_t
operator ==	src/include/sbpl/utils/utils.h	/^    bool operator==(const sbpl_2Dpt_t p) const$/;"	f	class:sbpl_2Dpt_t
operator ==	src/include/sbpl/utils/utils.h	/^    bool operator==(const sbpl_xy_theta_cell_t cell) const$/;"	f	class:sbpl_xy_theta_cell_t
operator ==	src/include/sbpl/utils/utils.h	/^    bool operator==(const sbpl_xy_theta_pt_t p) const$/;"	f	class:sbpl_xy_theta_pt_t
outcomestateIndexV	src/include/sbpl/utils/utils.h	/^    std::vector<int> outcomestateIndexV; $/;"	m	struct:POLICYBELIEFSTATEWITHBINARYHVALS
s_ID	src/include/sbpl/utils/utils.h	/^    int s_ID; \/\/ID of S part of state-space$/;"	m	struct:BELIEFSTATEWITHBINARYHVALS
sbpl_2Dcell_t	src/include/sbpl/utils/utils.h	/^    sbpl_2Dcell_t()$/;"	f	class:sbpl_2Dcell_t
sbpl_2Dcell_t	src/include/sbpl/utils/utils.h	/^    sbpl_2Dcell_t(int x_, int y_)$/;"	f	class:sbpl_2Dcell_t
sbpl_2Dcell_t	src/include/sbpl/utils/utils.h	/^class sbpl_2Dcell_t$/;"	c
sbpl_2Dpt_t	src/include/sbpl/utils/utils.h	/^    sbpl_2Dpt_t()$/;"	f	class:sbpl_2Dpt_t
sbpl_2Dpt_t	src/include/sbpl/utils/utils.h	/^    sbpl_2Dpt_t(double x_, double y_)$/;"	f	class:sbpl_2Dpt_t
sbpl_2Dpt_t	src/include/sbpl/utils/utils.h	/^class sbpl_2Dpt_t$/;"	c
sbpl_BeliefStatewithBinaryh_t	src/include/sbpl/utils/utils.h	/^} sbpl_BeliefStatewithBinaryh_t;$/;"	t	typeref:struct:BELIEFSTATEWITHBINARYHVALS
sbpl_BinaryHiddenVar_t	src/include/sbpl/utils/utils.h	/^} sbpl_BinaryHiddenVar_t;$/;"	t	typeref:struct:BINARYHIDDENVARIABLE
sbpl_PolicyStatewithBinaryh_t	src/include/sbpl/utils/utils.h	/^} sbpl_PolicyStatewithBinaryh_t;$/;"	t	typeref:struct:POLICYBELIEFSTATEWITHBINARYHVALS
sbpl_xy_theta_cell_t	src/include/sbpl/utils/utils.h	/^    sbpl_xy_theta_cell_t()$/;"	f	class:sbpl_xy_theta_cell_t
sbpl_xy_theta_cell_t	src/include/sbpl/utils/utils.h	/^    sbpl_xy_theta_cell_t(int x_, int y_, int theta_)$/;"	f	class:sbpl_xy_theta_cell_t
sbpl_xy_theta_cell_t	src/include/sbpl/utils/utils.h	/^class sbpl_xy_theta_cell_t$/;"	c
sbpl_xy_theta_pt_t	src/include/sbpl/utils/utils.h	/^    sbpl_xy_theta_pt_t()$/;"	f	class:sbpl_xy_theta_pt_t
sbpl_xy_theta_pt_t	src/include/sbpl/utils/utils.h	/^    sbpl_xy_theta_pt_t(double x_, double y_, double theta_)$/;"	f	class:sbpl_xy_theta_pt_t
sbpl_xy_theta_pt_t	src/include/sbpl/utils/utils.h	/^class sbpl_xy_theta_pt_t$/;"	c
theta	src/include/sbpl/utils/utils.h	/^    double theta;$/;"	m	class:sbpl_xy_theta_pt_t
theta	src/include/sbpl/utils/utils.h	/^    int theta;$/;"	m	class:sbpl_xy_theta_cell_t
updatedhvaluesV	src/include/sbpl/utils/utils.h	/^    std::vector<sbpl_BinaryHiddenVar_t> updatedhvaluesV; $/;"	m	struct:BELIEFSTATEWITHBINARYHVALS
x	src/include/sbpl/utils/utils.h	/^    double x;$/;"	m	class:sbpl_2Dpt_t
x	src/include/sbpl/utils/utils.h	/^    double x;$/;"	m	class:sbpl_xy_theta_pt_t
x	src/include/sbpl/utils/utils.h	/^    int x;$/;"	m	class:sbpl_2Dcell_t
x	src/include/sbpl/utils/utils.h	/^    int x;$/;"	m	class:sbpl_xy_theta_cell_t
y	src/include/sbpl/utils/utils.h	/^    double y;$/;"	m	class:sbpl_2Dpt_t
y	src/include/sbpl/utils/utils.h	/^    double y;$/;"	m	class:sbpl_xy_theta_pt_t
y	src/include/sbpl/utils/utils.h	/^    int y;$/;"	m	class:sbpl_2Dcell_t
y	src/include/sbpl/utils/utils.h	/^    int y;$/;"	m	class:sbpl_xy_theta_cell_t
ComputeHeuristic	src/planners/ANAplanner.cpp	/^int anaPlanner::ComputeHeuristic(CMDPSTATE* MDPstate, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
CreateSearchStateSpace	src/planners/ANAplanner.cpp	/^int anaPlanner::CreateSearchStateSpace(anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
CreateState	src/planners/ANAplanner.cpp	/^CMDPSTATE* anaPlanner::CreateState(int stateID, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
DeleteSearchStateData	src/planners/ANAplanner.cpp	/^void anaPlanner::DeleteSearchStateData(anaState* state)$/;"	f	class:anaPlanner
DeleteSearchStateSpace	src/planners/ANAplanner.cpp	/^void anaPlanner::DeleteSearchStateSpace(anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
GetGVal	src/planners/ANAplanner.cpp	/^int anaPlanner::GetGVal(int StateID, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
GetSearchPath	src/planners/ANAplanner.cpp	/^vector<int> anaPlanner::GetSearchPath(anaSearchStateSpace_t* pSearchStateSpace, int& solcost)$/;"	f	class:anaPlanner
GetState	src/planners/ANAplanner.cpp	/^CMDPSTATE* anaPlanner::GetState(int stateID, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
ImprovePath	src/planners/ANAplanner.cpp	/^int anaPlanner::ImprovePath(anaSearchStateSpace_t* pSearchStateSpace, double MaxNumofSecs)$/;"	f	class:anaPlanner
InitializeSearchStateInfo	src/planners/ANAplanner.cpp	/^void anaPlanner::InitializeSearchStateInfo(anaState* state, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
InitializeSearchStateSpace	src/planners/ANAplanner.cpp	/^int anaPlanner::InitializeSearchStateSpace(anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
Initialize_searchinfo	src/planners/ANAplanner.cpp	/^void anaPlanner::Initialize_searchinfo(CMDPSTATE* state, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
PrintSearchPath	src/planners/ANAplanner.cpp	/^void anaPlanner::PrintSearchPath(anaSearchStateSpace_t* pSearchStateSpace, FILE* fOut)$/;"	f	class:anaPlanner
PrintSearchState	src/planners/ANAplanner.cpp	/^void anaPlanner::PrintSearchState(anaState* state, FILE* fOut)$/;"	f	class:anaPlanner
ReInitializeSearchStateInfo	src/planners/ANAplanner.cpp	/^void anaPlanner::ReInitializeSearchStateInfo(anaState* state, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
ReInitializeSearchStateSpace	src/planners/ANAplanner.cpp	/^void anaPlanner::ReInitializeSearchStateSpace(anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
ReconstructPath	src/planners/ANAplanner.cpp	/^int anaPlanner::ReconstructPath(anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
Reevaluatefvals	src/planners/ANAplanner.cpp	/^void anaPlanner::Reevaluatefvals(anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
ResetSearchStateSpace	src/planners/ANAplanner.cpp	/^int anaPlanner::ResetSearchStateSpace(anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
Search	src/planners/ANAplanner.cpp	/^bool anaPlanner::Search(anaSearchStateSpace_t* pSearchStateSpace, vector<int>& pathIds, int & PathCost,$/;"	f	class:anaPlanner
SetSearchGoalState	src/planners/ANAplanner.cpp	/^int anaPlanner::SetSearchGoalState(int SearchGoalStateID, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
SetSearchStartState	src/planners/ANAplanner.cpp	/^int anaPlanner::SetSearchStartState(int SearchStartStateID, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
UpdatePreds	src/planners/ANAplanner.cpp	/^void anaPlanner::UpdatePreds(anaState* state, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
UpdateSuccs	src/planners/ANAplanner.cpp	/^void anaPlanner::UpdateSuccs(anaState* state, anaSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:anaPlanner
anaPlanner	src/planners/ANAplanner.cpp	/^anaPlanner::anaPlanner(DiscreteSpaceInformation* environment, bool bSearchForward)$/;"	f	class:anaPlanner
costs_changed	src/planners/ANAplanner.cpp	/^void anaPlanner::costs_changed()$/;"	f	class:anaPlanner
costs_changed	src/planners/ANAplanner.cpp	/^void anaPlanner::costs_changed(StateChangeQuery const & stateChange)$/;"	f	class:anaPlanner
force_planning_from_scratch	src/planners/ANAplanner.cpp	/^int anaPlanner::force_planning_from_scratch()$/;"	f	class:anaPlanner
getHeurValue	src/planners/ANAplanner.cpp	/^int anaPlanner::getHeurValue(anaSearchStateSpace_t* pSearchStateSpace, int StateID)$/;"	f	class:anaPlanner
get_e_value	src/planners/ANAplanner.cpp	/^double anaPlanner::get_e_value(anaSearchStateSpace_t* pSearchStateSpace, int stateID)$/;"	f	class:anaPlanner
print_searchpath	src/planners/ANAplanner.cpp	/^void anaPlanner::print_searchpath(FILE* fOut)$/;"	f	class:anaPlanner
replan	src/planners/ANAplanner.cpp	/^int anaPlanner::replan(double allocated_time_secs, vector<int>* solution_stateIDs_V)$/;"	f	class:anaPlanner
replan	src/planners/ANAplanner.cpp	/^int anaPlanner::replan(double allocated_time_secs, vector<int>* solution_stateIDs_V, int* psolcost)$/;"	f	class:anaPlanner
set_goal	src/planners/ANAplanner.cpp	/^int anaPlanner::set_goal(int goal_stateID)$/;"	f	class:anaPlanner
set_search_mode	src/planners/ANAplanner.cpp	/^int anaPlanner::set_search_mode(bool bSearchUntilFirstSolution)$/;"	f	class:anaPlanner
set_start	src/planners/ANAplanner.cpp	/^int anaPlanner::set_start(int start_stateID)$/;"	f	class:anaPlanner
~anaPlanner	src/planners/ANAplanner.cpp	/^anaPlanner::~anaPlanner()$/;"	f	class:anaPlanner
ADPlanner	src/planners/adplanner.cpp	/^ADPlanner::ADPlanner(DiscreteSpaceInformation* environment, bool bForwardSearch)$/;"	f	class:ADPlanner
BuildNewOPENList	src/planners/adplanner.cpp	/^void ADPlanner::BuildNewOPENList(ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
ComputeHeuristic	src/planners/adplanner.cpp	/^int ADPlanner::ComputeHeuristic(CMDPSTATE* MDPstate, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
ComputeKey	src/planners/adplanner.cpp	/^CKey ADPlanner::ComputeKey(ADState* state)$/;"	f	class:ADPlanner
ComputePath	src/planners/adplanner.cpp	/^int ADPlanner::ComputePath(ADSearchStateSpace_t* pSearchStateSpace, double MaxNumofSecs)$/;"	f	class:ADPlanner
CreateSearchStateSpace	src/planners/adplanner.cpp	/^int ADPlanner::CreateSearchStateSpace(ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
CreateState	src/planners/adplanner.cpp	/^CMDPSTATE* ADPlanner::CreateState(int stateID, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
DeleteSearchStateData	src/planners/adplanner.cpp	/^void ADPlanner::DeleteSearchStateData(ADState* state)$/;"	f	class:ADPlanner
DeleteSearchStateSpace	src/planners/adplanner.cpp	/^void ADPlanner::DeleteSearchStateSpace(ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
GetGVal	src/planners/adplanner.cpp	/^int ADPlanner::GetGVal(int StateID, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
GetSearchPath	src/planners/adplanner.cpp	/^vector<int> ADPlanner::GetSearchPath(ADSearchStateSpace_t* pSearchStateSpace, int& solcost)$/;"	f	class:ADPlanner
GetState	src/planners/adplanner.cpp	/^CMDPSTATE* ADPlanner::GetState(int stateID, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
InitializeSearchStateInfo	src/planners/adplanner.cpp	/^void ADPlanner::InitializeSearchStateInfo(ADState* state, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
InitializeSearchStateSpace	src/planners/adplanner.cpp	/^int ADPlanner::InitializeSearchStateSpace(ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
Initialize_searchinfo	src/planners/adplanner.cpp	/^void ADPlanner::Initialize_searchinfo(CMDPSTATE* state, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
PrintSearchPath	src/planners/adplanner.cpp	/^void ADPlanner::PrintSearchPath(ADSearchStateSpace_t* pSearchStateSpace, FILE* fOut)$/;"	f	class:ADPlanner
PrintSearchState	src/planners/adplanner.cpp	/^void ADPlanner::PrintSearchState(ADState* searchstateinfo, FILE* fOut)$/;"	f	class:ADPlanner
ReInitializeSearchStateInfo	src/planners/adplanner.cpp	/^void ADPlanner::ReInitializeSearchStateInfo(ADState* state, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
ReInitializeSearchStateSpace	src/planners/adplanner.cpp	/^void ADPlanner::ReInitializeSearchStateSpace(ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
Recomputegval	src/planners/adplanner.cpp	/^void ADPlanner::Recomputegval(ADState* state)$/;"	f	class:ADPlanner
ReconstructPath	src/planners/adplanner.cpp	/^int ADPlanner::ReconstructPath(ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
Reevaluatefvals	src/planners/adplanner.cpp	/^void ADPlanner::Reevaluatefvals(ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
Reevaluatehvals	src/planners/adplanner.cpp	/^void ADPlanner::Reevaluatehvals(ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
ResetSearchStateSpace	src/planners/adplanner.cpp	/^int ADPlanner::ResetSearchStateSpace(ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
Search	src/planners/adplanner.cpp	/^bool ADPlanner::Search(ADSearchStateSpace_t* pSearchStateSpace, vector<int>& pathIds, int & PathCost,$/;"	f	class:ADPlanner
SetSearchGoalState	src/planners/adplanner.cpp	/^int ADPlanner::SetSearchGoalState(int SearchGoalStateID, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
SetSearchStartState	src/planners/adplanner.cpp	/^int ADPlanner::SetSearchStartState(int SearchStartStateID, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
UpdatePredsofOverconsState	src/planners/adplanner.cpp	/^void ADPlanner::UpdatePredsofOverconsState(ADState* state, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
UpdatePredsofUnderconsState	src/planners/adplanner.cpp	/^void ADPlanner::UpdatePredsofUnderconsState(ADState* state, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
UpdateSetMembership	src/planners/adplanner.cpp	/^void ADPlanner::UpdateSetMembership(ADState* state)$/;"	f	class:ADPlanner
UpdateSuccsofOverconsState	src/planners/adplanner.cpp	/^void ADPlanner::UpdateSuccsofOverconsState(ADState* state, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
UpdateSuccsofUnderconsState	src/planners/adplanner.cpp	/^void ADPlanner::UpdateSuccsofUnderconsState(ADState* state, ADSearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ADPlanner
Update_SearchSuccs_of_ChangedEdges	src/planners/adplanner.cpp	/^void ADPlanner::Update_SearchSuccs_of_ChangedEdges(vector<int> const * statesIDV)$/;"	f	class:ADPlanner
costs_changed	src/planners/adplanner.cpp	/^void ADPlanner::costs_changed(StateChangeQuery const & stateChange)$/;"	f	class:ADPlanner
force_planning_from_scratch	src/planners/adplanner.cpp	/^int ADPlanner::force_planning_from_scratch()$/;"	f	class:ADPlanner
force_planning_from_scratch_and_free_memory	src/planners/adplanner.cpp	/^int ADPlanner::force_planning_from_scratch_and_free_memory()$/;"	f	class:ADPlanner
getHeurValue	src/planners/adplanner.cpp	/^int ADPlanner::getHeurValue(ADSearchStateSpace_t* pSearchStateSpace, int StateID)$/;"	f	class:ADPlanner
get_search_stats	src/planners/adplanner.cpp	/^void ADPlanner::get_search_stats(vector<PlannerStats>* s)$/;"	f	class:ADPlanner
replan	src/planners/adplanner.cpp	/^int ADPlanner::replan(double allocated_time_secs, vector<int>* solution_stateIDs_V)$/;"	f	class:ADPlanner
replan	src/planners/adplanner.cpp	/^int ADPlanner::replan(double allocated_time_secs, vector<int>* solution_stateIDs_V, int* psolcost)$/;"	f	class:ADPlanner
replan	src/planners/adplanner.cpp	/^int ADPlanner::replan(vector<int>* solution_stateIDs_V, ReplanParams params)$/;"	f	class:ADPlanner
replan	src/planners/adplanner.cpp	/^int ADPlanner::replan(vector<int>* solution_stateIDs_V, ReplanParams params, int* solcost)$/;"	f	class:ADPlanner
set_goal	src/planners/adplanner.cpp	/^int ADPlanner::set_goal(int goal_stateID)$/;"	f	class:ADPlanner
set_search_mode	src/planners/adplanner.cpp	/^int ADPlanner::set_search_mode(bool bSearchUntilFirstSolution)$/;"	f	class:ADPlanner
set_start	src/planners/adplanner.cpp	/^int ADPlanner::set_start(int start_stateID)$/;"	f	class:ADPlanner
update_preds_of_changededges	src/planners/adplanner.cpp	/^void ADPlanner::update_preds_of_changededges(vector<int>* predstatesIDV)$/;"	f	class:ADPlanner
update_succs_of_changededges	src/planners/adplanner.cpp	/^void ADPlanner::update_succs_of_changededges(vector<int>* succstatesIDV)$/;"	f	class:ADPlanner
~ADPlanner	src/planners/adplanner.cpp	/^ADPlanner::~ADPlanner()$/;"	f	class:ADPlanner
ARAPlanner	src/planners/araplanner.cpp	/^ARAPlanner::ARAPlanner(DiscreteSpaceInformation* environment, bool bSearchForward)$/;"	f	class:ARAPlanner
BuildNewOPENList	src/planners/araplanner.cpp	/^void ARAPlanner::BuildNewOPENList(ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
ComputeHeuristic	src/planners/araplanner.cpp	/^int ARAPlanner::ComputeHeuristic(CMDPSTATE* MDPstate, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
CreateSearchStateSpace	src/planners/araplanner.cpp	/^int ARAPlanner::CreateSearchStateSpace(ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
CreateState	src/planners/araplanner.cpp	/^CMDPSTATE* ARAPlanner::CreateState(int stateID, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
DeleteSearchStateData	src/planners/araplanner.cpp	/^void ARAPlanner::DeleteSearchStateData(ARAState* state)$/;"	f	class:ARAPlanner
DeleteSearchStateSpace	src/planners/araplanner.cpp	/^void ARAPlanner::DeleteSearchStateSpace(ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
GetGVal	src/planners/araplanner.cpp	/^int ARAPlanner::GetGVal(int StateID, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
GetSearchPath	src/planners/araplanner.cpp	/^vector<int> ARAPlanner::GetSearchPath(ARASearchStateSpace_t* pSearchStateSpace, int& solcost)$/;"	f	class:ARAPlanner
GetState	src/planners/araplanner.cpp	/^CMDPSTATE* ARAPlanner::GetState(int stateID, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
ImprovePath	src/planners/araplanner.cpp	/^int ARAPlanner::ImprovePath(ARASearchStateSpace_t* pSearchStateSpace, double MaxNumofSecs)$/;"	f	class:ARAPlanner
InitializeSearchStateInfo	src/planners/araplanner.cpp	/^void ARAPlanner::InitializeSearchStateInfo(ARAState* state, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
InitializeSearchStateSpace	src/planners/araplanner.cpp	/^int ARAPlanner::InitializeSearchStateSpace(ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
Initialize_searchinfo	src/planners/araplanner.cpp	/^void ARAPlanner::Initialize_searchinfo(CMDPSTATE* state, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
PrintSearchPath	src/planners/araplanner.cpp	/^void ARAPlanner::PrintSearchPath(ARASearchStateSpace_t* pSearchStateSpace, FILE* fOut)$/;"	f	class:ARAPlanner
PrintSearchState	src/planners/araplanner.cpp	/^void ARAPlanner::PrintSearchState(ARAState* state, FILE* fOut)$/;"	f	class:ARAPlanner
ReInitializeSearchStateInfo	src/planners/araplanner.cpp	/^void ARAPlanner::ReInitializeSearchStateInfo(ARAState* state, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
ReInitializeSearchStateSpace	src/planners/araplanner.cpp	/^void ARAPlanner::ReInitializeSearchStateSpace(ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
ReconstructPath	src/planners/araplanner.cpp	/^int ARAPlanner::ReconstructPath(ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
Reevaluatefvals	src/planners/araplanner.cpp	/^void ARAPlanner::Reevaluatefvals(ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
Reevaluatehvals	src/planners/araplanner.cpp	/^void ARAPlanner::Reevaluatehvals(ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
ResetSearchStateSpace	src/planners/araplanner.cpp	/^int ARAPlanner::ResetSearchStateSpace(ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
Search	src/planners/araplanner.cpp	/^bool ARAPlanner::Search(ARASearchStateSpace_t* pSearchStateSpace, vector<int>& pathIds, int & PathCost,$/;"	f	class:ARAPlanner
SetSearchGoalState	src/planners/araplanner.cpp	/^int ARAPlanner::SetSearchGoalState(int SearchGoalStateID, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
SetSearchStartState	src/planners/araplanner.cpp	/^int ARAPlanner::SetSearchStartState(int SearchStartStateID, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
UpdatePreds	src/planners/araplanner.cpp	/^void ARAPlanner::UpdatePreds(ARAState* state, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
UpdateSuccs	src/planners/araplanner.cpp	/^void ARAPlanner::UpdateSuccs(ARAState* state, ARASearchStateSpace_t* pSearchStateSpace)$/;"	f	class:ARAPlanner
costs_changed	src/planners/araplanner.cpp	/^void ARAPlanner::costs_changed()$/;"	f	class:ARAPlanner
costs_changed	src/planners/araplanner.cpp	/^void ARAPlanner::costs_changed(StateChangeQuery const & stateChange)$/;"	f	class:ARAPlanner
force_planning_from_scratch	src/planners/araplanner.cpp	/^int ARAPlanner::force_planning_from_scratch()$/;"	f	class:ARAPlanner
force_planning_from_scratch_and_free_memory	src/planners/araplanner.cpp	/^int ARAPlanner::force_planning_from_scratch_and_free_memory()$/;"	f	class:ARAPlanner
getHeurValue	src/planners/araplanner.cpp	/^int ARAPlanner::getHeurValue(ARASearchStateSpace_t* pSearchStateSpace, int StateID)$/;"	f	class:ARAPlanner
get_search_stats	src/planners/araplanner.cpp	/^void ARAPlanner::get_search_stats(vector<PlannerStats>* s)$/;"	f	class:ARAPlanner
print_searchpath	src/planners/araplanner.cpp	/^void ARAPlanner::print_searchpath(FILE* fOut)$/;"	f	class:ARAPlanner
replan	src/planners/araplanner.cpp	/^int ARAPlanner::replan(double allocated_time_secs, vector<int>* solution_stateIDs_V)$/;"	f	class:ARAPlanner
replan	src/planners/araplanner.cpp	/^int ARAPlanner::replan(double allocated_time_secs, vector<int>* solution_stateIDs_V, int* psolcost)$/;"	f	class:ARAPlanner
replan	src/planners/araplanner.cpp	/^int ARAPlanner::replan(vector<int>* solution_stateIDs_V, ReplanParams params)$/;"	f	class:ARAPlanner
replan	src/planners/araplanner.cpp	/^int ARAPlanner::replan(vector<int>* solution_stateIDs_V, ReplanParams params, int* solcost)$/;"	f	class:ARAPlanner
set_goal	src/planners/araplanner.cpp	/^int ARAPlanner::set_goal(int goal_stateID)$/;"	f	class:ARAPlanner
set_search_mode	src/planners/araplanner.cpp	/^int ARAPlanner::set_search_mode(bool bSearchUntilFirstSolution)$/;"	f	class:ARAPlanner
set_start	src/planners/araplanner.cpp	/^int ARAPlanner::set_start(int start_stateID)$/;"	f	class:ARAPlanner
~ARAPlanner	src/planners/araplanner.cpp	/^ARAPlanner::~ARAPlanner()$/;"	f	class:ARAPlanner
EvaluateState	src/planners/lazyARA.cpp	/^void LazyARAPlanner::EvaluateState(LazyARAState* state){$/;"	f	class:LazyARAPlanner
ExpandState	src/planners/lazyARA.cpp	/^void LazyARAPlanner::ExpandState(LazyARAState* parent){$/;"	f	class:LazyARAPlanner
GetSearchPath	src/planners/lazyARA.cpp	/^vector<int> LazyARAPlanner::GetSearchPath(int& solcost){$/;"	f	class:LazyARAPlanner
GetState	src/planners/lazyARA.cpp	/^LazyARAState* LazyARAPlanner::GetState(int id){	$/;"	f	class:LazyARAPlanner
ImprovePath	src/planners/lazyARA.cpp	/^int LazyARAPlanner::ImprovePath(){$/;"	f	class:LazyARAPlanner
LazyARAPlanner	src/planners/lazyARA.cpp	/^LazyARAPlanner::LazyARAPlanner(DiscreteSpaceInformation* environment, bool bSearchForward) :$/;"	f	class:LazyARAPlanner
Search	src/planners/lazyARA.cpp	/^bool LazyARAPlanner::Search(vector<int>& pathIds, int& PathCost){$/;"	f	class:LazyARAPlanner
getNextLazyElement	src/planners/lazyARA.cpp	/^void LazyARAPlanner::getNextLazyElement(LazyARAState* state){$/;"	f	class:LazyARAPlanner
get_search_stats	src/planners/lazyARA.cpp	/^void LazyARAPlanner::get_search_stats(vector<PlannerStats>* s){$/;"	f	class:LazyARAPlanner
initializeSearch	src/planners/lazyARA.cpp	/^void LazyARAPlanner::initializeSearch(){$/;"	f	class:LazyARAPlanner
insertLazyList	src/planners/lazyARA.cpp	/^void LazyARAPlanner::insertLazyList(LazyARAState* state, LazyARAState* parent, int edgeCost, bool isTrueCost){$/;"	f	class:LazyARAPlanner
outOfTime	src/planners/lazyARA.cpp	/^bool LazyARAPlanner::outOfTime(){$/;"	f	class:LazyARAPlanner
prepareNextSearchIteration	src/planners/lazyARA.cpp	/^void LazyARAPlanner::prepareNextSearchIteration(){$/;"	f	class:LazyARAPlanner
putStateInHeap	src/planners/lazyARA.cpp	/^void LazyARAPlanner::putStateInHeap(LazyARAState* state){$/;"	f	class:LazyARAPlanner
replan	src/planners/lazyARA.cpp	/^int LazyARAPlanner::replan(double allocated_time_sec, std::vector<int>* solution_stateIDs_V, int* solcost){$/;"	f	class:LazyARAPlanner
replan	src/planners/lazyARA.cpp	/^int LazyARAPlanner::replan(double allocated_time_secs, std::vector<int>* solution_stateIDs_V){$/;"	f	class:LazyARAPlanner
replan	src/planners/lazyARA.cpp	/^int LazyARAPlanner::replan(int start, int goal, vector<int>* solution_stateIDs_V, ReplanParams p, int* solcost){$/;"	f	class:LazyARAPlanner
replan	src/planners/lazyARA.cpp	/^int LazyARAPlanner::replan(vector<int>* solution_stateIDs_V, ReplanParams p){$/;"	f	class:LazyARAPlanner
replan	src/planners/lazyARA.cpp	/^int LazyARAPlanner::replan(vector<int>* solution_stateIDs_V, ReplanParams p, int* solcost){$/;"	f	class:LazyARAPlanner
set_goal	src/planners/lazyARA.cpp	/^int LazyARAPlanner::set_goal(int id){$/;"	f	class:LazyARAPlanner
set_start	src/planners/lazyARA.cpp	/^int LazyARAPlanner::set_start(int id){$/;"	f	class:LazyARAPlanner
CreateSearchStateSpace	src/planners/ppcpplanner.cpp	/^int PPCPPlanner::CreateSearchStateSpace(PPCPStateSpace_t* pStateSpace)$/;"	f	class:PPCPPlanner
DeleteStateSpace	src/planners/ppcpplanner.cpp	/^void PPCPPlanner::DeleteStateSpace(PPCPStateSpace_t* pStateSpace)$/;"	f	class:PPCPPlanner
PPCPPlanner	src/planners/ppcpplanner.cpp	/^PPCPPlanner::PPCPPlanner(DiscreteSpaceInformation* environment, int sizeofS, int sizeofH)$/;"	f	class:PPCPPlanner
costs_changed	src/planners/ppcpplanner.cpp	/^void PPCPPlanner::costs_changed()$/;"	f	class:PPCPPlanner
costs_changed	src/planners/ppcpplanner.cpp	/^void PPCPPlanner::costs_changed(StateChangeQuery const & stateChange)$/;"	f	class:PPCPPlanner
force_planning_from_scratch	src/planners/ppcpplanner.cpp	/^int PPCPPlanner::force_planning_from_scratch()$/;"	f	class:PPCPPlanner
replan	src/planners/ppcpplanner.cpp	/^int PPCPPlanner::replan(double allocated_time_secs, vector<sbpl_PolicyStatewithBinaryh_t>* SolutionPolicy,$/;"	f	class:PPCPPlanner
set_goal	src/planners/ppcpplanner.cpp	/^int PPCPPlanner::set_goal(int goal_stateID)$/;"	f	class:PPCPPlanner
set_start	src/planners/ppcpplanner.cpp	/^int PPCPPlanner::set_start(int start_stateID)$/;"	f	class:PPCPPlanner
~PPCPPlanner	src/planners/ppcpplanner.cpp	/^PPCPPlanner::~PPCPPlanner()$/;"	f	class:PPCPPlanner
ComputeHeuristic	src/planners/rstarplanner.cpp	/^int RSTARPlanner::ComputeHeuristic(CMDPSTATE* MDPstate)$/;"	f	class:RSTARPlanner
ComputeKey	src/planners/rstarplanner.cpp	/^CKey RSTARPlanner::ComputeKey(RSTARState* rstarState)$/;"	f	class:RSTARPlanner
ComputeLocalPath	src/planners/rstarplanner.cpp	/^bool RSTARPlanner::ComputeLocalPath(int StartStateID, int GoalStateID, int maxc, int maxe, int *pCost, int *pCostLow,$/;"	f	class:RSTARPlanner
CreateLSearchState	src/planners/rstarplanner.cpp	/^CMDPSTATE* RSTARPlanner::CreateLSearchState(int stateID)$/;"	f	class:RSTARPlanner
CreateSearchStateSpace	src/planners/rstarplanner.cpp	/^int RSTARPlanner::CreateSearchStateSpace()$/;"	f	class:RSTARPlanner
CreateState	src/planners/rstarplanner.cpp	/^CMDPSTATE* RSTARPlanner::CreateState(int stateID)$/;"	f	class:RSTARPlanner
DeleteSearchActionData	src/planners/rstarplanner.cpp	/^void RSTARPlanner::DeleteSearchActionData(RSTARACTIONDATA* actiondata)$/;"	f	class:RSTARPlanner
DeleteSearchStateData	src/planners/rstarplanner.cpp	/^void RSTARPlanner::DeleteSearchStateData(RSTARState* state)$/;"	f	class:RSTARPlanner
DeleteSearchStateSpace	src/planners/rstarplanner.cpp	/^void RSTARPlanner::DeleteSearchStateSpace()$/;"	f	class:RSTARPlanner
DestroyLocalSearchMemory	src/planners/rstarplanner.cpp	/^bool RSTARPlanner::DestroyLocalSearchMemory()$/;"	f	class:RSTARPlanner
GetGVal	src/planners/rstarplanner.cpp	/^int RSTARPlanner::GetGVal(int StateID)$/;"	f	class:RSTARPlanner
GetLSearchState	src/planners/rstarplanner.cpp	/^CMDPSTATE* RSTARPlanner::GetLSearchState(int stateID)$/;"	f	class:RSTARPlanner
GetSearchPath	src/planners/rstarplanner.cpp	/^vector<int> RSTARPlanner::GetSearchPath(int& solcost)$/;"	f	class:RSTARPlanner
GetState	src/planners/rstarplanner.cpp	/^CMDPSTATE* RSTARPlanner::GetState(int stateID)$/;"	f	class:RSTARPlanner
ImprovePath	src/planners/rstarplanner.cpp	/^int RSTARPlanner::ImprovePath(double MaxNumofSecs)$/;"	f	class:RSTARPlanner
InitializeSearchStateInfo	src/planners/rstarplanner.cpp	/^void RSTARPlanner::InitializeSearchStateInfo(RSTARState* state)$/;"	f	class:RSTARPlanner
InitializeSearchStateSpace	src/planners/rstarplanner.cpp	/^int RSTARPlanner::InitializeSearchStateSpace()$/;"	f	class:RSTARPlanner
Initialize_rstarlsearchdata	src/planners/rstarplanner.cpp	/^void RSTARPlanner::Initialize_rstarlsearchdata(CMDPSTATE* state)$/;"	f	class:RSTARPlanner
Initialize_searchinfo	src/planners/rstarplanner.cpp	/^void RSTARPlanner::Initialize_searchinfo(CMDPSTATE* state)$/;"	f	class:RSTARPlanner
LocalSearchComputeKey	src/planners/rstarplanner.cpp	/^CKey RSTARPlanner::LocalSearchComputeKey(RSTARLSearchState* rstarlsearchState)$/;"	f	class:RSTARPlanner
PrintSearchPath	src/planners/rstarplanner.cpp	/^void RSTARPlanner::PrintSearchPath(FILE* fOut)$/;"	f	class:RSTARPlanner
PrintSearchState	src/planners/rstarplanner.cpp	/^void RSTARPlanner::PrintSearchState(RSTARState* state, FILE* fOut)$/;"	f	class:RSTARPlanner
RSTARPlanner	src/planners/rstarplanner.cpp	/^RSTARPlanner::RSTARPlanner(DiscreteSpaceInformation* environment, bool bSearchForward)$/;"	f	class:RSTARPlanner
ReInitializeSearchStateInfo	src/planners/rstarplanner.cpp	/^void RSTARPlanner::ReInitializeSearchStateInfo(RSTARState* state)$/;"	f	class:RSTARPlanner
ReInitializeSearchStateSpace	src/planners/rstarplanner.cpp	/^void RSTARPlanner::ReInitializeSearchStateSpace()$/;"	f	class:RSTARPlanner
Reevaluatefvals	src/planners/rstarplanner.cpp	/^void RSTARPlanner::Reevaluatefvals()$/;"	f	class:RSTARPlanner
ResetSearchStateSpace	src/planners/rstarplanner.cpp	/^int RSTARPlanner::ResetSearchStateSpace()$/;"	f	class:RSTARPlanner
Search	src/planners/rstarplanner.cpp	/^bool RSTARPlanner::Search(vector<int>& pathIds, int & PathCost, bool bFirstSolution, bool bOptimalSolution,$/;"	f	class:RSTARPlanner
SetBestPredecessor	src/planners/rstarplanner.cpp	/^void RSTARPlanner::SetBestPredecessor(RSTARState* rstarState, RSTARState* rstarPredState, CMDPACTION* action)$/;"	f	class:RSTARPlanner
SetSearchGoalState	src/planners/rstarplanner.cpp	/^int RSTARPlanner::SetSearchGoalState(int SearchGoalStateID)$/;"	f	class:RSTARPlanner
SetSearchStartState	src/planners/rstarplanner.cpp	/^int RSTARPlanner::SetSearchStartState(int SearchStartStateID)$/;"	f	class:RSTARPlanner
costs_changed	src/planners/rstarplanner.cpp	/^void RSTARPlanner::costs_changed()$/;"	f	class:RSTARPlanner
costs_changed	src/planners/rstarplanner.cpp	/^void RSTARPlanner::costs_changed(StateChangeQuery const & stateChange)$/;"	f	class:RSTARPlanner
force_planning_from_scratch	src/planners/rstarplanner.cpp	/^int RSTARPlanner::force_planning_from_scratch()$/;"	f	class:RSTARPlanner
getHeurValue	src/planners/rstarplanner.cpp	/^int RSTARPlanner::getHeurValue(int StateID)$/;"	f	class:RSTARPlanner
print_searchpath	src/planners/rstarplanner.cpp	/^void RSTARPlanner::print_searchpath(FILE* fOut)$/;"	f	class:RSTARPlanner
replan	src/planners/rstarplanner.cpp	/^int RSTARPlanner::replan(double allocated_time_secs, vector<int>* solution_stateIDs_V)$/;"	f	class:RSTARPlanner
replan	src/planners/rstarplanner.cpp	/^int RSTARPlanner::replan(double allocated_time_secs, vector<int>* solution_stateIDs_V, int* psolcost)$/;"	f	class:RSTARPlanner
set_goal	src/planners/rstarplanner.cpp	/^int RSTARPlanner::set_goal(int goal_stateID)$/;"	f	class:RSTARPlanner
set_search_mode	src/planners/rstarplanner.cpp	/^int RSTARPlanner::set_search_mode(bool bSearchUntilFirstSolution)$/;"	f	class:RSTARPlanner
set_start	src/planners/rstarplanner.cpp	/^int RSTARPlanner::set_start(int start_stateID)$/;"	f	class:RSTARPlanner
~RSTARPlanner	src/planners/rstarplanner.cpp	/^RSTARPlanner::~RSTARPlanner()$/;"	f	class:RSTARPlanner
CreateState	src/planners/viplanner.cpp	/^CMDPSTATE* VIPlanner::CreateState(int stateID)$/;"	f	class:VIPlanner
GetState	src/planners/viplanner.cpp	/^CMDPSTATE* VIPlanner::GetState(int stateID)$/;"	f	class:VIPlanner
InitializePlanner	src/planners/viplanner.cpp	/^void VIPlanner::InitializePlanner()$/;"	f	class:VIPlanner
Initialize_vidata	src/planners/viplanner.cpp	/^void VIPlanner::Initialize_vidata(CMDPSTATE* state)$/;"	f	class:VIPlanner
PrintPolicy	src/planners/viplanner.cpp	/^void VIPlanner::PrintPolicy(FILE* fPolicy)$/;"	f	class:VIPlanner
PrintStat	src/planners/viplanner.cpp	/^void VIPlanner::PrintStat(FILE* fOut, clock_t starttime)$/;"	f	class:VIPlanner
PrintStatHeader	src/planners/viplanner.cpp	/^void VIPlanner::PrintStatHeader(FILE* fOut)$/;"	f	class:VIPlanner
PrintVIData	src/planners/viplanner.cpp	/^void VIPlanner::PrintVIData()$/;"	f	class:VIPlanner
backup	src/planners/viplanner.cpp	/^void VIPlanner::backup(CMDPSTATE* state)$/;"	f	class:VIPlanner
g_backups	src/planners/viplanner.cpp	/^static unsigned int g_backups;$/;"	v	file:
g_belldelta	src/planners/viplanner.cpp	/^static double g_belldelta = INFINITECOST;$/;"	v	file:
g_runtime	src/planners/viplanner.cpp	/^static clock_t g_runtime = 0;$/;"	v	file:
perform_iteration_backward	src/planners/viplanner.cpp	/^void VIPlanner::perform_iteration_backward()$/;"	f	class:VIPlanner
perform_iteration_forward	src/planners/viplanner.cpp	/^void VIPlanner::perform_iteration_forward()$/;"	f	class:VIPlanner
replan	src/planners/viplanner.cpp	/^int VIPlanner::replan(double allocatedtime, vector<int>* solution_stateIDs_V)$/;"	f	class:VIPlanner
~VIPlanner	src/planners/viplanner.cpp	/^VIPlanner::~VIPlanner()$/;"	f	class:VIPlanner
CheckEnvironmentType	src/test/main.cpp	/^std::string CheckEnvironmentType(int numOptions, char** argv)$/;"	f
CheckIsNavigating	src/test/main.cpp	/^bool CheckIsNavigating(int numOptions, char** argv)$/;"	f
CheckPlannerType	src/test/main.cpp	/^std::string CheckPlannerType(int numOptions, char** argv)$/;"	f
CheckSearchDirection	src/test/main.cpp	/^std::string CheckSearchDirection(int numOptions, char** argv)$/;"	f
ENV_TYPE_2D	src/test/main.cpp	/^    INVALID_ENV_TYPE = -1, ENV_TYPE_2D, ENV_TYPE_2DUU, ENV_TYPE_XYTHETA, ENV_TYPE_XYTHETAMLEV, ENV_TYPE_ROBARM,$/;"	e	enum:EnvironmentType	file:
ENV_TYPE_2DUU	src/test/main.cpp	/^    INVALID_ENV_TYPE = -1, ENV_TYPE_2D, ENV_TYPE_2DUU, ENV_TYPE_XYTHETA, ENV_TYPE_XYTHETAMLEV, ENV_TYPE_ROBARM,$/;"	e	enum:EnvironmentType	file:
ENV_TYPE_ROBARM	src/test/main.cpp	/^    INVALID_ENV_TYPE = -1, ENV_TYPE_2D, ENV_TYPE_2DUU, ENV_TYPE_XYTHETA, ENV_TYPE_XYTHETAMLEV, ENV_TYPE_ROBARM,$/;"	e	enum:EnvironmentType	file:
ENV_TYPE_XYTHETA	src/test/main.cpp	/^    INVALID_ENV_TYPE = -1, ENV_TYPE_2D, ENV_TYPE_2DUU, ENV_TYPE_XYTHETA, ENV_TYPE_XYTHETAMLEV, ENV_TYPE_ROBARM,$/;"	e	enum:EnvironmentType	file:
ENV_TYPE_XYTHETAMLEV	src/test/main.cpp	/^    INVALID_ENV_TYPE = -1, ENV_TYPE_2D, ENV_TYPE_2DUU, ENV_TYPE_XYTHETA, ENV_TYPE_XYTHETAMLEV, ENV_TYPE_ROBARM,$/;"	e	enum:EnvironmentType	file:
EnvironmentType	src/test/main.cpp	/^enum EnvironmentType$/;"	g	file:
EnvironmentTypeToStr	src/test/main.cpp	/^std::string EnvironmentTypeToStr(EnvironmentType environmentType)$/;"	f
INVALID_ENV_TYPE	src/test/main.cpp	/^    INVALID_ENV_TYPE = -1, ENV_TYPE_2D, ENV_TYPE_2DUU, ENV_TYPE_XYTHETA, ENV_TYPE_XYTHETAMLEV, ENV_TYPE_ROBARM,$/;"	e	enum:EnvironmentType	file:
INVALID_MAIN_RESULT	src/test/main.cpp	/^    INVALID_MAIN_RESULT = -1,$/;"	e	enum:MainResultType	file:
INVALID_PLANNER_TYPE	src/test/main.cpp	/^    INVALID_PLANNER_TYPE = -1,$/;"	e	enum:PlannerType	file:
MAIN_RESULT_FAILURE	src/test/main.cpp	/^    MAIN_RESULT_FAILURE = 1,$/;"	e	enum:MainResultType	file:
MAIN_RESULT_INCORRECT_OPTIONS	src/test/main.cpp	/^    MAIN_RESULT_INCORRECT_OPTIONS = 3,$/;"	e	enum:MainResultType	file:
MAIN_RESULT_INSUFFICIENT_ARGS	src/test/main.cpp	/^    MAIN_RESULT_INSUFFICIENT_ARGS = 2,$/;"	e	enum:MainResultType	file:
MAIN_RESULT_SUCCESS	src/test/main.cpp	/^    MAIN_RESULT_SUCCESS = 0,$/;"	e	enum:MainResultType	file:
MAIN_RESULT_UNSUPPORTED_ENV	src/test/main.cpp	/^    MAIN_RESULT_UNSUPPORTED_ENV = 4,$/;"	e	enum:MainResultType	file:
MainResultType	src/test/main.cpp	/^enum MainResultType$/;"	g	file:
NUM_ENV_TYPES	src/test/main.cpp	/^    NUM_ENV_TYPES$/;"	e	enum:EnvironmentType	file:
NUM_MAIN_RESULTS	src/test/main.cpp	/^    NUM_MAIN_RESULTS$/;"	e	enum:MainResultType	file:
NUM_PLANNER_TYPES	src/test/main.cpp	/^    NUM_PLANNER_TYPES$/;"	e	enum:PlannerType	file:
PLANNER_TYPE_ADSTAR	src/test/main.cpp	/^    PLANNER_TYPE_ADSTAR,$/;"	e	enum:PlannerType	file:
PLANNER_TYPE_ANASTAR	src/test/main.cpp	/^    PLANNER_TYPE_ANASTAR,$/;"	e	enum:PlannerType	file:
PLANNER_TYPE_ARASTAR	src/test/main.cpp	/^    PLANNER_TYPE_ARASTAR,$/;"	e	enum:PlannerType	file:
PLANNER_TYPE_PPCP	src/test/main.cpp	/^    PLANNER_TYPE_PPCP,$/;"	e	enum:PlannerType	file:
PLANNER_TYPE_RSTAR	src/test/main.cpp	/^    PLANNER_TYPE_RSTAR,$/;"	e	enum:PlannerType	file:
PLANNER_TYPE_VI	src/test/main.cpp	/^    PLANNER_TYPE_VI,$/;"	e	enum:PlannerType	file:
PlannerType	src/test/main.cpp	/^enum PlannerType$/;"	g	file:
PlannerTypeToStr	src/test/main.cpp	/^std::string PlannerTypeToStr(PlannerType plannerType)$/;"	f
PrintHelp	src/test/main.cpp	/^void PrintHelp(char** argv)$/;"	f
PrintUsage	src/test/main.cpp	/^void PrintUsage(char *argv[])$/;"	f
StrToEnvironmentType	src/test/main.cpp	/^EnvironmentType StrToEnvironmentType(const char* str)$/;"	f
StrToPlannerType	src/test/main.cpp	/^PlannerType StrToPlannerType(const char* str)$/;"	f
main	src/test/main.cpp	/^int main(int argc, char *argv[])$/;"	f
plan2d	src/test/main.cpp	/^int plan2d(PlannerType plannerType, char* envCfgFilename, bool forwardSearch)$/;"	f
plan2duu	src/test/main.cpp	/^int plan2duu(PlannerType plannerType, char* envCfgFilename)$/;"	f
planandnavigate2d	src/test/main.cpp	/^int planandnavigate2d(PlannerType plannerType, char* envCfgFilename)$/;"	f
planandnavigatexythetalat	src/test/main.cpp	/^int planandnavigatexythetalat(PlannerType plannerType, char* envCfgFilename, char* motPrimFilename, bool forwardSearch)$/;"	f
planrobarm	src/test/main.cpp	/^int planrobarm(PlannerType plannerType, char* envCfgFilename, bool forwardSearch)$/;"	f
planxythetalat	src/test/main.cpp	/^int planxythetalat(PlannerType plannerType, char* envCfgFilename, char* motPrimFilename, bool forwardSearch)$/;"	f
planxythetamlevlat	src/test/main.cpp	/^int planxythetamlevlat(PlannerType plannerType, char* envCfgFilename, char* motPrimFilename, bool forwardSearch)$/;"	f
TEST	src/test/module-tests.cpp	/^TEST(araplanner, env1)$/;"	f
diffTest	src/test/module-tests.cpp	/^void diffTest(const std::string& outputStr)$/;"	f
main	src/test/module-tests.cpp	/^int main(int argc, char *argv[])$/;"	f
runARAPlannerTest	src/test/module-tests.cpp	/^void runARAPlannerTest(const std::string& problem)$/;"	f
Point2D	src/test/test_adjacency_list.cpp	/^    Point2D(int newX, int newY) :$/;"	f	struct:Point2D
Point2D	src/test/test_adjacency_list.cpp	/^struct Point2D$/;"	s	file:
heuristicDistanceTo	src/test/test_adjacency_list.cpp	/^    int heuristicDistanceTo(const Point2D& p)$/;"	f	struct:Point2D
main	src/test/test_adjacency_list.cpp	/^int main(int, char**)$/;"	f
operator <	src/test/test_adjacency_list.cpp	/^int operator<(const Point2D& p1, const Point2D& p2)$/;"	f
operator <<	src/test/test_adjacency_list.cpp	/^ostream& operator<<(ostream& stream, Point2D p)$/;"	f
testPlanner	src/test/test_adjacency_list.cpp	/^void testPlanner(AdjacencyListSBPLEnv<Point2D>& e)$/;"	f
x	src/test/test_adjacency_list.cpp	/^    int x;$/;"	m	struct:Point2D	file:
y	src/test/test_adjacency_list.cpp	/^    int y;$/;"	m	struct:Point2D	file:
SBPL2DGridSearch	src/utils/2Dgridsearch.cpp	/^SBPL2DGridSearch::SBPL2DGridSearch(int width_x, int height_y, float cellsize_m)$/;"	f	class:SBPL2DGridSearch
computedxy	src/utils/2Dgridsearch.cpp	/^void SBPL2DGridSearch::computedxy()$/;"	f	class:SBPL2DGridSearch
createSearchStates2D	src/utils/2Dgridsearch.cpp	/^bool SBPL2DGridSearch::createSearchStates2D(void)$/;"	f	class:SBPL2DGridSearch
destroy	src/utils/2Dgridsearch.cpp	/^void SBPL2DGridSearch::destroy()$/;"	f	class:SBPL2DGridSearch
initializeSearchState2D	src/utils/2Dgridsearch.cpp	/^inline void SBPL2DGridSearch::initializeSearchState2D(SBPL_2DGridSearchState* state2D)$/;"	f	class:SBPL2DGridSearch
printvalues	src/utils/2Dgridsearch.cpp	/^void SBPL2DGridSearch::printvalues()$/;"	f	class:SBPL2DGridSearch
search	src/utils/2Dgridsearch.cpp	/^bool SBPL2DGridSearch::search(unsigned char** Grid2D, unsigned char obsthresh, int startx_c, int starty_c, int goalx_c,$/;"	f	class:SBPL2DGridSearch
search_exp	src/utils/2Dgridsearch.cpp	/^bool SBPL2DGridSearch::search_exp(unsigned char** Grid2D, unsigned char obsthresh, int startx_c, int starty_c,$/;"	f	class:SBPL2DGridSearch
search_withbuckets	src/utils/2Dgridsearch.cpp	/^bool SBPL2DGridSearch::search_withbuckets(unsigned char** Grid2D, unsigned char obsthresh, int startx_c, int starty_c,$/;"	f	class:SBPL2DGridSearch
search_withheap	src/utils/2Dgridsearch.cpp	/^bool SBPL2DGridSearch::search_withheap(unsigned char** Grid2D, unsigned char obsthresh, int startx_c, int starty_c,$/;"	f	class:SBPL2DGridSearch
search_withslidingbuckets	src/utils/2Dgridsearch.cpp	/^bool SBPL2DGridSearch::search_withslidingbuckets(unsigned char** Grid2D, unsigned char obsthresh, int startx_c,$/;"	f	class:SBPL2DGridSearch
setOPENdatastructure	src/utils/2Dgridsearch.cpp	/^bool SBPL2DGridSearch::setOPENdatastructure(SBPL_2DGRIDSEARCH_OPENTYPE OPENtype)$/;"	f	class:SBPL2DGridSearch
SBPL_DEFAULT_DEBUG_OUTPUT_FLUSH	src/utils/config.cpp	/^int SBPL_DEFAULT_DEBUG_OUTPUT_FLUSH(FILE* f)$/;"	f
SBPL_DEFAULT_DEBUG_OUTPUT_LOGGER	src/utils/config.cpp	/^int SBPL_DEFAULT_DEBUG_OUTPUT_LOGGER(int level, const char* msg)$/;"	f
SBPL_FFLUSHALL	src/utils/config.cpp	/^int SBPL_FFLUSHALL(FILE* file)$/;"	f
SBPL_FPRINTALL	src/utils/config.cpp	/^int SBPL_FPRINTALL(FILE* file, const char* format, ...)$/;"	f
SBPL_PRINTALL	src/utils/config.cpp	/^int SBPL_PRINTALL(int level, const char* format, ...)$/;"	f
SBPL_PRINTF_BUFFER_SIZE	src/utils/config.cpp	6;"	d	file:
SET_SBPL_FFLUSH_TEXT_FP	src/utils/config.cpp	/^void SET_SBPL_FFLUSH_TEXT_FP(SBPL_FFLUSH_TEXT_FP fptr) { sbpl_fflush_fp = fptr; }$/;"	f
SET_SBPL_PRINT_TEXT_FP	src/utils/config.cpp	/^void SET_SBPL_PRINT_TEXT_FP(SBPL_PRINT_TEXT_FP fptr) { sbpl_print_fp = fptr; }$/;"	f
sbpl_fflush_fp	src/utils/config.cpp	/^static SBPL_FFLUSH_TEXT_FP sbpl_fflush_fp = NULL;$/;"	v	file:
sbpl_fflush_fp	src/utils/config.cpp	/^static SBPL_FFLUSH_TEXT_FP sbpl_fflush_fp = SBPL_DEFAULT_DEBUG_OUTPUT_FLUSH;$/;"	v	file:
sbpl_print_fp	src/utils/config.cpp	/^static SBPL_PRINT_TEXT_FP sbpl_print_fp = NULL;$/;"	v	file:
sbpl_print_fp	src/utils/config.cpp	/^static SBPL_PRINT_TEXT_FP sbpl_print_fp = SBPL_DEFAULT_DEBUG_OUTPUT_LOGGER;$/;"	v	file:
CHeap	src/utils/heap.cpp	/^CHeap::CHeap()$/;"	f	class:CHeap
CIntHeap	src/utils/heap.cpp	/^CIntHeap::CIntHeap()$/;"	f	class:CIntHeap
CIntHeap	src/utils/heap.cpp	/^CIntHeap::CIntHeap(int initial_size)$/;"	f	class:CIntHeap
InfiniteKey	src/utils/heap.cpp	/^CKey InfiniteKey()$/;"	f
deleteheap	src/utils/heap.cpp	/^void CHeap::deleteheap(AbstractSearchState *AbstractSearchState)$/;"	f	class:CHeap
deleteheap	src/utils/heap.cpp	/^void CIntHeap::deleteheap(AbstractSearchState *AbstractSearchState)$/;"	f	class:CIntHeap
deleteheap_unsafe	src/utils/heap.cpp	/^void CHeap::deleteheap_unsafe(AbstractSearchState* AbstractSearchState)$/;"	f	class:CHeap
deleteminheap	src/utils/heap.cpp	/^AbstractSearchState* CHeap::deleteminheap()$/;"	f	class:CHeap
deleteminheap	src/utils/heap.cpp	/^AbstractSearchState* CIntHeap::deleteminheap()$/;"	f	class:CIntHeap
emptyheap	src/utils/heap.cpp	/^bool CHeap::emptyheap()$/;"	f	class:CHeap
emptyheap	src/utils/heap.cpp	/^bool CIntHeap::emptyheap()$/;"	f	class:CIntHeap
fullheap	src/utils/heap.cpp	/^bool CHeap::fullheap()$/;"	f	class:CHeap
fullheap	src/utils/heap.cpp	/^bool CIntHeap::fullheap()$/;"	f	class:CIntHeap
getkeyheap	src/utils/heap.cpp	/^CKey CHeap::getkeyheap(AbstractSearchState *AbstractSearchState)$/;"	f	class:CHeap
getkeyheap	src/utils/heap.cpp	/^int CIntHeap::getkeyheap(AbstractSearchState *AbstractSearchState)$/;"	f	class:CIntHeap
getminheap	src/utils/heap.cpp	/^AbstractSearchState* CHeap::getminheap()$/;"	f	class:CHeap
getminheap	src/utils/heap.cpp	/^AbstractSearchState* CHeap::getminheap(CKey& ReturnKey)$/;"	f	class:CHeap
getminheap	src/utils/heap.cpp	/^AbstractSearchState* CIntHeap::getminheap()$/;"	f	class:CIntHeap
getminheap	src/utils/heap.cpp	/^AbstractSearchState* CIntHeap::getminheap(int& ReturnKey)$/;"	f	class:CIntHeap
getminkeyheap	src/utils/heap.cpp	/^CKey CHeap::getminkeyheap()$/;"	f	class:CHeap
getminkeyheap	src/utils/heap.cpp	/^int CIntHeap::getminkeyheap()$/;"	f	class:CIntHeap
growheap	src/utils/heap.cpp	/^void CHeap::growheap()$/;"	f	class:CHeap
growheap	src/utils/heap.cpp	/^void CIntHeap::growheap()$/;"	f	class:CIntHeap
heaperror	src/utils/heap.cpp	/^void heaperror(const char* ErrorString)$/;"	f
inheap	src/utils/heap.cpp	/^bool CHeap::inheap(AbstractSearchState *AbstractSearchState)$/;"	f	class:CHeap
inheap	src/utils/heap.cpp	/^bool CIntHeap::inheap(AbstractSearchState *AbstractSearchState)$/;"	f	class:CIntHeap
insert_unsafe	src/utils/heap.cpp	/^void CHeap::insert_unsafe(AbstractSearchState* AbstractSearchState, CKey key)$/;"	f	class:CHeap
insertheap	src/utils/heap.cpp	/^void CHeap::insertheap(AbstractSearchState *AbstractSearchState, CKey key)$/;"	f	class:CHeap
insertheap	src/utils/heap.cpp	/^void CIntHeap::insertheap(AbstractSearchState *AbstractSearchState, int key)$/;"	f	class:CIntHeap
makeemptyheap	src/utils/heap.cpp	/^void CHeap::makeemptyheap()$/;"	f	class:CHeap
makeemptyheap	src/utils/heap.cpp	/^void CIntHeap::makeemptyheap()$/;"	f	class:CIntHeap
makeheap	src/utils/heap.cpp	/^void CHeap::makeheap()$/;"	f	class:CHeap
makeheap	src/utils/heap.cpp	/^void CIntHeap::makeheap()$/;"	f	class:CIntHeap
percolatedown	src/utils/heap.cpp	/^void CHeap::percolatedown(int hole, heapelement tmp)$/;"	f	class:CHeap
percolatedown	src/utils/heap.cpp	/^void CIntHeap::percolatedown(int hole, heapintelement tmp)$/;"	f	class:CIntHeap
percolateup	src/utils/heap.cpp	/^void CHeap::percolateup(int hole, heapelement tmp)$/;"	f	class:CHeap
percolateup	src/utils/heap.cpp	/^void CIntHeap::percolateup(int hole, heapintelement tmp)$/;"	f	class:CIntHeap
percolateupordown	src/utils/heap.cpp	/^void CHeap::percolateupordown(int hole, heapelement tmp)$/;"	f	class:CHeap
percolateupordown	src/utils/heap.cpp	/^void CIntHeap::percolateupordown(int hole, heapintelement tmp)$/;"	f	class:CIntHeap
sizecheck	src/utils/heap.cpp	/^void CHeap::sizecheck()$/;"	f	class:CHeap
sizecheck	src/utils/heap.cpp	/^void CIntHeap::sizecheck()$/;"	f	class:CIntHeap
updateheap	src/utils/heap.cpp	/^void CHeap::updateheap(AbstractSearchState *AbstractSearchState, CKey NewKey)$/;"	f	class:CHeap
updateheap	src/utils/heap.cpp	/^void CIntHeap::updateheap(AbstractSearchState *AbstractSearchState, int NewKey)$/;"	f	class:CIntHeap
updateheap_unsafe	src/utils/heap.cpp	/^void CHeap::updateheap_unsafe(AbstractSearchState* AbstractSearchState, CKey NewKey)$/;"	f	class:CHeap
~CHeap	src/utils/heap.cpp	/^CHeap::~CHeap()$/;"	f	class:CHeap
~CIntHeap	src/utils/heap.cpp	/^CIntHeap::~CIntHeap()$/;"	f	class:CIntHeap
AddAction	src/utils/mdp.cpp	/^CMDPACTION* CMDPSTATE::AddAction(int ID)$/;"	f	class:CMDPSTATE
AddOutcome	src/utils/mdp.cpp	/^void CMDPACTION::AddOutcome(int OutcomeStateID, int OutcomeCost, float OutcomeProb)$/;"	f	class:CMDPACTION
AddPred	src/utils/mdp.cpp	/^bool CMDPSTATE::AddPred(int stateID)$/;"	f	class:CMDPSTATE
AddState	src/utils/mdp.cpp	/^CMDPSTATE* CMDP::AddState(int StateID)$/;"	f	class:CMDP
ContainsPred	src/utils/mdp.cpp	/^bool CMDPSTATE::ContainsPred(int stateID)$/;"	f	class:CMDPSTATE
Create	src/utils/mdp.cpp	/^bool CMDP::Create(int numofstates)$/;"	f	class:CMDP
Delete	src/utils/mdp.cpp	/^bool CMDP::Delete()$/;"	f	class:CMDP
Delete	src/utils/mdp.cpp	/^bool CMDPACTION::Delete()$/;"	f	class:CMDPACTION
Delete	src/utils/mdp.cpp	/^bool CMDPSTATE::Delete()$/;"	f	class:CMDPSTATE
DeleteAllOutcomes	src/utils/mdp.cpp	/^bool CMDPACTION::DeleteAllOutcomes()$/;"	f	class:CMDPACTION
GetAction	src/utils/mdp.cpp	/^CMDPACTION* CMDPSTATE::GetAction(int actionID)$/;"	f	class:CMDPSTATE
GetIndofMostLikelyOutcome	src/utils/mdp.cpp	/^int CMDPACTION::GetIndofMostLikelyOutcome()$/;"	f	class:CMDPACTION
GetIndofOutcome	src/utils/mdp.cpp	/^int CMDPACTION::GetIndofOutcome(int OutcomeID)$/;"	f	class:CMDPACTION
IsValid	src/utils/mdp.cpp	/^bool CMDPACTION::IsValid()$/;"	f	class:CMDPACTION
Print	src/utils/mdp.cpp	/^void CMDP::Print(FILE* fOut)$/;"	f	class:CMDP
RemoveAllActions	src/utils/mdp.cpp	/^bool CMDPSTATE::RemoveAllActions()$/;"	f	class:CMDPSTATE
RemovePred	src/utils/mdp.cpp	/^bool CMDPSTATE::RemovePred(int stateID)$/;"	f	class:CMDPSTATE
empty	src/utils/mdp.cpp	/^bool CMDP::empty()$/;"	f	class:CMDP
full	src/utils/mdp.cpp	/^bool CMDP::full()$/;"	f	class:CMDP
operator =	src/utils/mdp.cpp	/^void CMDPACTION::operator =(const CMDPACTION& rhsaction)$/;"	f	class:CMDPACTION
operator =	src/utils/mdp.cpp	/^void CMDPSTATE::operator =(const CMDPSTATE& rhsstate)$/;"	f	class:CMDPSTATE
CheckMDP	src/utils/utils.cpp	/^void CheckMDP(CMDP* mdp)$/;"	f
ComputeNumofStochasticActions	src/utils/utils.cpp	/^int ComputeNumofStochasticActions(CMDP* pMDP)$/;"	f
ContTheta2Disc	src/utils/utils.cpp	/^int ContTheta2Disc(double fTheta, int NUMOFANGLEVALS)$/;"	f
DisableMemCheck	src/utils/utils.cpp	/^void DisableMemCheck()$/;"	f
DiscTheta2Cont	src/utils/utils.cpp	/^double DiscTheta2Cont(int nTheta, int NUMOFANGLEVALS)$/;"	f
EnableMemCheck	src/utils/utils.cpp	/^void EnableMemCheck()$/;"	f
EvaluatePolicy	src/utils/utils.cpp	/^void EvaluatePolicy(CMDP* PolicyMDP, int StartStateID, int GoalStateID, double* PolValue, bool *bFullPolicy,$/;"	f
IsInsideFootprint	src/utils/utils.cpp	/^bool IsInsideFootprint(sbpl_2Dpt_t pt, vector<sbpl_2Dpt_t>* bounding_polygon)$/;"	f
PathExists	src/utils/utils.cpp	/^bool PathExists(CMDP* pMarkovChain, CMDPSTATE* sourcestate, CMDPSTATE* targetstate)$/;"	f
PrintMatrix	src/utils/utils.cpp	/^void PrintMatrix(int** matrix, int rows, int cols, FILE* fOut)$/;"	f
checkmdpstate	src/utils/utils.cpp	/^void checkmdpstate(CMDPSTATE* state)$/;"	f
computeDistancestoNonfreeAreas	src/utils/utils.cpp	/^void computeDistancestoNonfreeAreas(unsigned char** Grid2D, int width_x, int height_y, unsigned char obsthresh,$/;"	f
computeMinUnsignedAngleDiff	src/utils/utils.cpp	/^double computeMinUnsignedAngleDiff(double angle1, double angle2)$/;"	f
get_2d_footprint_cells	src/utils/utils.cpp	/^void get_2d_footprint_cells(vector<sbpl_2Dpt_t> polygon, set<sbpl_2Dcell_t>* cells, sbpl_xy_theta_pt_t pose, double res)$/;"	f
get_2d_footprint_cells	src/utils/utils.cpp	/^void get_2d_footprint_cells(vector<sbpl_2Dpt_t> polygon, vector<sbpl_2Dcell_t>* cells, sbpl_xy_theta_pt_t pose,$/;"	f
get_2d_motion_cells	src/utils/utils.cpp	/^void get_2d_motion_cells(vector<sbpl_2Dpt_t> polygon, vector<sbpl_xy_theta_pt_t> poses, vector<sbpl_2Dcell_t>* cells,$/;"	f
get_bresenham_parameters	src/utils/utils.cpp	/^void get_bresenham_parameters(int p1x, int p1y, int p2x, int p2y, bresenham_param_t *params)$/;"	f
get_current_point	src/utils/utils.cpp	/^void get_current_point(bresenham_param_t *params, int *x, int *y)$/;"	f
get_next_point	src/utils/utils.cpp	/^int get_next_point(bresenham_param_t *params)$/;"	f
normalizeAngle	src/utils/utils.cpp	/^double normalizeAngle(double angle)$/;"	f
writePlannerStats	src/utils/utils.cpp	/^void writePlannerStats(vector<PlannerStats> s, FILE* fout)$/;"	f
